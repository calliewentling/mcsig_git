{"version":3,"sources":["webpack:///../src/ol/format/OSMXML.js","webpack:///./vector-osm.js"],"names":["NAMESPACE_URIS","WAY_PARSERS","node","objectStack","length","ndrefs","push","getAttribute","readTag","PARSERS","const","options","state","id","coordinates","parseFloat","nodes","values","tags","NODE_PARSERS","geometry","Point","feature","Feature","setId","setProperties","features","ways","OSMXML","super","this","dataProjection","readFeaturesFromNode","opt_options","getReadOptions","localName","j","flatCoordinates","i","ii","point","let","Polygon","GeometryLayout","LineString","XMLFeature","map","styles","Style","stroke","Stroke","color","width","fill","Fill","zIndex","image","Circle","radius","vectorSource","Vector","format","loader","extent","resolution","projection","success","failure","epsg4326Extent","client","XMLHttpRequest","open","addEventListener","readFeatures","responseText","featureProjection","getView","getProjection","addFeatures","query","Math","max","min","send","strategy","vector","source","style","key","value","get","undefined","regexp","RegExp","test","raster","Tile","XYZ","attributions","url","maxZoom","Map","layers","target","document","getElementById","view","View","center","zoom"],"mappings":"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","file":"vector-osm.js","sourcesContent":["/**\n * @module ol/format/OSMXML\n */\n// FIXME add typedef for stack state objects\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport XMLFeature from './XMLFeature.js';\nimport {extend} from '../array.js';\nimport {get as getProjection} from '../proj.js';\nimport {isEmpty} from '../obj.js';\nimport {makeStructureNS, pushParseAndPop} from '../xml.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @const\n * @type {Array<null>}\n */\nconst NAMESPACE_URIS = [null];\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst WAY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'nd': readNd,\n  'tag': readTag,\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'node': readNode,\n  'way': readWay,\n});\n\n/**\n * @classdesc\n * Feature format for reading data in the\n * [OSMXML format](https://wiki.openstreetmap.org/wiki/OSM_XML).\n *\n * @api\n */\nclass OSMXML extends XMLFeature {\n  constructor() {\n    super();\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection('EPSG:4326');\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, opt_options) {\n    const options = this.getReadOptions(node, opt_options);\n    if (node.localName == 'osm') {\n      const state = pushParseAndPop(\n        {\n          nodes: {},\n          ways: [],\n          features: [],\n        },\n        PARSERS,\n        node,\n        [options]\n      );\n      // parse nodes in ways\n      for (let j = 0; j < state.ways.length; j++) {\n        const values = /** @type {Object} */ (state.ways[j]);\n        /** @type {Array<number>} */\n        const flatCoordinates = [];\n        for (let i = 0, ii = values.ndrefs.length; i < ii; i++) {\n          const point = state.nodes[values.ndrefs[i]];\n          extend(flatCoordinates, point);\n        }\n        let geometry;\n        if (values.ndrefs[0] == values.ndrefs[values.ndrefs.length - 1]) {\n          // closed way\n          geometry = new Polygon(flatCoordinates, GeometryLayout.XY, [\n            flatCoordinates.length,\n          ]);\n        } else {\n          geometry = new LineString(flatCoordinates, GeometryLayout.XY);\n        }\n        transformGeometryWithOptions(geometry, false, options);\n        const feature = new Feature(geometry);\n        feature.setId(values.id);\n        feature.setProperties(values.tags, true);\n        state.features.push(feature);\n      }\n      if (state.features) {\n        return state.features;\n      }\n    }\n    return [];\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst NODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'tag': readTag,\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readNode(node, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\n    objectStack[0]\n  );\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const id = node.getAttribute('id');\n  /** @type {import(\"../coordinate.js\").Coordinate} */\n  const coordinates = [\n    parseFloat(node.getAttribute('lon')),\n    parseFloat(node.getAttribute('lat')),\n  ];\n  state.nodes[id] = coordinates;\n\n  const values = pushParseAndPop(\n    {\n      tags: {},\n    },\n    NODE_PARSERS,\n    node,\n    objectStack\n  );\n  if (!isEmpty(values.tags)) {\n    const geometry = new Point(coordinates);\n    transformGeometryWithOptions(geometry, false, options);\n    const feature = new Feature(geometry);\n    feature.setId(id);\n    feature.setProperties(values.tags, true);\n    state.features.push(feature);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readWay(node, objectStack) {\n  const id = node.getAttribute('id');\n  const values = pushParseAndPop(\n    {\n      id: id,\n      ndrefs: [],\n      tags: {},\n    },\n    WAY_PARSERS,\n    node,\n    objectStack\n  );\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  state.ways.push(values);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readNd(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values.ndrefs.push(node.getAttribute('ref'));\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readTag(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values.tags[node.getAttribute('k')] = node.getAttribute('v');\n}\n\nexport default OSMXML;\n","import Map from '../src/ol/Map.js';\nimport OSMXML from '../src/ol/format/OSMXML.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {bbox as bboxStrategy} from '../src/ol/loadingstrategy.js';\nimport {transformExtent} from '../src/ol/proj.js';\n\nlet map = null;\n\nconst styles = {\n  'amenity': {\n    'parking': new Style({\n      stroke: new Stroke({\n        color: 'rgba(170, 170, 170, 1.0)',\n        width: 1,\n      }),\n      fill: new Fill({\n        color: 'rgba(170, 170, 170, 0.3)',\n      }),\n    }),\n  },\n  'building': {\n    '.*': new Style({\n      zIndex: 100,\n      stroke: new Stroke({\n        color: 'rgba(246, 99, 79, 1.0)',\n        width: 1,\n      }),\n      fill: new Fill({\n        color: 'rgba(246, 99, 79, 0.3)',\n      }),\n    }),\n  },\n  'highway': {\n    'service': new Style({\n      stroke: new Stroke({\n        color: 'rgba(255, 255, 255, 1.0)',\n        width: 2,\n      }),\n    }),\n    '.*': new Style({\n      stroke: new Stroke({\n        color: 'rgba(255, 255, 255, 1.0)',\n        width: 3,\n      }),\n    }),\n  },\n  'landuse': {\n    'forest|grass|allotments': new Style({\n      stroke: new Stroke({\n        color: 'rgba(140, 208, 95, 1.0)',\n        width: 1,\n      }),\n      fill: new Fill({\n        color: 'rgba(140, 208, 95, 0.3)',\n      }),\n    }),\n  },\n  'natural': {\n    'tree': new Style({\n      image: new CircleStyle({\n        radius: 2,\n        fill: new Fill({\n          color: 'rgba(140, 208, 95, 1.0)',\n        }),\n        stroke: null,\n      }),\n    }),\n  },\n};\n\nconst vectorSource = new VectorSource({\n  format: new OSMXML(),\n  loader: function (extent, resolution, projection, success, failure) {\n    const epsg4326Extent = transformExtent(extent, projection, 'EPSG:4326');\n    const client = new XMLHttpRequest();\n    client.open('POST', 'https://overpass-api.de/api/interpreter');\n    client.addEventListener('load', function () {\n      const features = new OSMXML().readFeatures(client.responseText, {\n        featureProjection: map.getView().getProjection(),\n      });\n      vectorSource.addFeatures(features);\n      success(features);\n    });\n    client.addEventListener('error', failure);\n    const query =\n      '(node(' +\n      epsg4326Extent[1] +\n      ',' +\n      Math.max(epsg4326Extent[0], -180) +\n      ',' +\n      epsg4326Extent[3] +\n      ',' +\n      Math.min(epsg4326Extent[2], 180) +\n      ');rel(bn)->.foo;way(bn);node(w)->.foo;rel(bw););out meta;';\n    client.send(query);\n  },\n  strategy: bboxStrategy,\n});\n\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: function (feature) {\n    for (const key in styles) {\n      const value = feature.get(key);\n      if (value !== undefined) {\n        for (const regexp in styles[key]) {\n          if (new RegExp(regexp).test(value)) {\n            return styles[key][regexp];\n          }\n        }\n      }\n    }\n    return null;\n  },\n});\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst raster = new TileLayer({\n  source: new XYZ({\n    attributions: attributions,\n    url: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=' + key,\n    maxZoom: 20,\n  }),\n});\n\nmap = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [739218, 5906096],\n    maxZoom: 19,\n    zoom: 17,\n  }),\n});\n"],"sourceRoot":""}