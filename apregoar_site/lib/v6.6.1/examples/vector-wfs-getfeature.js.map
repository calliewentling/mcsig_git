{"version":3,"sources":["webpack:///../src/ol/format/GML3.js","webpack:///../src/ol/format/GML32.js","webpack:///../src/ol/format/filter/Filter.js","webpack:///../src/ol/format/filter/And.js","webpack:///../src/ol/format/filter/LogicalNary.js","webpack:///../src/ol/format/filter/Bbox.js","webpack:///../src/ol/format/filter/Comparison.js","webpack:///../src/ol/format/filter/EqualTo.js","webpack:///../src/ol/format/filter/ComparisonBinary.js","webpack:///../src/ol/format/filter/IsLike.js","webpack:///../src/ol/format/filter.js","webpack:///../src/ol/format/WFS.js","webpack:///./vector-wfs-getfeature.js"],"names":["schemaLocation","MULTIGEOMETRY_TO_MEMBER_NODENAME","GML3","opt_options","const","options","super","this","surface_","undefined","surface","curve_","curve","multiCurve_","multiCurve","multiSurface_","multiSurface","hasZ","readMultiCurve","node","objectStack","lineStrings","MULTICURVE_PARSERS","MultiLineString","readMultiSurface","polygons","MULTISURFACE_PARSERS","MultiPolygon","curveMemberParser","CURVEMEMBER_PARSERS","surfaceMemberParser","SURFACEMEMBER_PARSERS","readPatch","PATCHES_PARSERS","readSegment","SEGMENTS_PARSERS","readPolygonPatch","FLAT_LINEAR_RINGS_PARSERS","readLineStringSegment","GEOMETRY_FLAT_COORDINATES_PARSERS","interiorParser","flatLinearRing","RING_PARSERS","length","push","exteriorParser","readSurface","flatLinearRings","SURFACE_PARSERS","i","ii","flatCoordinates","ends","Polygon","GeometryLayout","readCurve","CURVE_PARSERS","LineString","readEnvelope","ENVELOPE_PARSERS","readFlatPos","let","m","s","re","exec","parseFloat","substr","containerSrs","axisOrientation","getAxisOrientation","y","x","len","readFlatPosList","replace","context","contextDimension","z","coords","split","dim","getAttribute","writePos_","value","srsDimension","setAttribute","srsName","point","getCoordinates","getCoords_","opt_srsName","opt_hasZ","writePosList_","points","parts","Array","join","writePoint","geometry","pos","c","namespaceURI","appendChild","writeEnvelope","extent","values","ENVELOPE_SERIALIZERS","writeLinearRing","posList","RING_NODE_FACTORY_","opt_nodeName","parentNode","exteriorWritten","writeSurfaceOrPolygon","nodeName","rings","getLinearRings","RING_SERIALIZERS","patches","writeSurfacePatches_","writeCurveOrLineString","segments","writeCurveSegments_","writeMultiSurfaceOrPolygon","getPolygons","SURFACEORPOLYGONMEMBER_SERIALIZERS","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","writeMultiPoint","getPoints","POINTMEMBER_SERIALIZERS","writeMultiCurveOrLineString","lines","getLineStrings","LINESTRINGORCURVEMEMBER_SERIALIZERS","writeRing","ring","linearRing","writeSurfaceOrPolygonMember","polygon","child","GEOMETRY_NODE_FACTORY_","writePointMember","writeLineStringOrCurveMember","line","writeGeometryElement","item","isArray","GEOMETRY_SERIALIZERS","writeFeatureElement","feature","fid","getId","featureNS","geometryName","getGeometryName","serializers","keys","hasProperties","properties","getProperties","key","writeFeatureMembers_","features","featureType","namespace","getType","writeGeometryNode","adaptOptions","geom","writeFeaturesNode","setAttributeNS","GMLBase","prototype","GML2","GEOMETRY_PARSERS","writeFeatures","GML32","MULTIPOINT_PARSERS","MULTILINESTRING_PARSERS","MULTIPOLYGON_PARSERS","POINTMEMBER_PARSERS","LINESTRINGMEMBER_PARSERS","POLYGONMEMBER_PARSERS","Filter","tagName","tagName_","getTagName","conditions","slice","call","arguments","Error","propertyName","expression","opt_matchCase","matchCase","pattern","opt_wildCard","opt_singleChar","opt_escapeChar","wildCard","singleChar","escapeChar","and","params","concat","Function","bind","apply","FEATURE_COLLECTION_PARSERS","TRANSACTION_SUMMARY_PARSERS","TRANSACTION_RESPONSE_PARSERS","readTransactionSummary","readInsertResults","QUERY_SERIALIZERS","TRANSACTION_SERIALIZERS","writeFeature","writeUpdate","writeDelete","writeProperty","writeNative","FEATURE_PREFIX","XMLNS","OGCNS","WFSNS","FESNS","SCHEMA_LOCATIONS","GML_FORMATS","WFS","version_","version","featureType_","featureNS_","gmlFormat_","gmlFormat","schemaLocation_","getFeatureType","setFeatureType","readFeaturesFromNode","getReadOptions","featuresNS","readTransactionResponse","source","doc","readTransactionResponseFromDocument","readTransactionResponseFromNode","readFeatureCollectionMetadata","readFeatureCollectionMetadataFromDocument","readFeatureCollectionMetadataFromNode","n","nextSibling","nodeType","Node","ELEMENT_NODE","result","writeGetFeature","handle","outputFormat","maxFeatures","String","resultType","startIndex","count","viewParams","featurePrefix","propertyNames","featureTypes","filter","bbox","combineBboxAndFilter","forEach","completeFilter","name","opt_filter","bboxFilter","writeTransaction","inserts","updates","deletes","baseObj","gmlOptions","request","gmlVersion","createTransactionRequest","serializeTransactionRequest","nativeElements","readProjectionFromDocument","firstChild","readProjectionFromNode","firstElementChild","nextElementSibling","childNodes","readGeometryElement","pop","XMLFeature","type","OGC_FID_PARSERS","fidParser","INSERT_RESULTS_PARSERS","writeOgcFidFilter","ns","getTypeName","prefix","indexOf","typeName","getKeys","get","pair","nativeElement","vendorId","safeToIgnore","GETFEATURE_SERIALIZERS","writeQuery","writeDuringFilter","writeLogicalFilter","writeNotFilter","writeBboxFilter","writeSpatialFilter","writeDWithinFilter","writeComparisonFilter","writeIsNullFilter","writeIsBetweenFilter","writeIsLikeFilter","typeNameAttr","getFilterNS","writeFilterCondition","parent","format","writePropertyName","distance","toString","unit","writeExpression","timePeriod","begin","writeTimeInstant","end","condition","writeLiteral","lowerBoundary","upperBoundary","property","time","timeInstant","timePosition","vectorSource","Vector","vector","style","Style","stroke","Stroke","color","width","raster","Tile","XYZ","attributions","url","maxZoom","map","Map","layers","target","document","getElementById","view","View","center","zoom","featureRequest","equalTo","fetch","method","body","XMLSerializer","serializeToString","then","response","json","GeoJSON","readFeatures","addFeatures","getView","fit","getExtent"],"mappings":"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","file":"vector-wfs-getfeature.js","sourcesContent":["/**\n * @module ol/format/GML3\n */\nimport GML2 from './GML2.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport {\n  OBJECT_PROPERTY_NODE_FACTORY,\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  getAllTextContent,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n  makeSimpleNodeFactory,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {assign} from '../obj.js';\nimport {createOrUpdate} from '../extent.js';\nimport {extend} from '../array.js';\nimport {get as getProjection} from '../proj.js';\nimport {readNonNegativeIntegerString, writeStringTextNode} from './xsd.js';\nimport {\n  transformExtentWithOptions,\n  transformGeometryWithOptions,\n} from './Feature.js';\n\n/**\n * @const\n * @type {string}\n * @private\n */\nconst schemaLocation =\n  GMLNS +\n  ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n  '1.0.0/gmlsf.xsd';\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember',\n};\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\nclass GML3 extends GMLBase {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [opt_options] Optional configuration object.\n   */\n  constructor(opt_options) {\n    const options =\n      /** @type {import(\"./GMLBase.js\").Options} */\n      (opt_options ? opt_options : {});\n\n    super(options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.surface_ = options.surface !== undefined ? options.surface : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.curve_ = options.curve !== undefined ? options.curve : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiCurve_ =\n      options.multiCurve !== undefined ? options.multiCurve : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiSurface_ =\n      options.multiSurface !== undefined ? options.multiSurface : true;\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : schemaLocation;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n  readMultiCurve(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop(\n      [],\n      this.MULTICURVE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (lineStrings) {\n      const multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n  readMultiSurface(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    const polygons = pushParseAndPop(\n      [],\n      this.MULTISURFACE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  curveMemberParser(node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  surfaceMemberParser(node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPatch(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.PATCHES_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readSegment(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.SEGMENTS_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPolygonPatch(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.FLAT_LINEAR_RINGS_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readLineStringSegment(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  interiorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  exteriorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Polygon|undefined} Polygon.\n   */\n  readSurface(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const flatLinearRings = pushParseAndPop(\n      [null],\n      this.SURFACE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRings && flatLinearRings[0]) {\n      const flatCoordinates = flatLinearRings[0];\n      const ends = [flatCoordinates.length];\n      let i, ii;\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n      return new Polygon(flatCoordinates, GeometryLayout.XYZ, ends);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LineString|undefined} LineString.\n   */\n  readCurve(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.CURVE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatCoordinates) {\n      const lineString = new LineString(flatCoordinates, GeometryLayout.XYZ);\n      return lineString;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readEnvelope(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.ENVELOPE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    return createOrUpdate(\n      flatCoordinates[1][0],\n      flatCoordinates[1][1],\n      flatCoordinates[2][0],\n      flatCoordinates[2][1]\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPos(node, objectStack) {\n    let s = getAllTextContent(node, false);\n    const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n    const flatCoordinates = [];\n    let m;\n    while ((m = re.exec(s))) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n    if (s !== '') {\n      return undefined;\n    }\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    if (axisOrientation === 'neu') {\n      let i, ii;\n      for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        const y = flatCoordinates[i];\n        const x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n    const len = flatCoordinates.length;\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n    if (len === 0) {\n      return undefined;\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPosList(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const contextDimension = context['srsDimension'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    const coords = s.split(/\\s+/);\n    // The \"dimension\" attribute is from the GML 3.0.1 spec.\n    let dim = 2;\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\n    } else if (\n      /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\n    ) {\n      dim = readNonNegativeIntegerString(\n        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\n      );\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n    let x, y, z;\n    const flatCoordinates = [];\n    for (let i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePos_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    let axisOrientation = 'enu';\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n    const point = value.getCoordinates();\n    let coords;\n    // only 2d for simple features profile\n    if (axisOrientation.substr(0, 2) === 'en') {\n      coords = point[0] + ' ' + point[1];\n    } else {\n      coords = point[1] + ' ' + point[0];\n    }\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n    writeStringTextNode(node, coords);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [opt_srsName] Optional srsName\n   * @param {boolean} [opt_hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, opt_srsName, opt_hasZ) {\n    let axisOrientation = 'enu';\n    if (opt_srsName) {\n      axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n    }\n    let coords =\n      axisOrientation.substr(0, 2) === 'en'\n        ? point[0] + ' ' + point[1]\n        : point[1] + ' ' + point[0];\n    if (opt_hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePosList_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    let point;\n    for (let i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: node}),\n      this.ENVELOPE_SERIALIZERS,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      objectStack,\n      keys,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLinearRing(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(\n      parentNode.namespaceURI,\n      exteriorWritten !== undefined ? 'interior' : 'exterior'\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop(\n        {node: node, hasZ: hasZ, srsName: srsName},\n        this.RING_SERIALIZERS,\n        this.RING_NODE_FACTORY_,\n        rings,\n        objectStack,\n        undefined,\n        this\n      );\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (\n      node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment'\n    ) {\n      const posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      polygons,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiPoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    const hasZ = context['hasZ'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      this.POINTMEMBER_SERIALIZERS,\n      makeSimpleNodeFactory('pointMember'),\n      points,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      lines,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeRing(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePointMember(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLineStringOrCurveMember(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const item = assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(\n        /** @type {import(\"../extent.js\").Extent} */ (geometry),\n        context\n      );\n    } else {\n      value = transformGeometryWithOptions(\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry),\n        true,\n        context\n      );\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      this.GEOMETRY_SERIALIZERS,\n      this.GEOMETRY_NODE_FACTORY_,\n      [value],\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */ (fid));\n    }\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const keys = [];\n    const values = [];\n    if (feature.hasProperties()) {\n      const properties = feature.getProperties();\n      for (const key in properties) {\n        const value = properties[key];\n        if (value !== null) {\n          keys.push(key);\n          values.push(value);\n          if (\n            key == geometryName ||\n            typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===\n              'function'\n          ) {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(\n                this.writeGeometryElement,\n                this\n              );\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] =\n                makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n    const item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      context.serializers,\n      makeSimpleNodeFactory(undefined, featureNS),\n      values,\n      objectStack,\n      keys\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeFeatureMembers_(node, features, objectStack) {\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureType = context['featureType'];\n    const featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n    const serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(\n      this.writeFeatureElement,\n      this\n    );\n    const item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      serializers,\n      makeSimpleNodeFactory(featureType, featureNS),\n      features,\n      objectStack\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(\n      this.namespace,\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const curve = context['curve'];\n    const multiCurve = context['multiCurve'];\n    let nodeName;\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        value\n      ).getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS(this.namespace, nodeName);\n  }\n\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n   * @return {Node} Node.\n   * @api\n   */\n  writeGeometryNode(geometry, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const geom = createElementNS(this.namespace, 'geom');\n    const context = {\n      node: geom,\n      hasZ: this.hasZ,\n      srsName: this.srsName,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n    };\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  }\n\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n   * @return {Element} Node.\n   * @api\n   */\n  writeFeaturesNode(features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      this.schemaLocation\n    );\n    const context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType,\n    };\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML3.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeReplacer(GML3.prototype.readLineStringSegment),\n  },\n};\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML3.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString\n    ),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\n  },\n};\n\nexport default GML3;\n","/**\n * @module ol/format/GML32\n */\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GMLBase from './GMLBase.js';\nimport {makeArrayPusher, makeChildAppender, makeReplacer} from '../xml.js';\nimport {writeStringTextNode} from '../format/xsd.js';\n\n/**\n * @classdesc Feature format for reading and writing data in the GML format\n *            version 3.2.1.\n * @api\n */\nclass GML32 extends GML3 {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [opt_options] Optional configuration object.\n   */\n  constructor(opt_options) {\n    const options = /** @type {import(\"./GMLBase.js\").Options} */ (\n      opt_options ? opt_options : {}\n    );\n\n    super(options);\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : this.namespace + ' http://schemas.opengis.net/gml/3.2.1/gml.xsd';\n  }\n}\n\nGML32.prototype.namespace = 'http://www.opengis.net/gml/3.2';\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML32.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML32.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML32.prototype.readEnvelope),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'patches': makeReplacer(GML3.prototype.readPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'segments': makeReplacer(GML3.prototype.readSegment),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineStringSegment': makeReplacer(GML3.prototype.readLineStringSegment),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTIPOINT_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n    'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTILINESTRING_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lineStringMember': makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser\n    ),\n    'lineStringMembers': makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTIPOLYGON_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n    'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.POINTMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.LINESTRINGMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.POLYGONMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML32.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString\n    ),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\n  },\n};\n\nexport default GML32;\n","/**\n * @module ol/format/filter/Filter\n */\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature filters.\n *\n * @abstract\n */\nclass Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   */\n  constructor(tagName) {\n    /**\n     * @private\n     * @type {!string}\n     */\n    this.tagName_ = tagName;\n  }\n\n  /**\n   * The XML tag name for a filter.\n   * @return {!string} Name.\n   */\n  getTagName() {\n    return this.tagName_;\n  }\n}\n\nexport default Filter;\n","/**\n * @module ol/format/filter/And\n */\nimport LogicalNary from './LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @abstract\n */\nclass And extends LogicalNary {\n  /**\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\n   */\n  constructor(conditions) {\n    super('And', Array.prototype.slice.call(arguments));\n  }\n}\n\nexport default And;\n","/**\n * @module ol/format/filter/LogicalNary\n */\nimport Filter from './Filter.js';\nimport {assert} from '../../asserts.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @abstract\n */\nclass LogicalNary extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {Array<import(\"./Filter.js\").default>} conditions Conditions.\n   */\n  constructor(tagName, conditions) {\n    super(tagName);\n\n    /**\n     * @type {Array<import(\"./Filter.js\").default>}\n     */\n    this.conditions = conditions;\n    assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.\n  }\n}\n\nexport default LogicalNary;\n","/**\n * @module ol/format/filter/Bbox\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @api\n */\nclass Bbox extends Filter {\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../extent.js\").Extent} extent Extent.\n   * @param {string} [opt_srsName] SRS name. No srsName attribute will be set\n   * on geometries when this is not provided.\n   */\n  constructor(geometryName, extent, opt_srsName) {\n    super('BBOX');\n\n    /**\n     * @type {!string}\n     */\n    this.geometryName = geometryName;\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent = extent;\n    if (extent.length !== 4) {\n      throw new Error(\n        'Expected an extent with four values ([minX, minY, maxX, maxY])'\n      );\n    }\n\n    /**\n     * @type {string|undefined}\n     */\n    this.srsName = opt_srsName;\n  }\n}\n\nexport default Bbox;\n","/**\n * @module ol/format/filter/Comparison\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property comparison filters.\n *\n * @abstract\n */\nclass Comparison extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   */\n  constructor(tagName, propertyName) {\n    super(tagName);\n\n    /**\n     * @type {!string}\n     */\n    this.propertyName = propertyName;\n  }\n}\n\nexport default Comparison;\n","/**\n * @module ol/format/filter/EqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n * @api\n */\nclass EqualTo extends ComparisonBinary {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean} [opt_matchCase] Case-sensitive?\n   */\n  constructor(propertyName, expression, opt_matchCase) {\n    super('PropertyIsEqualTo', propertyName, expression, opt_matchCase);\n  }\n}\n\nexport default EqualTo;\n","/**\n * @module ol/format/filter/ComparisonBinary\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property binary comparison filters.\n *\n * @abstract\n */\nclass ComparisonBinary extends Comparison {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean} [opt_matchCase] Case-sensitive?\n   */\n  constructor(tagName, propertyName, expression, opt_matchCase) {\n    super(tagName, propertyName);\n\n    /**\n     * @type {!(string|number)}\n     */\n    this.expression = expression;\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = opt_matchCase;\n  }\n}\n\nexport default ComparisonBinary;\n","/**\n * @module ol/format/filter/IsLike\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\nclass IsLike extends Comparison {\n  /**\n   * [constructor description]\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} pattern Text pattern.\n   * @param {string} [opt_wildCard] Pattern character which matches any sequence of\n   *    zero or more string characters. Default is '*'.\n   * @param {string} [opt_singleChar] pattern character which matches any single\n   *    string character. Default is '.'.\n   * @param {string} [opt_escapeChar] Escape character which can be used to escape\n   *    the pattern characters. Default is '!'.\n   * @param {boolean} [opt_matchCase] Case-sensitive?\n   */\n  constructor(\n    propertyName,\n    pattern,\n    opt_wildCard,\n    opt_singleChar,\n    opt_escapeChar,\n    opt_matchCase\n  ) {\n    super('PropertyIsLike', propertyName);\n\n    /**\n     * @type {!string}\n     */\n    this.pattern = pattern;\n\n    /**\n     * @type {!string}\n     */\n    this.wildCard = opt_wildCard !== undefined ? opt_wildCard : '*';\n\n    /**\n     * @type {!string}\n     */\n    this.singleChar = opt_singleChar !== undefined ? opt_singleChar : '.';\n\n    /**\n     * @type {!string}\n     */\n    this.escapeChar = opt_escapeChar !== undefined ? opt_escapeChar : '!';\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = opt_matchCase;\n  }\n}\n\nexport default IsLike;\n","/**\n * @module ol/format/filter\n */\nimport And from './filter/And.js';\nimport Bbox from './filter/Bbox.js';\nimport Contains from './filter/Contains.js';\nimport DWithin from './filter/DWithin.js';\nimport Disjoint from './filter/Disjoint.js';\nimport During from './filter/During.js';\nimport EqualTo from './filter/EqualTo.js';\nimport GreaterThan from './filter/GreaterThan.js';\nimport GreaterThanOrEqualTo from './filter/GreaterThanOrEqualTo.js';\nimport Intersects from './filter/Intersects.js';\nimport IsBetween from './filter/IsBetween.js';\nimport IsLike from './filter/IsLike.js';\nimport IsNull from './filter/IsNull.js';\nimport LessThan from './filter/LessThan.js';\nimport LessThanOrEqualTo from './filter/LessThanOrEqualTo.js';\nimport Not from './filter/Not.js';\nimport NotEqualTo from './filter/NotEqualTo.js';\nimport Or from './filter/Or.js';\nimport ResourceId from './filter/ResourceId.js';\nimport Within from './filter/Within.js';\n\n/**\n * Create a logical `<And>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!And} `<And>` operator.\n * @api\n */\nexport function and(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(And, params))();\n}\n\n/**\n * Create a logical `<Or>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!Or} `<Or>` operator.\n * @api\n */\nexport function or(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(Or, params))();\n}\n\n/**\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @param {!import(\"./filter/Filter.js\").default} condition Filter condition.\n * @return {!Not} `<Not>` operator.\n * @api\n */\nexport function not(condition) {\n  return new Not(condition);\n}\n\n/**\n * Create a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../extent.js\").Extent} extent Extent.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Bbox} `<BBOX>` operator.\n * @api\n */\nexport function bbox(geometryName, extent, opt_srsName) {\n  return new Bbox(geometryName, extent, opt_srsName);\n}\n\n/**\n * Create a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Contains} `<Contains>` operator.\n * @api\n */\nexport function contains(geometryName, geometry, opt_srsName) {\n  return new Contains(geometryName, geometry, opt_srsName);\n}\n\n/**\n * Create a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Intersects} `<Intersects>` operator.\n * @api\n */\nexport function intersects(geometryName, geometry, opt_srsName) {\n  return new Intersects(geometryName, geometry, opt_srsName);\n}\n\n/**\n * Create a `<Disjoint>` operator to test whether a geometry-valued property\n * is disjoint to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Disjoint} `<Disjoint>` operator.\n * @api\n */\nexport function disjoint(geometryName, geometry, opt_srsName) {\n  return new Disjoint(geometryName, geometry, opt_srsName);\n}\n\n/**\n * Create a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Within} `<Within>` operator.\n * @api\n */\nexport function within(geometryName, geometry, opt_srsName) {\n  return new Within(geometryName, geometry, opt_srsName);\n}\n\n/**\n * Create a `<DWithin>` operator to test whether a geometry-valued property\n * is within a distance to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {!number} distance Distance.\n * @param {!string} unit Unit.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!DWithin} `<DWithin>` operator.\n * @api\n */\nexport function dwithin(geometryName, geometry, distance, unit, opt_srsName) {\n  return new DWithin(geometryName, geometry, distance, unit, opt_srsName);\n}\n\n/**\n * Creates a `<PropertyIsEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [opt_matchCase] Case-sensitive?\n * @return {!EqualTo} `<PropertyIsEqualTo>` operator.\n * @api\n */\nexport function equalTo(propertyName, expression, opt_matchCase) {\n  return new EqualTo(propertyName, expression, opt_matchCase);\n}\n\n/**\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [opt_matchCase] Case-sensitive?\n * @return {!NotEqualTo} `<PropertyIsNotEqualTo>` operator.\n * @api\n */\nexport function notEqualTo(propertyName, expression, opt_matchCase) {\n  return new NotEqualTo(propertyName, expression, opt_matchCase);\n}\n\n/**\n * Creates a `<PropertyIsLessThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThan} `<PropertyIsLessThan>` operator.\n * @api\n */\nexport function lessThan(propertyName, expression) {\n  return new LessThan(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\n * @api\n */\nexport function lessThanOrEqualTo(propertyName, expression) {\n  return new LessThanOrEqualTo(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThan} `<PropertyIsGreaterThan>` operator.\n * @api\n */\nexport function greaterThan(propertyName, expression) {\n  return new GreaterThan(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\n * @api\n */\nexport function greaterThanOrEqualTo(propertyName, expression) {\n  return new GreaterThanOrEqualTo(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\n * is null.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @return {!IsNull} `<PropertyIsNull>` operator.\n * @api\n */\nexport function isNull(propertyName) {\n  return new IsNull(propertyName);\n}\n\n/**\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\n * value lies within a range given by a lower and upper bound (inclusive).\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @return {!IsBetween} `<PropertyIsBetween>` operator.\n * @api\n */\nexport function between(propertyName, lowerBoundary, upperBoundary) {\n  return new IsBetween(propertyName, lowerBoundary, upperBoundary);\n}\n\n/**\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\n * value against a text pattern.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string} [opt_wildCard] Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string} [opt_singleChar] pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string} [opt_escapeChar] Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean} [opt_matchCase] Case-sensitive?\n * @return {!IsLike} `<PropertyIsLike>` operator.\n * @api\n */\nexport function like(\n  propertyName,\n  pattern,\n  opt_wildCard,\n  opt_singleChar,\n  opt_escapeChar,\n  opt_matchCase\n) {\n  return new IsLike(\n    propertyName,\n    pattern,\n    opt_wildCard,\n    opt_singleChar,\n    opt_escapeChar,\n    opt_matchCase\n  );\n}\n\n/**\n * Create a `<During>` temporal operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @return {!During} `<During>` operator.\n * @api\n */\nexport function during(propertyName, begin, end) {\n  return new During(propertyName, begin, end);\n}\n\nexport function resourceId(rid) {\n  return new ResourceId(rid);\n}\n","/**\n * @module ol/format/WFS\n */\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GML32 from './GML32.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport XMLFeature from './XMLFeature.js';\nimport {\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  isDocument,\n  makeArrayPusher,\n  makeChildAppender,\n  makeObjectPropertySetter,\n  makeSimpleNodeFactory,\n  parse,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {and as andFilterFn, bbox as bboxFilterFn} from './filter.js';\nimport {assert} from '../asserts.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  readNonNegativeInteger,\n  readNonNegativeIntegerString,\n  writeStringTextNode,\n} from './xsd.js';\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst FEATURE_COLLECTION_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'boundedBy': makeObjectPropertySetter(\n      GMLBase.prototype.readGeometryElement,\n      'bounds'\n    ),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'member': makeArrayPusher(GMLBase.prototype.readFeaturesInternal),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_SUMMARY_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'totalInserted': makeObjectPropertySetter(readNonNegativeInteger),\n    'totalUpdated': makeObjectPropertySetter(readNonNegativeInteger),\n    'totalDeleted': makeObjectPropertySetter(readNonNegativeInteger),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'totalInserted': makeObjectPropertySetter(readNonNegativeInteger),\n    'totalUpdated': makeObjectPropertySetter(readNonNegativeInteger),\n    'totalDeleted': makeObjectPropertySetter(readNonNegativeInteger),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_RESPONSE_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary,\n      'transactionSummary'\n    ),\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary,\n      'transactionSummary'\n    ),\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst QUERY_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'PropertyName': makeChildAppender(writeStringTextNode),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'PropertyName': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst TRANSACTION_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative),\n  },\n};\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.\n * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.\n * @property {GMLBase} [gmlFormat] The GML format to use to parse the response.\n * Default is `ol/format/GML2` for WFS 1.0.0, `ol/format/GML3` for WFS 1.1.0 and `ol/format/GML32` for WFS 2.0.0.\n * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.\n * @property {string} [version='1.1.0'] WFS version to use. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\n */\n\n/**\n * @typedef {Object} WriteGetFeatureOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {Array<string|FeatureType>} featureTypes The feature type names or FeatureType objects to\n * define a unique bbox filter per feature type name (in this case, options `bbox` and `geometryName` are\n * ignored.).\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {string} [outputFormat] Output format.\n * @property {number} [maxFeatures] Maximum number of features to fetch.\n * @property {string} [geometryName] Geometry name to use in a BBOX filter.\n * @property {Array<string>} [propertyNames] Optional list of property names to serialize.\n * @property {string} [viewParams] viewParams GeoServer vendor parameter.\n * @property {number} [startIndex] Start index to use for WFS paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.\n * @property {number} [count] Number of features to retrieve when paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some\n * Web Feature Services have repurposed `maxfeatures` instead.\n * @property {import(\"../extent.js\").Extent} [bbox] Extent to use for the BBOX filter. The `geometryName`\n * option must be set.\n * @property {import(\"./filter/Filter.js\").default} [filter] Filter condition. See\n * {@link module:ol/format/Filter} for more information.\n * @property {string} [resultType] Indicates what response should be returned,\n * E.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.\n */\n\n/**\n * @typedef {Object} FeatureType\n * @property {!string} name The feature type name.\n * @property {!import(\"../extent.js\").Extent} bbox Extent to use for the BBOX filter.\n * @property {!string} geometryName Geometry name to use in the BBOX filter.\n */\n\n/**\n * @typedef {Object} WriteTransactionOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {string} featureType The feature type name.\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {boolean} [hasZ] Must be set to true if the transaction is for\n * a 3D layer. This will allow the Z coordinate to be included in the transaction.\n * @property {Array<Object>} nativeElements Native elements. Currently not supported.\n * @property {import(\"./GMLBase.js\").Options} [gmlOptions] GML options for the WFS transaction writer.\n * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\n */\n\n/**\n * Number of features; bounds/extent.\n * @typedef {Object} FeatureCollectionMetadata\n * @property {number} numberOfFeatures NumberOfFeatures.\n * @property {import(\"../extent.js\").Extent} bounds Bounds.\n */\n\n/**\n * Total deleted; total inserted; total updated; array of insert ids.\n * @typedef {Object} TransactionResponse\n * @property {number} totalDeleted TotalDeleted.\n * @property {number} totalInserted TotalInserted.\n * @property {number} totalUpdated TotalUpdated.\n * @property {Array<string>} insertIds InsertIds.\n */\n\n/**\n * @type {string}\n */\nconst FEATURE_PREFIX = 'feature';\n\n/**\n * @type {string}\n */\nconst XMLNS = 'http://www.w3.org/2000/xmlns/';\n\n/**\n * @type {Object<string, string>}\n */\nconst OGCNS = {\n  '2.0.0': 'http://www.opengis.net/ogc/1.1',\n  '1.1.0': 'http://www.opengis.net/ogc',\n  '1.0.0': 'http://www.opengis.net/ogc',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst WFSNS = {\n  '2.0.0': 'http://www.opengis.net/wfs/2.0',\n  '1.1.0': 'http://www.opengis.net/wfs',\n  '1.0.0': 'http://www.opengis.net/wfs',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst FESNS = {\n  '2.0.0': 'http://www.opengis.net/fes/2.0',\n  '1.1.0': 'http://www.opengis.net/fes',\n  '1.0.0': 'http://www.opengis.net/fes',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst SCHEMA_LOCATIONS = {\n  '2.0.0':\n    'http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd',\n  '1.1.0':\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\n  '1.0.0':\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd',\n};\n\n/**\n * @type {Object<string, object>}\n */\nconst GML_FORMATS = {\n  '2.0.0': GML32,\n  '1.1.0': GML3,\n  '1.0.0': GML2,\n};\n\n/**\n * @const\n * @type {string}\n */\nconst DEFAULT_VERSION = '1.1.0';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the WFS format.\n * By default, supports WFS version 1.1.0. You can pass a GML format\n * as option to override the default.\n * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.\n *\n * @api\n */\nclass WFS extends XMLFeature {\n  /**\n   * @param {Options} [opt_options] Optional configuration object.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version ? options.version : DEFAULT_VERSION;\n\n    /**\n     * @private\n     * @type {Array<string>|string|undefined}\n     */\n    this.featureType_ = options.featureType;\n\n    /**\n     * @private\n     * @type {Object<string, string>|string|undefined}\n     */\n    this.featureNS_ = options.featureNS;\n\n    /**\n     * @private\n     * @type {GMLBase}\n     */\n    this.gmlFormat_ = options.gmlFormat\n      ? options.gmlFormat\n      : new GML_FORMATS[this.version_]();\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.schemaLocation_ = options.schemaLocation\n      ? options.schemaLocation\n      : SCHEMA_LOCATIONS[this.version_];\n  }\n\n  /**\n   * @return {Array<string>|string|undefined} featureType\n   */\n  getFeatureType() {\n    return this.featureType_;\n  }\n\n  /**\n   * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.\n   */\n  setFeatureType(featureType) {\n    this.featureType_ = featureType;\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, opt_options) {\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node,\n    };\n    assign(context, {\n      'featureType': this.featureType_,\n      'featureNS': this.featureNS_,\n    });\n\n    assign(context, this.getReadOptions(node, opt_options ? opt_options : {}));\n    const objectStack = [context];\n    let featuresNS;\n    if (this.version_ === '2.0.0') {\n      featuresNS = FEATURE_COLLECTION_PARSERS;\n    } else {\n      featuresNS = this.gmlFormat_.FEATURE_COLLECTION_PARSERS;\n    }\n    let features = pushParseAndPop(\n      [],\n      featuresNS,\n      node,\n      objectStack,\n      this.gmlFormat_\n    );\n    if (!features) {\n      features = [];\n    }\n    return features;\n  }\n\n  /**\n   * Read transaction response of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {TransactionResponse|undefined} Transaction response.\n   * @api\n   */\n  readTransactionResponse(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readTransactionResponseFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readTransactionResponseFromDocument(\n        /** @type {Document} */ (source)\n      );\n    } else {\n      return this.readTransactionResponseFromNode(\n        /** @type {Element} */ (source)\n      );\n    }\n  }\n\n  /**\n   * Read feature collection metadata of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   * @api\n   */\n  readFeatureCollectionMetadata(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeatureCollectionMetadataFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readFeatureCollectionMetadataFromDocument(\n        /** @type {Document} */ (source)\n      );\n    } else {\n      return this.readFeatureCollectionMetadataFromNode(\n        /** @type {Element} */ (source)\n      );\n    }\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readFeatureCollectionMetadataFromNode(\n          /** @type {Element} */ (n)\n        );\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromNode(node) {\n    const result = {};\n    const value = readNonNegativeIntegerString(\n      node.getAttribute('numberOfFeatures')\n    );\n    result['numberOfFeatures'] = value;\n    return pushParseAndPop(\n      /** @type {FeatureCollectionMetadata} */ (result),\n      FEATURE_COLLECTION_PARSERS,\n      node,\n      [],\n      this.gmlFormat_\n    );\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readTransactionResponseFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromNode(node) {\n    return pushParseAndPop(\n      /** @type {TransactionResponse} */ ({}),\n      TRANSACTION_RESPONSE_PARSERS,\n      node,\n      []\n    );\n  }\n\n  /**\n   * Encode format as WFS `GetFeature` and return the Node.\n   *\n   * @param {WriteGetFeatureOptions} options Options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeGetFeature(options) {\n    const node = createElementNS(WFSNS[this.version_], 'GetFeature');\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', this.version_);\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n    if (options.outputFormat) {\n      node.setAttribute('outputFormat', options.outputFormat);\n    }\n    if (options.maxFeatures !== undefined) {\n      node.setAttribute('maxFeatures', String(options.maxFeatures));\n    }\n    if (options.resultType) {\n      node.setAttribute('resultType', options.resultType);\n    }\n    if (options.startIndex !== undefined) {\n      node.setAttribute('startIndex', String(options.startIndex));\n    }\n    if (options.count !== undefined) {\n      node.setAttribute('count', String(options.count));\n    }\n    if (options.viewParams !== undefined) {\n      node.setAttribute('viewParams', options.viewParams);\n    }\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      this.schemaLocation_\n    );\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node,\n    };\n    assign(context, {\n      'version': this.version_,\n      'srsName': options.srsName,\n      'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\n      'featurePrefix': options.featurePrefix,\n      'propertyNames': options.propertyNames ? options.propertyNames : [],\n    });\n    assert(Array.isArray(options.featureTypes), 11); // `options.featureTypes` must be an Array\n    if (typeof options.featureTypes[0] === 'string') {\n      let filter = options.filter;\n      if (options.bbox) {\n        assert(options.geometryName, 12); // `options.geometryName` must also be provided when `options.bbox` is set\n        filter = this.combineBboxAndFilter(\n          options.geometryName,\n          options.bbox,\n          options.srsName,\n          filter\n        );\n      }\n      assign(context, {\n        'geometryName': options.geometryName,\n        'filter': filter,\n      });\n      writeGetFeature(\n        node,\n        /** @type {!Array<string>} */ (options.featureTypes),\n        [context]\n      );\n    } else {\n      // Write one query node per element in featuresType.\n      options.featureTypes.forEach((/** @type {FeatureType} */ featureType) => {\n        const completeFilter = this.combineBboxAndFilter(\n          featureType.geometryName,\n          featureType.bbox,\n          options.srsName,\n          options.filter\n        );\n        assign(context, {\n          'geometryName': featureType.geometryName,\n          'filter': completeFilter,\n        });\n        writeGetFeature(node, [featureType.name], [context]);\n      });\n    }\n    return node;\n  }\n\n  /**\n   * Create a bbox filter and combine it with another optional filter.\n   *\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../extent.js\").Extent} extent Extent.\n   * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   * @param {import(\"./filter/Filter.js\").default} [opt_filter] Filter condition.\n   * @return {import(\"./filter/Filter.js\").default} The filter.\n   */\n  combineBboxAndFilter(geometryName, extent, opt_srsName, opt_filter) {\n    const bboxFilter = bboxFilterFn(geometryName, extent, opt_srsName);\n    if (opt_filter) {\n      // if bbox and filter are both set, combine the two into a single filter\n      return andFilterFn(opt_filter, bboxFilter);\n    }\n    return bboxFilter;\n  }\n\n  /**\n   * Encode format as WFS `Transaction` and return the Node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} inserts The features to insert.\n   * @param {Array<import(\"../Feature.js\").default>} updates The features to update.\n   * @param {Array<import(\"../Feature.js\").default>} deletes The features to delete.\n   * @param {WriteTransactionOptions} options Write options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeTransaction(inserts, updates, deletes, options) {\n    const objectStack = [];\n    const version = options.version ? options.version : this.version_;\n    const node = createElementNS(WFSNS[version], 'Transaction');\n\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', version);\n    let baseObj;\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    if (options) {\n      baseObj = options.gmlOptions ? options.gmlOptions : {};\n      if (options.handle) {\n        node.setAttribute('handle', options.handle);\n      }\n    }\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      SCHEMA_LOCATIONS[version]\n    );\n\n    const request = createTransactionRequest(node, baseObj, version, options);\n    if (inserts) {\n      serializeTransactionRequest('Insert', inserts, objectStack, request);\n    }\n    if (updates) {\n      serializeTransactionRequest('Update', updates, objectStack, request);\n    }\n    if (deletes) {\n      serializeTransactionRequest('Delete', deletes, objectStack, request);\n    }\n    if (options.nativeElements) {\n      serializeTransactionRequest(\n        'Native',\n        options.nativeElements,\n        objectStack,\n        request\n      );\n    }\n    return node;\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromDocument(doc) {\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readProjectionFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromNode(node) {\n    if (node.firstElementChild && node.firstElementChild.firstElementChild) {\n      node = node.firstElementChild.firstElementChild;\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n        if (\n          !(\n            n.childNodes.length === 0 ||\n            (n.childNodes.length === 1 && n.firstChild.nodeType === 3)\n          )\n        ) {\n          const objectStack = [{}];\n          this.gmlFormat_.readGeometryElement(n, objectStack);\n          return getProjection(objectStack.pop().srsName);\n        }\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {*} baseObj Base object.\n * @param {string} version Version.\n * @param {WriteTransactionOptions} options Options.\n * @return {Object} Request object.\n */\nfunction createTransactionRequest(node, baseObj, version, options) {\n  const featurePrefix = options.featurePrefix\n    ? options.featurePrefix\n    : FEATURE_PREFIX;\n  let gmlVersion;\n  if (version === '1.0.0') {\n    gmlVersion = 2;\n  } else if (version === '1.1.0') {\n    gmlVersion = 3;\n  } else if (version === '2.0.0') {\n    gmlVersion = 3.2;\n  }\n  const obj = assign(\n    {node},\n    {\n      version,\n      'featureNS': options.featureNS,\n      'featureType': options.featureType,\n      'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion,\n      'hasZ': options.hasZ,\n      'srsName': options.srsName,\n    },\n    baseObj\n  );\n  return obj;\n}\n\n/**\n * @param {string} type Request type.\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {Array<*>} objectStack Object stack.\n * @param {Element} request Transaction Request.\n */\nfunction serializeTransactionRequest(type, features, objectStack, request) {\n  pushSerializeAndPop(\n    request,\n    TRANSACTION_SERIALIZERS,\n    makeSimpleNodeFactory(type),\n    features,\n    objectStack\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Transaction Summary.\n */\nfunction readTransactionSummary(node, objectStack) {\n  return pushParseAndPop({}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst OGC_FID_PARSERS = {\n  'http://www.opengis.net/ogc': {\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\n      return node.getAttribute('fid');\n    }),\n  },\n  'http://www.opengis.net/ogc/1.1': {\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\n      return node.getAttribute('fid');\n    }),\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction fidParser(node, objectStack) {\n  parseNode(OGC_FID_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst INSERT_RESULTS_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'Feature': fidParser,\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Feature': fidParser,\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<string>|undefined} Insert results.\n */\nfunction readInsertResults(node, objectStack) {\n  return pushParseAndPop([], INSERT_RESULTS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFeature(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const gmlVersion = context['gmlVersion'];\n  const child = createElementNS(featureNS, featureType);\n  node.appendChild(child);\n  if (gmlVersion === 2) {\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\n  } else if (gmlVersion === 3) {\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\n  } else {\n    GML32.prototype.writeFeatureElement(child, feature, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {number|string} fid Feature identifier.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeOgcFidFilter(node, fid, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const ns = OGCNS[version];\n  const filter = createElementNS(ns, 'Filter');\n  const child = createElementNS(ns, 'FeatureId');\n  filter.appendChild(child);\n  child.setAttribute('fid', /** @type {string} */ (fid));\n  node.appendChild(filter);\n}\n\n/**\n * @param {string|undefined} featurePrefix The prefix of the feature.\n * @param {string} featureType The type of the feature.\n * @return {string} The value of the typeName property.\n */\nfunction getTypeName(featurePrefix, featureType) {\n  featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;\n  const prefix = featurePrefix + ':';\n  // The featureType already contains the prefix.\n  if (featureType.indexOf(prefix) === 0) {\n    return featureType;\n  } else {\n    return prefix + featureType;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDelete(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 26); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeUpdate(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 27); // Features must have an id set\n  const version = context['version'];\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  const geometryName = feature.getGeometryName();\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    const keys = feature.getKeys();\n    const values = [];\n    for (let i = 0, ii = keys.length; i < ii; i++) {\n      const value = feature.get(keys[i]);\n      if (value !== undefined) {\n        let name = keys[i];\n        if (\n          value &&\n          typeof (/** @type {?} */ (value).getSimplifiedGeometry) === 'function'\n        ) {\n          name = geometryName;\n        }\n        values.push({name: name, value: value});\n      }\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */ ({\n        version,\n        'gmlVersion': context['gmlVersion'],\n        node,\n        'hasZ': context['hasZ'],\n        'srsName': context['srsName'],\n      }),\n      TRANSACTION_SERIALIZERS,\n      makeSimpleNodeFactory('Property'),\n      values,\n      objectStack\n    );\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {Object} pair Property name and value.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeProperty(node, pair, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const ns = WFSNS[version];\n  const name = createElementNS(ns, 'Name');\n  const gmlVersion = context['gmlVersion'];\n  node.appendChild(name);\n  writeStringTextNode(name, pair.name);\n  if (pair.value !== undefined && pair.value !== null) {\n    const value = createElementNS(ns, 'Value');\n    node.appendChild(value);\n    if (\n      pair.value &&\n      typeof (/** @type {?} */ (pair.value).getSimplifiedGeometry) ===\n        'function'\n    ) {\n      if (gmlVersion === 2) {\n        GML2.prototype.writeGeometryElement(value, pair.value, objectStack);\n      } else if (gmlVersion === 3) {\n        GML3.prototype.writeGeometryElement(value, pair.value, objectStack);\n      } else {\n        GML32.prototype.writeGeometryElement(value, pair.value, objectStack);\n      }\n    } else {\n      writeStringTextNode(value, pair.value);\n    }\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNative(node, nativeElement, objectStack) {\n  if (nativeElement.vendorId) {\n    node.setAttribute('vendorId', nativeElement.vendorId);\n  }\n  if (nativeElement.safeToIgnore !== undefined) {\n    node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));\n  }\n  if (nativeElement.value !== undefined) {\n    writeStringTextNode(node, nativeElement.value);\n  }\n}\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst GETFEATURE_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Query': makeChildAppender(writeQuery),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Query': makeChildAppender(writeQuery),\n  },\n  'http://www.opengis.net/ogc': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeSpatialFilter),\n    'Intersects': makeChildAppender(writeSpatialFilter),\n    'Within': makeChildAppender(writeSpatialFilter),\n    'DWithin': makeChildAppender(writeDWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\n  },\n  'http://www.opengis.net/fes/2.0': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeSpatialFilter),\n    'Disjoint': makeChildAppender(writeSpatialFilter),\n    'Intersects': makeChildAppender(writeSpatialFilter),\n    'ResourceId': makeChildAppender(writeResourceIdFilter),\n    'Within': makeChildAppender(writeSpatialFilter),\n    'DWithin': makeChildAppender(writeDWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {string} featureType Feature type.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeQuery(node, featureType, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const version = context['version'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const propertyNames = context['propertyNames'];\n  const srsName = context['srsName'];\n  let typeName;\n  // If feature prefix is not defined, we must not use the default prefix.\n  if (featurePrefix) {\n    typeName = getTypeName(featurePrefix, featureType);\n  } else {\n    typeName = featureType;\n  }\n  let typeNameAttr;\n  if (version === '2.0.0') {\n    typeNameAttr = 'typeNames';\n  } else {\n    typeNameAttr = 'typeName';\n  }\n  node.setAttribute(typeNameAttr, typeName);\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (featureNS) {\n    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  }\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n    assign({}, context)\n  );\n  item.node = node;\n  pushSerializeAndPop(\n    item,\n    QUERY_SERIALIZERS,\n    makeSimpleNodeFactory('PropertyName'),\n    propertyNames,\n    objectStack\n  );\n  const filter = context['filter'];\n  if (filter) {\n    const child = createElementNS(getFilterNS(version), 'Filter');\n    node.appendChild(child);\n    writeFilterCondition(child, filter, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFilterCondition(node, filter, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  assign(item, {context});\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(filter.getTagName()),\n    [filter],\n    objectStack\n  );\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Bbox.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeBboxFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  parent['srsName'] = filter.srsName;\n  const format = GML_FORMATS[version];\n\n  writePropertyName(version, node, filter.geometryName);\n  format.prototype.writeGeometryElement(node, filter.extent, objectStack);\n}\n\n/**\n * @param {Element} node Element.\n * @param {import(\"./filter/ResourceId.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeResourceIdFilter(node, filter, objectStack) {\n  node.setAttribute('rid', /** @type {string} */ (filter.rid));\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Spatial.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeSpatialFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  parent['srsName'] = filter.srsName;\n  const format = GML_FORMATS[version];\n\n  writePropertyName(version, node, filter.geometryName);\n  format.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/DWithin.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDWithinFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  writeSpatialFilter(node, filter, objectStack);\n  const distance = createElementNS(getFilterNS(version), 'Distance');\n  writeStringTextNode(distance, filter.distance.toString());\n  if (version === '2.0.0') {\n    distance.setAttribute('uom', filter.unit);\n  } else {\n    distance.setAttribute('units', filter.unit);\n  }\n  node.appendChild(distance);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/During.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDuringFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n\n  writeExpression(FESNS[version], 'ValueReference', node, filter.propertyName);\n  const timePeriod = createElementNS(GMLNS, 'TimePeriod');\n\n  node.appendChild(timePeriod);\n\n  const begin = createElementNS(GMLNS, 'begin');\n  timePeriod.appendChild(begin);\n  writeTimeInstant(begin, filter.begin);\n\n  const end = createElementNS(GMLNS, 'end');\n  timePeriod.appendChild(end);\n  writeTimeInstant(end, filter.end);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/LogicalNary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeLogicalFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  assign(item, {context});\n  const conditions = filter.conditions;\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\n    const condition = conditions[i];\n    pushSerializeAndPop(\n      item,\n      GETFEATURE_SERIALIZERS,\n      makeSimpleNodeFactory(condition.getTagName()),\n      [condition],\n      objectStack\n    );\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Not.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNotFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  assign(item, {context});\n  const condition = filter.condition;\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(condition.getTagName()),\n    [condition],\n    objectStack\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/ComparisonBinary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeComparisonFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writePropertyName(version, node, filter.propertyName);\n  writeLiteral(version, node, '' + filter.expression);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsNull.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsNullFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  writePropertyName(version, node, filter.propertyName);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsBetween.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsBetweenFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  const ns = getFilterNS(version);\n\n  writePropertyName(version, node, filter.propertyName);\n\n  const lowerBoundary = createElementNS(ns, 'LowerBoundary');\n  node.appendChild(lowerBoundary);\n  writeLiteral(version, lowerBoundary, '' + filter.lowerBoundary);\n\n  const upperBoundary = createElementNS(ns, 'UpperBoundary');\n  node.appendChild(upperBoundary);\n  writeLiteral(version, upperBoundary, '' + filter.upperBoundary);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/IsLike.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsLikeFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  node.setAttribute('wildCard', filter.wildCard);\n  node.setAttribute('singleChar', filter.singleChar);\n  node.setAttribute('escapeChar', filter.escapeChar);\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writePropertyName(version, node, filter.propertyName);\n  writeLiteral(version, node, '' + filter.pattern);\n}\n\n/**\n * @param {string} ns Namespace.\n * @param {string} tagName Tag name.\n * @param {Node} node Node.\n * @param {string} value Value.\n */\nfunction writeExpression(ns, tagName, node, value) {\n  const property = createElementNS(ns, tagName);\n  writeStringTextNode(property, value);\n  node.appendChild(property);\n}\n\n/**\n * @param {string} version Version.\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writeLiteral(version, node, value) {\n  writeExpression(getFilterNS(version), 'Literal', node, value);\n}\n\n/**\n * @param {string} version Version.\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writePropertyName(version, node, value) {\n  if (version === '2.0.0') {\n    writeExpression(FESNS[version], 'ValueReference', node, value);\n  } else {\n    writeExpression(OGCNS[version], 'PropertyName', node, value);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {string} time PropertyName value.\n */\nfunction writeTimeInstant(node, time) {\n  const timeInstant = createElementNS(GMLNS, 'TimeInstant');\n  node.appendChild(timeInstant);\n\n  const timePosition = createElementNS(GMLNS, 'timePosition');\n  timeInstant.appendChild(timePosition);\n  writeStringTextNode(timePosition, time);\n}\n\n/**\n * Encode filter as WFS `Filter` and return the Node.\n *\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {string} opt_version WFS version. If not provided defaults to '1.1.0'\n * @return {Node} Result.\n * @api\n */\nexport function writeFilter(filter, opt_version) {\n  const version = opt_version || '1.1.0';\n  const child = createElementNS(getFilterNS(version), 'Filter');\n  const context = {\n    node: child,\n  };\n  assign(context, {\n    'version': version,\n    'filter': filter,\n  });\n  writeFilterCondition(child, filter, [context]);\n  return child;\n}\n\n/**\n * @param {Node} node Node.\n * @param {Array<string>} featureTypes Feature types.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeGetFeature(node, featureTypes, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n    assign({}, context)\n  );\n  item.node = node;\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory('Query'),\n    featureTypes,\n    objectStack\n  );\n}\n\nfunction getFilterNS(version) {\n  let ns;\n  if (version === '2.0.0') {\n    ns = FESNS[version];\n  } else {\n    ns = OGCNS[version];\n  }\n  return ns;\n}\n\nexport default WFS;\n","import Map from '../src/ol/Map.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {GeoJSON, WFS} from '../src/ol/format.js';\nimport {Stroke, Style} from '../src/ol/style.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {\n  and as andFilter,\n  equalTo as equalToFilter,\n  like as likeFilter,\n} from '../src/ol/format/filter.js';\n\nconst vectorSource = new VectorSource();\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: new Style({\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 255, 1.0)',\n      width: 2,\n    }),\n  }),\n});\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst raster = new TileLayer({\n  source: new XYZ({\n    attributions: attributions,\n    url: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=' + key,\n    maxZoom: 20,\n  }),\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [-8908887.277395891, 5381918.072437216],\n    maxZoom: 19,\n    zoom: 12,\n  }),\n});\n\n// generate a GetFeature request\nconst featureRequest = new WFS().writeGetFeature({\n  srsName: 'EPSG:3857',\n  featureNS: 'http://openstreemap.org',\n  featurePrefix: 'osm',\n  featureTypes: ['water_areas'],\n  outputFormat: 'application/json',\n  filter: andFilter(\n    likeFilter('name', 'Mississippi*'),\n    equalToFilter('waterway', 'riverbank')\n  ),\n});\n\n// then post the request and add the received features to a layer\nfetch('https://ahocevar.com/geoserver/wfs', {\n  method: 'POST',\n  body: new XMLSerializer().serializeToString(featureRequest),\n})\n  .then(function (response) {\n    return response.json();\n  })\n  .then(function (json) {\n    const features = new GeoJSON().readFeatures(json);\n    vectorSource.addFeatures(features);\n    map.getView().fit(vectorSource.getExtent());\n  });\n"],"sourceRoot":""}