{"version":3,"sources":["webpack:///../src/ol/source/UTFGrid.js","webpack:///./utfgrid.js"],"names":["CustomTile","tileCoord","state","src","extent","preemptive","jsonp","super","this","src_","extent_","preemptive_","grid_","keys_","data_","jsonp_","getImage","getData","coordinate","const","xRelative","yRelative","row","Math","floor","length","let","code","charCodeAt","data","id","forDataAtCoordinate","callback","opt_request","TileState","EventType","e","loadInternal_","setTimeout","bind","getKey","handleError_","changed","handleLoad_","json","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","event","status","response","JSON","parse","responseText","err","load","setState","options","projection","zDirection","undefined","tileUrlFunction_","template_","url","handleTileJSONResponse","handleTileJSONError","tileJSON","getTemplate","forDataAtCoordinateAndResolution","resolution","tileGrid","z","getZForResolution","getTileCoordForCoordAndZ","getTile","getProjection","epsg4326Projection","sourceProjection","transform","gridExtent","minZoom","maxZoom","grids","attributionExtent","setAttributions","frameState","x","y","pixelRatio","tileCoordKey","tileCache","containsKey","get","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","getTileCoordExtent","set","useTile","key","mapLayer","Tile","source","TileJSON","gridSource","gridLayer","view","View","center","zoom","mapElement","document","getElementById","map","Map","layers","target","infoElement","flagElement","nameElement","infoOverlay","Overlay","element","offset","stopEvent","addOverlay","displayCountryInfo","viewResolution","getResolution","style","cursor","innerHTML","setPosition","on","evt","dragging","getEventCoordinate","originalEvent"],"mappings":"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","file":"utfgrid.js","sourcesContent":["/**\n * @module ol/source/UTFGrid\n */\n\nimport EventType from '../events/EventType.js';\nimport SourceState from './State.js';\nimport Tile from '../Tile.js';\nimport TileSource from './Tile.js';\nimport TileState from '../TileState.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {assert} from '../asserts.js';\nimport {createFromTemplates, nullTileUrlFunction} from '../tileurlfunction.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport {listenOnce} from '../events.js';\nimport {jsonp as requestJSONP} from '../net.js';\n\n/**\n * @typedef {Object} UTFGridJSON\n * @property {Array<string>} grid The grid.\n * @property {Array<string>} keys The keys.\n * @property {Object<string, Object>} [data] Optional data.\n */\n\nexport class CustomTile extends Tile {\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n  constructor(tileCoord, state, src, extent, preemptive, jsonp) {\n    super(tileCoord, state);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ = preemptive;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.grid_ = null;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.keys_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n    this.data_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = jsonp;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n  getImage() {\n    return null;\n  }\n\n  /**\n   * Synchronously returns data at given coordinate (if available).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {*} The data.\n   */\n  getData(coordinate) {\n    if (!this.grid_ || !this.keys_) {\n      return null;\n    }\n    const xRelative =\n      (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);\n    const yRelative =\n      (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);\n\n    const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n\n    if (typeof row !== 'string') {\n      return null;\n    }\n\n    let code = row.charCodeAt(Math.floor(xRelative * row.length));\n    if (code >= 93) {\n      code--;\n    }\n    if (code >= 35) {\n      code--;\n    }\n    code -= 32;\n\n    let data = null;\n    if (code in this.keys_) {\n      const id = this.keys_[code];\n      if (this.data_ && id in this.data_) {\n        data = this.data_[id];\n      } else {\n        data = id;\n      }\n    }\n    return data;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate (or `null` if not yet loaded).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [opt_request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   */\n  forDataAtCoordinate(coordinate, callback, opt_request) {\n    if (this.state == TileState.EMPTY && opt_request === true) {\n      this.state = TileState.IDLE;\n      listenOnce(\n        this,\n        EventType.CHANGE,\n        function (e) {\n          callback(this.getData(coordinate));\n        },\n        this\n      );\n      this.loadInternal_();\n    } else {\n      if (opt_request === true) {\n        setTimeout(\n          function () {\n            callback(this.getData(coordinate));\n          }.bind(this),\n          0\n        );\n      } else {\n        callback(this.getData(coordinate));\n      }\n    }\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    return this.src_;\n  }\n\n  /**\n   * @private\n   */\n  handleError_() {\n    this.state = TileState.ERROR;\n    this.changed();\n  }\n\n  /**\n   * @param {!UTFGridJSON} json UTFGrid data.\n   * @private\n   */\n  handleLoad_(json) {\n    this.grid_ = json['grid'];\n    this.keys_ = json['keys'];\n    this.data_ = json['data'];\n\n    this.state = TileState.LOADED;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  loadInternal_() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      if (this.jsonp_) {\n        requestJSONP(\n          this.src_,\n          this.handleLoad_.bind(this),\n          this.handleError_.bind(this)\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', this.src_);\n        client.send();\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {!UTFGridJSON} */ (\n          JSON.parse(client.responseText)\n        );\n      } catch (err) {\n        this.handleError_();\n        return;\n      }\n      this.handleLoad_(response);\n    } else {\n      this.handleError_();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleError_();\n  }\n\n  /**\n   */\n  load() {\n    if (this.preemptive_) {\n      this.loadInternal_();\n    } else {\n      this.setState(TileState.EMPTY);\n    }\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false` (lazy loading), you need to pass `true` as\n * `opt_request` to the `forDataAtCoordinateAndResolution` method otherwise no\n * data will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\nclass UTFGrid extends TileSource {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super({\n      projection: getProjection('EPSG:3857'),\n      state: SourceState.LOADING,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ =\n      options.preemptive !== undefined ? options.preemptive : true;\n\n    /**\n     * @private\n     * @type {!import(\"../Tile.js\").UrlFunction}\n     */\n    this.tileUrlFunction_ = nullTileUrlFunction;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.template_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = options.jsonp || false;\n\n    if (options.url) {\n      if (this.jsonp_) {\n        requestJSONP(\n          options.url,\n          this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this)\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {import(\"./TileJSON.js\").Config} */ (\n          JSON.parse(client.responseText)\n        );\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * Return the template from TileJSON.\n   * @return {string|undefined} The template from TileJSON.\n   * @api\n   */\n  getTemplate() {\n    return this.template_;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate and resolution (or `null` if not yet loaded or\n   * in case of an error).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [opt_request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @api\n   */\n  forDataAtCoordinateAndResolution(\n    coordinate,\n    resolution,\n    callback,\n    opt_request\n  ) {\n    if (this.tileGrid) {\n      const z = this.tileGrid.getZForResolution(resolution, this.zDirection);\n      const tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = /** @type {!CustomTile} */ (\n        this.getTile(\n          tileCoord[0],\n          tileCoord[1],\n          tileCoord[2],\n          1,\n          this.getProjection()\n        )\n      );\n      tile.forDataAtCoordinate(coordinate, callback, opt_request);\n    } else {\n      if (opt_request === true) {\n        setTimeout(function () {\n          callback(null);\n        }, 0);\n      } else {\n        callback(null);\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState(SourceState.ERROR);\n  }\n\n  /**\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n   * @protected\n   * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection,\n        sourceProjection\n      );\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const gridExtent = extentFromProjection(sourceProjection);\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n    });\n    this.tileGrid = tileGrid;\n\n    this.template_ = tileJSON['template'];\n\n    const grids = tileJSON['grids'];\n    if (!grids) {\n      this.setState(SourceState.ERROR);\n      return;\n    }\n\n    this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\n\n    if (tileJSON['attribution'] !== undefined) {\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n\n    this.setState(SourceState.READY);\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!CustomTile} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    } else {\n      const tileCoord = [z, x, y];\n      const urlTileCoord = this.getTileCoordForTileUrlFunction(\n        tileCoord,\n        projection\n      );\n      const tileUrl = this.tileUrlFunction_(\n        urlTileCoord,\n        pixelRatio,\n        projection\n      );\n      const tile = new CustomTile(\n        tileCoord,\n        tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n        tileUrl !== undefined ? tileUrl : '',\n        this.tileGrid.getTileCoordExtent(tileCoord),\n        this.preemptive_,\n        this.jsonp_\n      );\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\nexport default UTFGrid;\n","import Map from '../src/ol/Map.js';\nimport Overlay from '../src/ol/Overlay.js';\nimport TileJSON from '../src/ol/source/TileJSON.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport UTFGrid from '../src/ol/source/UTFGrid.js';\nimport View from '../src/ol/View.js';\n\nconst key =\n  'pk.eyJ1IjoiYWhvY2V2YXIiLCJhIjoiY2pzbmg0Nmk5MGF5NzQzbzRnbDNoeHJrbiJ9.7_-_gL8ur7ZtEiNwRfCy7Q';\n\nconst mapLayer = new TileLayer({\n  source: new TileJSON({\n    url:\n      'https://api.tiles.mapbox.com/v4/mapbox.geography-class.json?secure&access_token=' +\n      key,\n  }),\n});\n\nconst gridSource = new UTFGrid({\n  url:\n    'https://api.tiles.mapbox.com/v4/mapbox.geography-class.json?secure&access_token=' +\n    key,\n});\n\nconst gridLayer = new TileLayer({source: gridSource});\n\nconst view = new View({\n  center: [0, 0],\n  zoom: 1,\n});\n\nconst mapElement = document.getElementById('map');\nconst map = new Map({\n  layers: [mapLayer, gridLayer],\n  target: mapElement,\n  view: view,\n});\n\nconst infoElement = document.getElementById('country-info');\nconst flagElement = document.getElementById('country-flag');\nconst nameElement = document.getElementById('country-name');\n\nconst infoOverlay = new Overlay({\n  element: infoElement,\n  offset: [15, 15],\n  stopEvent: false,\n});\nmap.addOverlay(infoOverlay);\n\nconst displayCountryInfo = function (coordinate) {\n  const viewResolution = /** @type {number} */ (view.getResolution());\n  gridSource.forDataAtCoordinateAndResolution(\n    coordinate,\n    viewResolution,\n    function (data) {\n      // If you want to use the template from the TileJSON,\n      //  load the mustache.js library separately and call\n      //  info.innerHTML = Mustache.render(gridSource.getTemplate(), data);\n      mapElement.style.cursor = data ? 'pointer' : '';\n      if (data) {\n        flagElement.src = 'data:image/png;base64,' + data['flag_png'];\n        nameElement.innerHTML = data['admin'];\n      }\n      infoOverlay.setPosition(data ? coordinate : undefined);\n    }\n  );\n};\n\nmap.on('pointermove', function (evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\n  displayCountryInfo(coordinate);\n});\n\nmap.on('click', function (evt) {\n  displayCountryInfo(evt.coordinate);\n});\n"],"sourceRoot":""}