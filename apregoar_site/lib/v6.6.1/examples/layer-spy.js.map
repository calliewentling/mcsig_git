{"version":3,"sources":["webpack:///./layer-spy.js"],"names":["key","attributions","roads","source","url","tileSize","maxZoom","imagery","container","document","getElementById","map","layers","target","view","center","zoom","radius","addEventListener","evt","which","Math","min","render","preventDefault","max","let","mousePosition","event","getEventPixel","on","const","ctx","context","save","beginPath","pixel","offset","canvasRadius","sqrt","pow","arc","PI","lineWidth","strokeStyle","stroke","clip","restore"],"mappings":"yJAOMA,EAAM,oCACNC,EACJ,4LAGIC,EAAQ,IAAI,IAAU,CAC1BC,OAAQ,IAAI,IAAI,CACdF,aAAcA,EACdG,IAAK,6DAA+DJ,EACpEK,SAAU,IACVC,QAAS,OAIPC,EAAU,IAAI,IAAU,CAC5BJ,OAAQ,IAAI,IAAI,CACdF,aAAcA,EACdG,IAAK,gEAAkEJ,EACvEM,QAAS,OAIPE,EAAYC,SAASC,eAAe,OAEpCC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACV,EAAOK,GAChBM,OAAQL,EACRM,KAAM,IAAI,KAAK,CACbC,QAAQ,QAAW,EAAE,IAAK,OAC1BC,KAAM,MAINC,EAAS,GACbR,SAASS,iBAAiB,WAAW,SAAUC,GAC3B,KAAdA,EAAIC,OACNH,EAASI,KAAKC,IAAIL,EAAS,EAAG,KAC9BN,EAAIY,SACJJ,EAAIK,kBACmB,KAAdL,EAAIC,QACbH,EAASI,KAAKI,IAAIR,EAAS,EAAG,IAC9BN,EAAIY,SACJJ,EAAIK,qBAKRE,IAAIC,EAAgB,KAEpBnB,EAAUU,iBAAiB,aAAa,SAAUU,GAChDD,EAAgBhB,EAAIkB,cAAcD,GAClCjB,EAAIY,YAGNf,EAAUU,iBAAiB,YAAY,WACrCS,EAAgB,KAChBhB,EAAIY,YAINhB,EAAQuB,GAAG,aAAa,SAAUF,GAChCG,IAAMC,EAAMJ,EAAMK,QAGlB,GAFAD,EAAIE,OACJF,EAAIG,YACAR,EAAe,CAEjBI,IAAMK,GAAQ,QAAeR,EAAOD,GAC9BU,GAAS,QAAeT,EAAO,CACnCD,EAAc,GAAKV,EACnBU,EAAc,KAEVW,EAAejB,KAAKkB,KACxBlB,KAAKmB,IAAIH,EAAO,GAAKD,EAAM,GAAI,GAAKf,KAAKmB,IAAIH,EAAO,GAAKD,EAAM,GAAI,IAErEJ,EAAIS,IAAIL,EAAM,GAAIA,EAAM,GAAIE,EAAc,EAAG,EAAIjB,KAAKqB,IACtDV,EAAIW,UAAa,EAAIL,EAAgBrB,EACrCe,EAAIY,YAAc,kBAClBZ,EAAIa,SAENb,EAAIc,UAINvC,EAAQuB,GAAG,cAAc,SAAUF,GACrBA,EAAMK,QACdc,e","file":"layer-spy.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport {getRenderPixel} from '../src/ol/render.js';\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst roads = new TileLayer({\n  source: new XYZ({\n    attributions: attributions,\n    url: 'https://api.maptiler.com/maps/streets/{z}/{x}/{y}.png?key=' + key,\n    tileSize: 512,\n    maxZoom: 22,\n  }),\n});\n\nconst imagery = new TileLayer({\n  source: new XYZ({\n    attributions: attributions,\n    url: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=' + key,\n    maxZoom: 20,\n  }),\n});\n\nconst container = document.getElementById('map');\n\nconst map = new Map({\n  layers: [roads, imagery],\n  target: container,\n  view: new View({\n    center: fromLonLat([-109, 46.5]),\n    zoom: 6,\n  }),\n});\n\nlet radius = 75;\ndocument.addEventListener('keydown', function (evt) {\n  if (evt.which === 38) {\n    radius = Math.min(radius + 5, 150);\n    map.render();\n    evt.preventDefault();\n  } else if (evt.which === 40) {\n    radius = Math.max(radius - 5, 25);\n    map.render();\n    evt.preventDefault();\n  }\n});\n\n// get the pixel position with every move\nlet mousePosition = null;\n\ncontainer.addEventListener('mousemove', function (event) {\n  mousePosition = map.getEventPixel(event);\n  map.render();\n});\n\ncontainer.addEventListener('mouseout', function () {\n  mousePosition = null;\n  map.render();\n});\n\n// before rendering the layer, do some clipping\nimagery.on('prerender', function (event) {\n  const ctx = event.context;\n  ctx.save();\n  ctx.beginPath();\n  if (mousePosition) {\n    // only show a circle around the mouse\n    const pixel = getRenderPixel(event, mousePosition);\n    const offset = getRenderPixel(event, [\n      mousePosition[0] + radius,\n      mousePosition[1],\n    ]);\n    const canvasRadius = Math.sqrt(\n      Math.pow(offset[0] - pixel[0], 2) + Math.pow(offset[1] - pixel[1], 2)\n    );\n    ctx.arc(pixel[0], pixel[1], canvasRadius, 0, 2 * Math.PI);\n    ctx.lineWidth = (5 * canvasRadius) / radius;\n    ctx.strokeStyle = 'rgba(0,0,0,0.5)';\n    ctx.stroke();\n  }\n  ctx.clip();\n});\n\n// after rendering the layer, restore the canvas context\nimagery.on('postrender', function (event) {\n  const ctx = event.context;\n  ctx.restore();\n});\n"],"sourceRoot":""}