{"version":3,"sources":["webpack:///../src/ol/layer/Heatmap.js","webpack:///./heatmap-earthquakes.js"],"names":["Property","DEFAULT_GRADIENT","opt_options","const","options","baseOptions","gradient","radius","blur","weight","super","this","gradient_","addChangeListener","handleGradientChanged_","setGradient","setBlur","undefined","setRadius","weightFunction_","feature","get","setRenderOrder","getBlur","getGradient","getRadius","colors","width","height","context","createLinearGradient","step","length","i","ii","addColorStop","fillStyle","fillRect","canvas","createGradient","set","createRenderer","className","getClassName","attributes","name","callback","bind","vertexShader","fragmentShader","hitVertexShader","hitFragmentShader","uniforms","u_size","u_blurSlope","Math","max","postProcesses","u_gradientTexture","renderDeclutter","document","getElementById","vector","source","Vector","url","format","KML","extractStyles","parseInt","value","parseFloat","substr","raster","Tile","Stamen","layer","Map","layers","target","view","View","center","zoom","blurHandler","addEventListener","radiusHandler"],"mappings":"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","file":"heatmap-earthquakes.js","sourcesContent":["/**\n * @module ol/layer/Heatmap\n */\nimport VectorLayer from './Vector.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport {assign} from '../obj.js';\nimport {clamp} from '../math.js';\nimport {createCanvasContext2D} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {import(\"../source/Vector.js\").default} [source] Source.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  BLUR: 'blur',\n  GRADIENT: 'gradient',\n  RADIUS: 'radius',\n};\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @extends {VectorLayer<import(\"../source/Vector.js\").default>}\n * @api\n */\nclass Heatmap extends VectorLayer {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const baseOptions = assign({}, options);\n\n    delete baseOptions.gradient;\n    delete baseOptions.radius;\n    delete baseOptions.blur;\n    delete baseOptions.weight;\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.gradient_ = null;\n\n    this.addChangeListener(Property.GRADIENT, this.handleGradientChanged_);\n\n    this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n\n    this.setBlur(options.blur !== undefined ? options.blur : 15);\n\n    this.setRadius(options.radius !== undefined ? options.radius : 8);\n\n    const weight = options.weight ? options.weight : 'weight';\n    if (typeof weight === 'string') {\n      this.weightFunction_ = function (feature) {\n        return feature.get(weight);\n      };\n    } else {\n      this.weightFunction_ = weight;\n    }\n\n    // For performance reasons, don't sort the features before rendering.\n    // The render order is not relevant for a heatmap representation.\n    this.setRenderOrder(null);\n  }\n\n  /**\n   * Return the blur size in pixels.\n   * @return {number} Blur size in pixels.\n   * @api\n   * @observable\n   */\n  getBlur() {\n    return /** @type {number} */ (this.get(Property.BLUR));\n  }\n\n  /**\n   * Return the gradient colors as array of strings.\n   * @return {Array<string>} Colors.\n   * @api\n   * @observable\n   */\n  getGradient() {\n    return /** @type {Array<string>} */ (this.get(Property.GRADIENT));\n  }\n\n  /**\n   * Return the size of the radius in pixels.\n   * @return {number} Radius size in pixel.\n   * @api\n   * @observable\n   */\n  getRadius() {\n    return /** @type {number} */ (this.get(Property.RADIUS));\n  }\n\n  /**\n   * @private\n   */\n  handleGradientChanged_() {\n    this.gradient_ = createGradient(this.getGradient());\n  }\n\n  /**\n   * Set the blur size in pixels.\n   * @param {number} blur Blur size in pixels.\n   * @api\n   * @observable\n   */\n  setBlur(blur) {\n    this.set(Property.BLUR, blur);\n  }\n\n  /**\n   * Set the gradient colors as array of strings.\n   * @param {Array<string>} colors Gradient.\n   * @api\n   * @observable\n   */\n  setGradient(colors) {\n    this.set(Property.GRADIENT, colors);\n  }\n\n  /**\n   * Set the size of the radius in pixels.\n   * @param {number} radius Radius size in pixel.\n   * @api\n   * @observable\n   */\n  setRadius(radius) {\n    this.set(Property.RADIUS, radius);\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {WebGLPointsLayerRenderer} A layer renderer.\n   */\n  createRenderer() {\n    return new WebGLPointsLayerRenderer(this, {\n      className: this.getClassName(),\n      attributes: [\n        {\n          name: 'weight',\n          callback: function (feature) {\n            const weight = this.weightFunction_(feature);\n            return weight !== undefined ? clamp(weight, 0, 1) : 1;\n          }.bind(this),\n        },\n      ],\n      vertexShader: `\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_weight = a_weight;\n        }`,\n      fragmentShader: `\n        precision mediump float;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          gl_FragColor = vec4(alpha, alpha, alpha, alpha);\n        }`,\n      hitVertexShader: `\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n        attribute vec4 a_hitColor;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_hitColor = a_hitColor;\n          v_weight = a_weight;\n        }`,\n      hitFragmentShader: `\n        precision mediump float;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          if (alpha < 0.05) {\n            discard;\n          }\n\n          gl_FragColor = v_hitColor;\n        }`,\n      uniforms: {\n        u_size: function () {\n          return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;\n        }.bind(this),\n        u_blurSlope: function () {\n          return (\n            this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR))\n          );\n        }.bind(this),\n      },\n      postProcesses: [\n        {\n          fragmentShader: `\n            precision mediump float;\n\n            uniform sampler2D u_image;\n            uniform sampler2D u_gradientTexture;\n\n            varying vec2 v_texCoord;\n\n            void main() {\n              vec4 color = texture2D(u_image, v_texCoord);\n              gl_FragColor.a = color.a;\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\n              gl_FragColor.rgb *= gl_FragColor.a;\n            }`,\n          uniforms: {\n            u_gradientTexture: function () {\n              return this.gradient_;\n            }.bind(this),\n          },\n        },\n      ],\n    });\n  }\n\n  renderDeclutter() {}\n}\n\n/**\n * @param {Array<string>} colors A list of colored.\n * @return {HTMLCanvasElement} canvas with gradient texture.\n */\nfunction createGradient(colors) {\n  const width = 1;\n  const height = 256;\n  const context = createCanvasContext2D(width, height);\n\n  const gradient = context.createLinearGradient(0, 0, width, height);\n  const step = 1 / (colors.length - 1);\n  for (let i = 0, ii = colors.length; i < ii; ++i) {\n    gradient.addColorStop(i * step, colors[i]);\n  }\n\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, width, height);\n\n  return context.canvas;\n}\n\nexport default Heatmap;\n","import KML from '../src/ol/format/KML.js';\nimport Map from '../src/ol/Map.js';\nimport Stamen from '../src/ol/source/Stamen.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport {Heatmap as HeatmapLayer, Tile as TileLayer} from '../src/ol/layer.js';\n\nconst blur = document.getElementById('blur');\nconst radius = document.getElementById('radius');\n\nconst vector = new HeatmapLayer({\n  source: new VectorSource({\n    url: 'data/kml/2012_Earthquakes_Mag5.kml',\n    format: new KML({\n      extractStyles: false,\n    }),\n  }),\n  blur: parseInt(blur.value, 10),\n  radius: parseInt(radius.value, 10),\n  weight: function (feature) {\n    // 2012_Earthquakes_Mag5.kml stores the magnitude of each earthquake in a\n    // standards-violating <magnitude> tag in each Placemark.  We extract it from\n    // the Placemark's name instead.\n    const name = feature.get('name');\n    const magnitude = parseFloat(name.substr(2));\n    return magnitude - 5;\n  },\n});\n\nconst raster = new TileLayer({\n  source: new Stamen({\n    layer: 'toner',\n  }),\n});\n\nnew Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\nconst blurHandler = function () {\n  vector.setBlur(parseInt(blur.value, 10));\n};\nblur.addEventListener('input', blurHandler);\nblur.addEventListener('change', blurHandler);\n\nconst radiusHandler = function () {\n  vector.setRadius(parseInt(radius.value, 10));\n};\nradius.addEventListener('input', radiusHandler);\nradius.addEventListener('change', radiusHandler);\n"],"sourceRoot":""}