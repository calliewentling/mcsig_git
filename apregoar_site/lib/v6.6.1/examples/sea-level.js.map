{"version":3,"sources":["webpack:///./sea-level.js"],"names":["const","key","elevation","source","url","maxZoom","crossOrigin","on","evt","context","imageSmoothingEnabled","msImageSmoothingEnabled","raster","sources","operation","pixels","data","pixel","level","map","target","layers","attributions","tileSize","opacity","view","center","zoom","control","document","getElementById","output","addEventListener","innerText","value","changed","event","locations","getElementsByClassName","i","ii","length","relocate","dataset","getView","setCenter","split","Number","setZoom"],"mappings":"mKAuBAA,IAAMC,EAAM,oCAKNC,EAAY,IAAI,IAAU,CAC9BC,OAAQ,IAAI,IAAI,CACdC,IACE,kEAAoEH,EACtEI,QAAS,GACTC,YAAa,OAGjBJ,EAAUK,GAAG,aAAa,SAAUC,GAClCA,EAAIC,QAAQC,uBAAwB,EACpCF,EAAIC,QAAQE,yBAA0B,KAGxCX,IAAMY,EAAS,IAAI,KAAa,CAC9BC,QAAS,CAACX,GACVY,UArCF,SAAeC,EAAQC,GACrBhB,IAAMiB,EAAQF,EAAO,GAarB,OAZIE,EAAM,KAEwD,IAAzC,IAAXA,EAAM,GAAW,IAAiB,IAAXA,EAAM,GAAWA,EAAM,IAAvD,KACWD,EAAKE,OACjBD,EAAM,GAAK,IACXA,EAAM,GAAK,IACXA,EAAM,GAAK,IACXA,EAAM,GAAK,KAEXA,EAAM,GAAK,GAGRA,KA0BHE,EAAM,IAAI,IAAI,CAClBC,OAAQ,MACRC,OAAQ,CACN,IAAI,IAAU,CACZlB,OAAQ,IAAI,IAAI,CACdmB,aA1BN,4LA2BMlB,IAAK,6DAA+DH,EACpEsB,SAAU,QAGd,IAAI,IAAW,CACbC,QAAS,GACTrB,OAAQS,KAGZa,KAAM,IAAI,KAAK,CACbC,QAAQ,QAAW,EAAE,SAAU,UAC/BC,KAAM,OAIJC,EAAUC,SAASC,eAAe,SAClCC,EAASF,SAASC,eAAe,UACvCF,EAAQI,iBAAiB,SAAS,WAChCD,EAAOE,UAAYL,EAAQM,MAC3BtB,EAAOuB,aAETJ,EAAOE,UAAYL,EAAQM,MAE3BtB,EAAOL,GAAG,oBAAoB,SAAU6B,GACtCA,EAAMpB,KAAKE,MAAQU,EAAQM,SAI7B,IADAlC,IAAMqC,EAAYR,SAASS,uBAAuB,YACzCC,EAAI,EAAGC,EAAKH,EAAUI,OAAQF,EAAIC,IAAMD,EAC/CF,EAAUE,GAAGP,iBAAiB,QAASU,GAGzC,SAASA,EAASN,GAChBpC,IAAMgB,EAAOoB,EAAMhB,OAAOuB,QACpBlB,EAAON,EAAIyB,UACjBnB,EAAKoB,WAAU,QAAW7B,EAAKU,OAAOoB,MAAM,KAAK3B,IAAI4B,UACrDtB,EAAKuB,QAAQD,OAAO/B,EAAKW,U","file":"sea-level.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Image as ImageLayer, Tile as TileLayer} from '../src/ol/layer.js';\nimport {Raster as RasterSource, XYZ} from '../src/ol/source.js';\nimport {fromLonLat} from '../src/ol/proj.js';\n\nfunction flood(pixels, data) {\n  const pixel = pixels[0];\n  if (pixel[3]) {\n    const height =\n      -10000 + (pixel[0] * 256 * 256 + pixel[1] * 256 + pixel[2]) * 0.1;\n    if (height <= data.level) {\n      pixel[0] = 134;\n      pixel[1] = 203;\n      pixel[2] = 249;\n      pixel[3] = 255;\n    } else {\n      pixel[3] = 0;\n    }\n  }\n  return pixel;\n}\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst elevation = new TileLayer({\n  source: new XYZ({\n    url:\n      'https://api.maptiler.com/tiles/terrain-rgb/{z}/{x}/{y}.png?key=' + key,\n    maxZoom: 10,\n    crossOrigin: '',\n  }),\n});\nelevation.on('prerender', function (evt) {\n  evt.context.imageSmoothingEnabled = false;\n  evt.context.msImageSmoothingEnabled = false;\n});\n\nconst raster = new RasterSource({\n  sources: [elevation],\n  operation: flood,\n});\n\nconst map = new Map({\n  target: 'map',\n  layers: [\n    new TileLayer({\n      source: new XYZ({\n        attributions: attributions,\n        url: 'https://api.maptiler.com/maps/streets/{z}/{x}/{y}.png?key=' + key,\n        tileSize: 512,\n      }),\n    }),\n    new ImageLayer({\n      opacity: 0.6,\n      source: raster,\n    }),\n  ],\n  view: new View({\n    center: fromLonLat([-122.3267, 37.8377]),\n    zoom: 11,\n  }),\n});\n\nconst control = document.getElementById('level');\nconst output = document.getElementById('output');\ncontrol.addEventListener('input', function () {\n  output.innerText = control.value;\n  raster.changed();\n});\noutput.innerText = control.value;\n\nraster.on('beforeoperations', function (event) {\n  event.data.level = control.value;\n});\n\nconst locations = document.getElementsByClassName('location');\nfor (let i = 0, ii = locations.length; i < ii; ++i) {\n  locations[i].addEventListener('click', relocate);\n}\n\nfunction relocate(event) {\n  const data = event.target.dataset;\n  const view = map.getView();\n  view.setCenter(fromLonLat(data.center.split(',').map(Number)));\n  view.setZoom(Number(data.zoom));\n}\n"],"sourceRoot":""}