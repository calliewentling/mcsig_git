{"version":3,"sources":["webpack:///./layer-clipping-vector.js"],"names":["background","className","source","layer","base","clipLayer","style","url","format","getSource","on","setExtent","getExtent","const","fill","color","e","vectorContext","context","globalCompositeOperation","forEachFeature","feature","drawFeature","layers","target","view","center","zoom"],"mappings":"oNAUMA,EAAa,IAAI,IAAU,CAC/BC,UAAW,SACXC,OAAQ,IAAI,IAAO,CACjBC,MAAO,YAILC,EAAO,IAAI,IAAU,CACzBF,OAAQ,IAAI,MAGRG,EAAY,IAAI,IAAY,CAChCC,MAAO,KACPJ,OAAQ,IAAI,IAAa,CACvBK,IAAK,qCACLC,OAAQ,IAAI,QAKhBH,EAAUI,YAAYC,GAAG,cAAc,WACrCN,EAAKO,UAAUN,EAAUI,YAAYG,gBAGvCC,IAAMP,EAAQ,IAAI,KAAM,CACtBQ,KAAM,IAAI,IAAK,CACbC,MAAO,YAIXX,EAAKM,GAAG,cAAc,SAAUM,GAC9BH,IAAMI,GAAgB,QAAiBD,GACvCA,EAAEE,QAAQC,yBAA2B,iBACrCd,EAAUI,YAAYW,gBAAe,SAAUC,GAC7CJ,EAAcK,YAAYD,EAASf,MAErCU,EAAEE,QAAQC,yBAA2B,iBAG3B,IAAI,IAAI,CAClBI,OAAQ,CAACvB,EAAYI,EAAMC,GAC3BmB,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,QAAQ,QAAW,CAAC,KAAM,QAC1BC,KAAM,Q","file":"layer-clipping-vector.js","sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Fill, Style} from '../src/ol/style.js';\nimport {OSM, Stamen, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport {getVectorContext} from '../src/ol/render.js';\n\n//A distinct className is required to use another canvas for the background\nconst background = new TileLayer({\n  className: 'stamen',\n  source: new Stamen({\n    layer: 'toner',\n  }),\n});\n\nconst base = new TileLayer({\n  source: new OSM(),\n});\n\nconst clipLayer = new VectorLayer({\n  style: null,\n  source: new VectorSource({\n    url: './data/geojson/switzerland.geojson',\n    format: new GeoJSON(),\n  }),\n});\n\n//Giving the clipped layer an extent is necessary to avoid rendering when the feature is outside the viewport\nclipLayer.getSource().on('addfeature', function () {\n  base.setExtent(clipLayer.getSource().getExtent());\n});\n\nconst style = new Style({\n  fill: new Fill({\n    color: 'black',\n  }),\n});\n\nbase.on('postrender', function (e) {\n  const vectorContext = getVectorContext(e);\n  e.context.globalCompositeOperation = 'destination-in';\n  clipLayer.getSource().forEachFeature(function (feature) {\n    vectorContext.drawFeature(feature, style);\n  });\n  e.context.globalCompositeOperation = 'source-over';\n});\n\nconst map = new Map({\n  layers: [background, base, clipLayer],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([8.23, 46.86]),\n    zoom: 7,\n  }),\n});\n"],"sourceRoot":""}