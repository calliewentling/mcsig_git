{"version":3,"sources":["webpack:///./filter-points-webgl.js"],"names":["vectorSource","attributions","animRatio","style","variables","minYear","maxYear","filter","symbol","symbolType","size","color","opacity","minYearInput","document","getElementById","maxYearInput","updateMinYear","parseInt","value","updateStatusText","updateMaxYear","const","div","querySelector","textContent","addEventListener","client","XMLHttpRequest","open","onload","curIndex","csv","responseText","features","prevIndex","indexOf","line","substr","split","coords","parseFloat","isNaN","push","mass","year","geometry","addFeatures","send","map","layers","source","layer","disableHitDetection","target","view","center","zoom","animate","render","window","requestAnimationFrame"],"mappings":"uLAUMA,EAAe,IAAI,IAAO,CAC9BC,aAAc,SAMVC,EAAY,CAChB,IACA,CACE,IACA,CACE,IACA,CACE,IACA,CAAC,QACD,CAAC,cAAe,CAAC,UAAW,CAAC,MAAO,QAAS,KAAM,EAAG,KAV/C,aAgBb,IAGIC,EAAQ,CACZC,UAAW,CACTC,QAAS,KACTC,QAAS,MAEXC,OAAQ,CAAC,UAAW,CAAC,MAAO,QAAS,CAAC,MAAO,WAAY,CAAC,MAAO,YACjEC,OAAQ,CACNC,WAAY,SACZC,KAAM,CACJ,IACA,CAAC,cAAe,CAAC,UAAW,CAAC,MAAO,QAAS,EAAG,EAAG,IAAQ,IAC3D,CAAC,IAAK,KAAM,CAAC,IAAKR,EAAW,OAE/BS,MAAO,CAAC,cAAe,CAAC,UAAWT,EAAW,EAjCjC,UAiC8C,EAlC9C,wBAmCbU,QAAS,CAAC,IAAK,EAAK,CAAC,IAAKV,EAAW,QAKnCW,EAAeC,SAASC,eAAe,YACvCC,EAAeF,SAASC,eAAe,YAE7C,SAASE,IACPd,EAAMC,UAAUC,QAAUa,SAASL,EAAaM,OAChDC,IAEF,SAASC,IACPlB,EAAMC,UAAUE,QAAUY,SAASF,EAAaG,OAChDC,IAEF,SAASA,IACPE,IAAMC,EAAMT,SAASC,eAAe,UACpCQ,EAAIC,cAAc,iBAAiBC,YAAcZ,EAAaM,MAC9DI,EAAIC,cAAc,iBAAiBC,YAAcT,EAAaG,MAGhEN,EAAaa,iBAAiB,QAAST,GACvCJ,EAAaa,iBAAiB,SAAUT,GACxCD,EAAaU,iBAAiB,QAASL,GACvCL,EAAaU,iBAAiB,SAAUL,GACxCD,IAGAE,IAAMK,EAAS,IAAIC,eACnBD,EAAOE,KAAK,MAAO,mCACnBF,EAAOG,OAAS,WAOd,IANAR,IAKIS,EALEC,EAAML,EAAOM,aACbC,EAAW,GAEbC,EAAYH,EAAII,QAAQ,MAAQ,GAGiB,IAA7CL,EAAWC,EAAII,QAAQ,KAAMD,KAAmB,CACtDb,IAAMe,EAAOL,EAAIM,OAAOH,EAAWJ,EAAWI,GAAWI,MAAM,KAC/DJ,EAAYJ,EAAW,EAEvBT,IAAMkB,GAAS,QAAW,CAACC,WAAWJ,EAAK,IAAKI,WAAWJ,EAAK,MAC5DK,MAAMF,EAAO,KAAOE,MAAMF,EAAO,KAKrCN,EAASS,KACP,IAAI,IAAQ,CACVC,KAAMH,WAAWJ,EAAK,KAAO,EAC7BQ,KAAM3B,SAASmB,EAAK,KAAO,EAC3BS,SAAU,IAAI,IAAMN,MAK1BxC,EAAa+C,YAAYb,IAE3BP,EAAOqB,OAEP1B,IAAM2B,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,IAAO,CACjBC,MAAO,YAGX,IAAI,IAAiB,CACnBjD,MAAOA,EACPgD,OAAQnD,EACRqD,qBAAqB,KAGzBC,OAAQxC,SAASC,eAAe,OAChCwC,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,OAKV,SAASC,IACPT,EAAIU,SACJC,OAAOC,sBAAsBH,GAE/BA,K","file":"filter-points-webgl.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport Point from '../src/ol/geom/Point.js';\nimport Stamen from '../src/ol/source/Stamen.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport WebGLPointsLayer from '../src/ol/layer/WebGLPoints.js';\nimport {Vector} from '../src/ol/source.js';\nimport {fromLonLat} from '../src/ol/proj.js';\n\nconst vectorSource = new Vector({\n  attributions: 'NASA',\n});\n\nconst oldColor = 'rgba(242,56,22,0.61)';\nconst newColor = '#ffe52c';\nconst period = 12; // animation period in seconds\nconst animRatio = [\n  '^',\n  [\n    '/',\n    [\n      '%',\n      [\n        '+',\n        ['time'],\n        ['interpolate', ['linear'], ['get', 'year'], 1850, 0, 2015, period],\n      ],\n      period,\n    ],\n    period,\n  ],\n  0.5,\n];\n\nconst style = {\n  variables: {\n    minYear: 1850,\n    maxYear: 2015,\n  },\n  filter: ['between', ['get', 'year'], ['var', 'minYear'], ['var', 'maxYear']],\n  symbol: {\n    symbolType: 'circle',\n    size: [\n      '*',\n      ['interpolate', ['linear'], ['get', 'mass'], 0, 8, 200000, 26],\n      ['-', 1.75, ['*', animRatio, 0.75]],\n    ],\n    color: ['interpolate', ['linear'], animRatio, 0, newColor, 1, oldColor],\n    opacity: ['-', 1.0, ['*', animRatio, 0.75]],\n  },\n};\n\n// handle input values & events\nconst minYearInput = document.getElementById('min-year');\nconst maxYearInput = document.getElementById('max-year');\n\nfunction updateMinYear() {\n  style.variables.minYear = parseInt(minYearInput.value);\n  updateStatusText();\n}\nfunction updateMaxYear() {\n  style.variables.maxYear = parseInt(maxYearInput.value);\n  updateStatusText();\n}\nfunction updateStatusText() {\n  const div = document.getElementById('status');\n  div.querySelector('span.min-year').textContent = minYearInput.value;\n  div.querySelector('span.max-year').textContent = maxYearInput.value;\n}\n\nminYearInput.addEventListener('input', updateMinYear);\nminYearInput.addEventListener('change', updateMinYear);\nmaxYearInput.addEventListener('input', updateMaxYear);\nmaxYearInput.addEventListener('change', updateMaxYear);\nupdateStatusText();\n\n// load data\nconst client = new XMLHttpRequest();\nclient.open('GET', 'data/csv/meteorite_landings.csv');\nclient.onload = function () {\n  const csv = client.responseText;\n  const features = [];\n\n  let prevIndex = csv.indexOf('\\n') + 1; // scan past the header line\n\n  let curIndex;\n  while ((curIndex = csv.indexOf('\\n', prevIndex)) != -1) {\n    const line = csv.substr(prevIndex, curIndex - prevIndex).split(',');\n    prevIndex = curIndex + 1;\n\n    const coords = fromLonLat([parseFloat(line[4]), parseFloat(line[3])]);\n    if (isNaN(coords[0]) || isNaN(coords[1])) {\n      // guard against bad data\n      continue;\n    }\n\n    features.push(\n      new Feature({\n        mass: parseFloat(line[1]) || 0,\n        year: parseInt(line[2]) || 0,\n        geometry: new Point(coords),\n      })\n    );\n  }\n\n  vectorSource.addFeatures(features);\n};\nclient.send();\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new Stamen({\n        layer: 'toner',\n      }),\n    }),\n    new WebGLPointsLayer({\n      style: style,\n      source: vectorSource,\n      disableHitDetection: true,\n    }),\n  ],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\n// animate the map\nfunction animate() {\n  map.render();\n  window.requestAnimationFrame(animate);\n}\nanimate();\n"],"sourceRoot":""}