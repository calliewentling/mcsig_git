{"version":3,"sources":["webpack:///./vector-esri.js"],"names":["esrijsonFormat","styleCache","fill","color","stroke","width","vectorSource","loader","extent","resolution","projection","success","failure","const","url","serviceUrl","encodeURIComponent","$","ajax","dataType","response","error","alert","message","details","join","features","readFeatures","featureProjection","length","addFeatures","strategy","tileSize","vector","source","style","feature","classify","get","raster","attributions","map","layers","target","document","getElementById","view","center","zoom","displayFeatureInfo","pixel","forEachFeatureAtPixel","push","i","ii","info","innerHTML","getTarget","cursor","on","evt","dragging","getEventPixel","originalEvent"],"mappings":"8NAgBMA,EAAiB,IAAI,IAErBC,EAAa,CACjB,UAAa,IAAI,KAAM,CACrBC,KAAM,IAAI,IAAK,CACbC,MAAO,6BAETC,OAAQ,IAAI,IAAO,CACjBD,MAAO,qBACPE,MAAO,OAGX,IAAO,IAAI,KAAM,CACfH,KAAM,IAAI,IAAK,CACbC,MAAO,yBAETC,OAAQ,IAAI,IAAO,CACjBD,MAAO,2BACPE,MAAO,OAGX,IAAO,IAAI,KAAM,CACfH,KAAM,IAAI,IAAK,CACbC,MAAO,0BAETC,OAAQ,IAAI,IAAO,CACjBD,MAAO,2BACPE,MAAO,MAGX,OAAU,IAAI,KAAM,CAClBH,KAAM,IAAI,IAAK,CACbC,MAAO,2BAETC,OAAQ,IAAI,IAAO,CACjBD,MAAO,2BACPE,MAAO,QAKPC,EAAe,IAAI,IAAa,CACpCC,OAAQ,SAAUC,EAAQC,EAAYC,EAAYC,EAASC,GACzDC,IAAMC,EACJC,iLAIAC,mBACE,WACER,EAAO,GACP,WACAA,EAAO,GACP,WACAA,EAAO,GACP,WACAA,EAAO,GACP,wCAbJO,0EAiBFE,EAAEC,KAAK,CACLJ,IAAKA,EACLK,SAAU,QACVR,QAAS,SAAUS,GACjB,GAAIA,EAASC,MACXC,MACEF,EAASC,MAAME,QAAU,KAAOH,EAASC,MAAMG,QAAQC,KAAK,OAE9Db,QACK,CAELC,IAAMa,EAAW1B,EAAe2B,aAAaP,EAAU,CACrDQ,kBAAmBlB,IAEjBgB,EAASG,OAAS,GACpBvB,EAAawB,YAAYJ,GAE3Bf,EAAQe,KAGZL,MAAOT,KAGXmB,UAAU,SACR,QAAU,CACRC,SAAU,SAKVC,EAAS,IAAI,IAAY,CAC7BC,OAAQ5B,EACR6B,MAAO,SAAUC,GACfvB,IAAMwB,EAAWD,EAAQE,IAAI,cAC7B,OAAOrC,EAAWoC,MAIhBE,EAAS,IAAI,IAAU,CAC3BL,OAAQ,IAAI,IAAI,CACdM,aACE,+GAEF1B,IACE,qGAKA2B,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACH,EAAQN,GACjBU,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAI,KAAK,CACbC,QAAQ,QAAW,EAAE,QAAS,UAC9BC,KAAM,MAIJC,EAAqB,SAAUC,GACnCrC,IAAMa,EAAW,GAIjB,GAHAe,EAAIU,sBAAsBD,GAAO,SAAUd,GACzCV,EAAS0B,KAAKhB,MAEZV,EAASG,OAAS,EAAG,CACvBhB,IACIwC,EAAGC,EADDC,EAAO,GAEb,IAAKF,EAAI,EAAGC,EAAK5B,EAASG,OAAQwB,EAAIC,IAAMD,EAC1CE,EAAKH,KAAK1B,EAAS2B,GAAGf,IAAI,eAE5BM,SAASC,eAAe,QAAQW,UAAYD,EAAK9B,KAAK,OAAS,YAC/DgB,EAAIgB,YAAYtB,MAAMuB,OAAS,eAE/Bd,SAASC,eAAe,QAAQW,UAAY,SAC5Cf,EAAIgB,YAAYtB,MAAMuB,OAAS,IAInCjB,EAAIkB,GAAG,eAAe,SAAUC,GAC9B,IAAIA,EAAIC,SAAR,CAGAhD,IAAMqC,EAAQT,EAAIqB,cAAcF,EAAIG,eACpCd,EAAmBC,OAGrBT,EAAIkB,GAAG,SAAS,SAAUC,GACxBX,EAAmBW,EAAIV,Y","file":"vector-esri.js","sourcesContent":["import EsriJSON from '../src/ol/format/EsriJSON.js';\nimport Map from '../src/ol/Map.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {Fill, Stroke, Style} from '../src/ol/style.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {createXYZ} from '../src/ol/tilegrid.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport {tile as tileStrategy} from '../src/ol/loadingstrategy.js';\n\nconst serviceUrl =\n  'https://sampleserver3.arcgisonline.com/ArcGIS/rest/services/' +\n  'Petroleum/KSFields/FeatureServer/';\nconst layer = '0';\n\nconst esrijsonFormat = new EsriJSON();\n\nconst styleCache = {\n  'ABANDONED': new Style({\n    fill: new Fill({\n      color: 'rgba(225, 225, 225, 255)',\n    }),\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 0, 255)',\n      width: 0.4,\n    }),\n  }),\n  'GAS': new Style({\n    fill: new Fill({\n      color: 'rgba(255, 0, 0, 255)',\n    }),\n    stroke: new Stroke({\n      color: 'rgba(110, 110, 110, 255)',\n      width: 0.4,\n    }),\n  }),\n  'OIL': new Style({\n    fill: new Fill({\n      color: 'rgba(56, 168, 0, 255)',\n    }),\n    stroke: new Stroke({\n      color: 'rgba(110, 110, 110, 255)',\n      width: 0,\n    }),\n  }),\n  'OILGAS': new Style({\n    fill: new Fill({\n      color: 'rgba(168, 112, 0, 255)',\n    }),\n    stroke: new Stroke({\n      color: 'rgba(110, 110, 110, 255)',\n      width: 0.4,\n    }),\n  }),\n};\n\nconst vectorSource = new VectorSource({\n  loader: function (extent, resolution, projection, success, failure) {\n    const url =\n      serviceUrl +\n      layer +\n      '/query/?f=json&' +\n      'returnGeometry=true&spatialRel=esriSpatialRelIntersects&geometry=' +\n      encodeURIComponent(\n        '{\"xmin\":' +\n          extent[0] +\n          ',\"ymin\":' +\n          extent[1] +\n          ',\"xmax\":' +\n          extent[2] +\n          ',\"ymax\":' +\n          extent[3] +\n          ',\"spatialReference\":{\"wkid\":102100}}'\n      ) +\n      '&geometryType=esriGeometryEnvelope&inSR=102100&outFields=*' +\n      '&outSR=102100';\n    $.ajax({\n      url: url,\n      dataType: 'jsonp',\n      success: function (response) {\n        if (response.error) {\n          alert(\n            response.error.message + '\\n' + response.error.details.join('\\n')\n          );\n          failure();\n        } else {\n          // dataProjection will be read from document\n          const features = esrijsonFormat.readFeatures(response, {\n            featureProjection: projection,\n          });\n          if (features.length > 0) {\n            vectorSource.addFeatures(features);\n          }\n          success(features);\n        }\n      },\n      error: failure,\n    });\n  },\n  strategy: tileStrategy(\n    createXYZ({\n      tileSize: 512,\n    })\n  ),\n});\n\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: function (feature) {\n    const classify = feature.get('activeprod');\n    return styleCache[classify];\n  },\n});\n\nconst raster = new TileLayer({\n  source: new XYZ({\n    attributions:\n      'Tiles Â© <a href=\"https://services.arcgisonline.com/ArcGIS/' +\n      'rest/services/World_Topo_Map/MapServer\">ArcGIS</a>',\n    url:\n      'https://server.arcgisonline.com/ArcGIS/rest/services/' +\n      'World_Topo_Map/MapServer/tile/{z}/{y}/{x}',\n  }),\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: fromLonLat([-97.6114, 38.8403]),\n    zoom: 7,\n  }),\n});\n\nconst displayFeatureInfo = function (pixel) {\n  const features = [];\n  map.forEachFeatureAtPixel(pixel, function (feature) {\n    features.push(feature);\n  });\n  if (features.length > 0) {\n    const info = [];\n    let i, ii;\n    for (i = 0, ii = features.length; i < ii; ++i) {\n      info.push(features[i].get('field_name'));\n    }\n    document.getElementById('info').innerHTML = info.join(', ') || '(unknown)';\n    map.getTarget().style.cursor = 'pointer';\n  } else {\n    document.getElementById('info').innerHTML = '&nbsp;';\n    map.getTarget().style.cursor = '';\n  }\n};\n\nmap.on('pointermove', function (evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const pixel = map.getEventPixel(evt.originalEvent);\n  displayFeatureInfo(pixel);\n});\n\nmap.on('click', function (evt) {\n  displayFeatureInfo(evt.pixel);\n});\n"],"sourceRoot":""}