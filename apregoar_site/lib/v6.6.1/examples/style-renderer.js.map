{"version":3,"sources":["webpack:///./style-renderer.js"],"names":["fill","stroke","color","width","style","renderer","pixelCoordinates","state","const","context","geometry","clone","setCoordinates","extent","getExtent","height","flag","feature","get","save","renderContext","pixelRatio","setFillStrokeStyle","drawGeometry","clip","bottomLeft","left","bottom","drawImage","restore","vectorLayer","source","url","format","getSource","on","event","img","Image","onload","set","src","toLowerCase","layers","target","view","center","zoom"],"mappings":"+LASMA,EAAO,IAAI,IACXC,EAAS,IAAI,IAAO,CACxBC,MAAO,wBACPC,MAAO,IAEHC,EAAQ,IAAI,KAAM,CACtBC,SAAU,SAAUC,EAAkBC,GACpCC,IAAMC,EAAUF,EAAME,QAChBC,EAAWH,EAAMG,SAASC,QAChCD,EAASE,eAAeN,GACxBE,IAAMK,EAASH,EAASI,YAClBX,GAAQ,QAASU,GACjBE,GAAS,QAAUF,GACnBG,EAAOT,EAAMU,QAAQC,IAAI,QAC/B,MAAKF,GAAQD,EAAS,GAAKZ,EAAQ,GAAnC,CAKAM,EAAQU,OACRX,IAAMY,GAAgB,QAAUX,EAAS,CACvCY,WAAY,IAEdD,EAAcE,mBAAmBtB,EAAMC,GACvCmB,EAAcG,aAAab,GAC3BD,EAAQe,OAGRhB,IAAMiB,GAAa,QAAcZ,GAC3Ba,EAAOD,EAAW,GAClBE,EAASF,EAAW,GAC1BhB,EAAQmB,UAAUZ,EAAMU,EAAMC,EAAQxB,EAAOY,GAC7CN,EAAQoB,cAINC,EAAc,IAAI,IAAY,CAClCC,OAAQ,IAAI,IAAa,CACvBC,IAAK,yFACLC,OAAQ,IAAI,MAEd7B,MAAOA,IAIT0B,EAAYI,YAAYC,GAAG,cAAc,SAAUC,GACjD5B,IAAMS,EAAUmB,EAAMnB,QAChBoB,EAAM,IAAIC,MAChBD,EAAIE,OAAS,WACXtB,EAAQuB,IAAI,OAAQH,IAEtBA,EAAII,IACF,4BAA8BxB,EAAQC,IAAI,UAAUwB,cAAgB,UAGxE,IAAI,IAAI,CACNC,OAAQ,CAACb,GACTc,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,Q","file":"style-renderer.js","sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Map from '../src/ol/Map.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport {Fill, Stroke, Style} from '../src/ol/style.js';\nimport {getBottomLeft, getHeight, getWidth} from '../src/ol/extent.js';\nimport {toContext} from '../src/ol/render.js';\n\nconst fill = new Fill();\nconst stroke = new Stroke({\n  color: 'rgba(255,255,255,0.8)',\n  width: 2,\n});\nconst style = new Style({\n  renderer: function (pixelCoordinates, state) {\n    const context = state.context;\n    const geometry = state.geometry.clone();\n    geometry.setCoordinates(pixelCoordinates);\n    const extent = geometry.getExtent();\n    const width = getWidth(extent);\n    const height = getHeight(extent);\n    const flag = state.feature.get('flag');\n    if (!flag || height < 1 || width < 1) {\n      return;\n    }\n\n    // Stitch out country shape from the blue canvas\n    context.save();\n    const renderContext = toContext(context, {\n      pixelRatio: 1,\n    });\n    renderContext.setFillStrokeStyle(fill, stroke);\n    renderContext.drawGeometry(geometry);\n    context.clip();\n\n    // Fill transparent country with the flag image\n    const bottomLeft = getBottomLeft(extent);\n    const left = bottomLeft[0];\n    const bottom = bottomLeft[1];\n    context.drawImage(flag, left, bottom, width, height);\n    context.restore();\n  },\n});\n\nconst vectorLayer = new VectorLayer({\n  source: new VectorSource({\n    url: 'https://openlayersbook.github.io/openlayers_book_samples/assets/data/countries.geojson',\n    format: new GeoJSON(),\n  }),\n  style: style,\n});\n\n// Load country flags and set them as `flag` attribute on the country feature\nvectorLayer.getSource().on('addfeature', function (event) {\n  const feature = event.feature;\n  const img = new Image();\n  img.onload = function () {\n    feature.set('flag', img);\n  };\n  img.src =\n    'https://flagcdn.com/w320/' + feature.get('iso_a2').toLowerCase() + '.png';\n});\n\nnew Map({\n  layers: [vectorLayer],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 1,\n  }),\n});\n"],"sourceRoot":""}