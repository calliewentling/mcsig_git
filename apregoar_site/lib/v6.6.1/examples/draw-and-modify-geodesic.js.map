{"version":3,"sources":["webpack:///./draw-and-modify-geodesic.js"],"names":["draw","snap","raster","source","style","fill","color","stroke","width","image","radius","geodesicStyle","geometry","feature","get","getGeometry","vector","getType","map","layers","target","view","center","zoom","defaultStyle","getOverlay","getStyleFunction","modify","forEach","modifyFeature","const","modifyGeometry","first","last","modifyPoint","getCoordinates","geometries","getGeometries","polygon","projection","getView","getProjection","length","circle","transform","setCoordinates","setGeometries","on","event","features","set","clone","setGeometry","unset","addInteraction","typeSelect","document","getElementById","addInteractions","let","geometryFunction","value","coordinates","type","onchange","removeInteraction"],"mappings":"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","file":"draw-and-modify-geodesic.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\nimport {Draw, Modify, Snap} from '../src/ol/interaction.js';\nimport {GeometryCollection, Point, Polygon} from '../src/ol/geom.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {circular} from '../src/ol/geom/Polygon.js';\nimport {getDistance} from '../src/ol/sphere.js';\nimport {transform} from '../src/ol/proj.js';\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst source = new VectorSource();\n\nconst style = new Style({\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.2)',\n  }),\n  stroke: new Stroke({\n    color: '#33cc33',\n    width: 2,\n  }),\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: '#ffcc33',\n    }),\n  }),\n});\n\nconst geodesicStyle = new Style({\n  geometry: function (feature) {\n    return feature.get('modifyGeometry') || feature.getGeometry();\n  },\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.2)',\n  }),\n  stroke: new Stroke({\n    color: '#ff3333',\n    width: 2,\n  }),\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: 'rgba(0, 0, 0, 0)',\n    }),\n  }),\n});\n\nconst vector = new VectorLayer({\n  source: source,\n  style: function (feature) {\n    const geometry = feature.getGeometry();\n    return geometry.getType() === 'GeometryCollection' ? geodesicStyle : style;\n  },\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 6600000],\n    zoom: 3,\n  }),\n});\n\nconst defaultStyle = new Modify({source: source})\n  .getOverlay()\n  .getStyleFunction();\n\nconst modify = new Modify({\n  source: source,\n  style: function (feature) {\n    feature.get('features').forEach(function (modifyFeature) {\n      const modifyGeometry = modifyFeature.get('modifyGeometry');\n      if (modifyGeometry) {\n        const modifyPoint = feature.getGeometry().getCoordinates();\n        const geometries = modifyFeature.getGeometry().getGeometries();\n        const polygon = geometries[0].getCoordinates()[0];\n        const center = geometries[1].getCoordinates();\n        const projection = map.getView().getProjection();\n        let first, last, radius;\n        if (modifyPoint[0] === center[0] && modifyPoint[1] === center[1]) {\n          // center is being modified\n          // get unchanged radius from diameter between polygon vertices\n          first = transform(polygon[0], projection, 'EPSG:4326');\n          last = transform(\n            polygon[(polygon.length - 1) / 2],\n            projection,\n            'EPSG:4326'\n          );\n          radius = getDistance(first, last) / 2;\n        } else {\n          // radius is being modified\n          first = transform(center, projection, 'EPSG:4326');\n          last = transform(modifyPoint, projection, 'EPSG:4326');\n          radius = getDistance(first, last);\n        }\n        // update the polygon using new center or radius\n        const circle = circular(\n          transform(center, projection, 'EPSG:4326'),\n          radius,\n          128\n        );\n        circle.transform('EPSG:4326', projection);\n        geometries[0].setCoordinates(circle.getCoordinates());\n        // save changes to be applied at the end of the interaction\n        modifyGeometry.setGeometries(geometries);\n      }\n    });\n    return defaultStyle(feature);\n  },\n});\n\nmodify.on('modifystart', function (event) {\n  event.features.forEach(function (feature) {\n    const geometry = feature.getGeometry();\n    if (geometry.getType() === 'GeometryCollection') {\n      feature.set('modifyGeometry', geometry.clone(), true);\n    }\n  });\n});\n\nmodify.on('modifyend', function (event) {\n  event.features.forEach(function (feature) {\n    const modifyGeometry = feature.get('modifyGeometry');\n    if (modifyGeometry) {\n      feature.setGeometry(modifyGeometry);\n      feature.unset('modifyGeometry', true);\n    }\n  });\n});\n\nmap.addInteraction(modify);\n\nlet draw, snap; // global so we can remove them later\nconst typeSelect = document.getElementById('type');\n\nfunction addInteractions() {\n  let value = typeSelect.value;\n  let geometryFunction;\n  if (value === 'Geodesic') {\n    value = 'Circle';\n    geometryFunction = function (coordinates, geometry, projection) {\n      if (!geometry) {\n        geometry = new GeometryCollection([\n          new Polygon([]),\n          new Point(coordinates[0]),\n        ]);\n      }\n      const geometries = geometry.getGeometries();\n      const center = transform(coordinates[0], projection, 'EPSG:4326');\n      const last = transform(coordinates[1], projection, 'EPSG:4326');\n      const radius = getDistance(center, last);\n      const circle = circular(center, radius, 128);\n      circle.transform('EPSG:4326', projection);\n      geometries[0].setCoordinates(circle.getCoordinates());\n      geometry.setGeometries(geometries);\n      return geometry;\n    };\n  }\n  draw = new Draw({\n    source: source,\n    type: value,\n    geometryFunction: geometryFunction,\n  });\n  map.addInteraction(draw);\n  snap = new Snap({source: source});\n  map.addInteraction(snap);\n}\n\n/**\n * Handle change event.\n */\ntypeSelect.onchange = function () {\n  map.removeInteraction(draw);\n  map.removeInteraction(snap);\n  addInteractions();\n};\n\naddInteractions();\n"],"sourceRoot":""}