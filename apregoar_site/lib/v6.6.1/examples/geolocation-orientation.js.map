{"version":3,"sources":["webpack:///./geolocation-orientation.js"],"names":["view","center","zoom","tileLayer","source","map","layers","target","markerEl","document","getElementById","marker","positioning","element","stopEvent","addOverlay","const","positions","geolocation","projection","getProjection","trackingOptions","maximumAge","enableHighAccuracy","timeout","deltaMean","on","position","getPosition","accuracy","getAccuracy","heading","getHeading","speed","getSpeed","m","x","y","fCoords","getCoordinates","previous","length","prevHeading","let","headingDiff","Math","PI","abs","appendCoordinate","setCoordinates","slice","src","addPosition","Date","now","coords","len","rad","html","toFixed","round","join","innerHTML","alert","previousM","updateView","max","rotation","resolution","height","c","getCoordinateAtM","setCenter","getResolution","getSize","sin","cos","setRotation","setPosition","render","simulationData","geolocateBtn","addEventListener","setTracking","disableButtons","client","XMLHttpRequest","open","onload","JSON","parse","responseText","data","send","simulateBtn","simulatePositionChange","set","projectedPosition","longitude","latitude","changed","disabled","coordinates","first","shift","prevDate","timestamp","geolocate","newDate","window","setTimeout"],"mappings":"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","file":"geolocation-orientation.js","sourcesContent":["import Geolocation from '../src/ol/Geolocation.js';\nimport LineString from '../src/ol/geom/LineString.js';\nimport Map from '../src/ol/Map.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport Overlay from '../src/ol/Overlay.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport {fromLonLat} from '../src/ol/proj.js';\n\n// creating the view\nconst view = new View({\n  center: fromLonLat([5.8713, 45.6452]),\n  zoom: 19,\n});\n\nconst tileLayer = new TileLayer({\n  source: new OSM(),\n});\n\n// creating the map\nconst map = new Map({\n  layers: [tileLayer],\n  target: 'map',\n  view: view,\n});\n\n// Geolocation marker\nconst markerEl = document.getElementById('geolocation_marker');\nconst marker = new Overlay({\n  positioning: 'center-center',\n  element: markerEl,\n  stopEvent: false,\n});\nmap.addOverlay(marker);\n\n// LineString to store the different geolocation positions. This LineString\n// is time aware.\n// The Z dimension is actually used to store the rotation (heading).\nconst positions = new LineString([], 'XYZM');\n\n// Geolocation Control\nconst geolocation = new Geolocation({\n  projection: view.getProjection(),\n  trackingOptions: {\n    maximumAge: 10000,\n    enableHighAccuracy: true,\n    timeout: 600000,\n  },\n});\n\nlet deltaMean = 500; // the geolocation sampling period mean in ms\n\n// Listen to position changes\ngeolocation.on('change', function () {\n  const position = geolocation.getPosition();\n  const accuracy = geolocation.getAccuracy();\n  const heading = geolocation.getHeading() || 0;\n  const speed = geolocation.getSpeed() || 0;\n  const m = Date.now();\n\n  addPosition(position, heading, m, speed);\n\n  const coords = positions.getCoordinates();\n  const len = coords.length;\n  if (len >= 2) {\n    deltaMean = (coords[len - 1][3] - coords[0][3]) / (len - 1);\n  }\n\n  const html = [\n    'Position: ' + position[0].toFixed(2) + ', ' + position[1].toFixed(2),\n    'Accuracy: ' + accuracy,\n    'Heading: ' + Math.round(radToDeg(heading)) + '&deg;',\n    'Speed: ' + (speed * 3.6).toFixed(1) + ' km/h',\n    'Delta: ' + Math.round(deltaMean) + 'ms',\n  ].join('<br />');\n  document.getElementById('info').innerHTML = html;\n});\n\ngeolocation.on('error', function () {\n  alert('geolocation error');\n  // FIXME we should remove the coordinates in positions\n});\n\n// convert radians to degrees\nfunction radToDeg(rad) {\n  return (rad * 360) / (Math.PI * 2);\n}\n// convert degrees to radians\nfunction degToRad(deg) {\n  return (deg * Math.PI * 2) / 360;\n}\n// modulo for negative values\nfunction mod(n) {\n  return ((n % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);\n}\n\nfunction addPosition(position, heading, m, speed) {\n  const x = position[0];\n  const y = position[1];\n  const fCoords = positions.getCoordinates();\n  const previous = fCoords[fCoords.length - 1];\n  const prevHeading = previous && previous[2];\n  if (prevHeading) {\n    let headingDiff = heading - mod(prevHeading);\n\n    // force the rotation change to be less than 180Â°\n    if (Math.abs(headingDiff) > Math.PI) {\n      const sign = headingDiff >= 0 ? 1 : -1;\n      headingDiff = -sign * (2 * Math.PI - Math.abs(headingDiff));\n    }\n    heading = prevHeading + headingDiff;\n  }\n  positions.appendCoordinate([x, y, heading, m]);\n\n  // only keep the 20 last coordinates\n  positions.setCoordinates(positions.getCoordinates().slice(-20));\n\n  // FIXME use speed instead\n  if (heading && speed) {\n    markerEl.src = 'data/geolocation_marker_heading.png';\n  } else {\n    markerEl.src = 'data/geolocation_marker.png';\n  }\n}\n\n// recenters the view by putting the given coordinates at 3/4 from the top or\n// the screen\nfunction getCenterWithHeading(position, rotation, resolution) {\n  const size = map.getSize();\n  const height = size[1];\n\n  return [\n    position[0] - (Math.sin(rotation) * height * resolution * 1) / 4,\n    position[1] + (Math.cos(rotation) * height * resolution * 1) / 4,\n  ];\n}\n\nlet previousM = 0;\nfunction updateView() {\n  // use sampling period to get a smooth transition\n  let m = Date.now() - deltaMean * 1.5;\n  m = Math.max(m, previousM);\n  previousM = m;\n  // interpolate position along positions LineString\n  const c = positions.getCoordinateAtM(m, true);\n  if (c) {\n    view.setCenter(getCenterWithHeading(c, -c[2], view.getResolution()));\n    view.setRotation(-c[2]);\n    marker.setPosition(c);\n    map.render();\n  }\n}\n\n// geolocate device\nconst geolocateBtn = document.getElementById('geolocate');\ngeolocateBtn.addEventListener(\n  'click',\n  function () {\n    geolocation.setTracking(true); // Start position tracking\n\n    tileLayer.on('postrender', updateView);\n    map.render();\n\n    disableButtons();\n  },\n  false\n);\n\n// simulate device move\nlet simulationData;\nconst client = new XMLHttpRequest();\nclient.open('GET', 'data/geolocation-orientation.json');\n\n/**\n * Handle data loading.\n */\nclient.onload = function () {\n  simulationData = JSON.parse(client.responseText).data;\n};\nclient.send();\n\nconst simulateBtn = document.getElementById('simulate');\nsimulateBtn.addEventListener(\n  'click',\n  function () {\n    const coordinates = simulationData;\n\n    const first = coordinates.shift();\n    simulatePositionChange(first);\n\n    let prevDate = first.timestamp;\n    function geolocate() {\n      const position = coordinates.shift();\n      if (!position) {\n        return;\n      }\n      const newDate = position.timestamp;\n      simulatePositionChange(position);\n      window.setTimeout(function () {\n        prevDate = newDate;\n        geolocate();\n      }, (newDate - prevDate) / 0.5);\n    }\n    geolocate();\n\n    tileLayer.on('postrender', updateView);\n    map.render();\n\n    disableButtons();\n  },\n  false\n);\n\nfunction simulatePositionChange(position) {\n  const coords = position.coords;\n  geolocation.set('accuracy', coords.accuracy);\n  geolocation.set('heading', degToRad(coords.heading));\n  const projectedPosition = fromLonLat([coords.longitude, coords.latitude]);\n  geolocation.set('position', projectedPosition);\n  geolocation.set('speed', coords.speed);\n  geolocation.changed();\n}\n\nfunction disableButtons() {\n  geolocateBtn.disabled = 'disabled';\n  simulateBtn.disabled = 'disabled';\n}\n"],"sourceRoot":""}