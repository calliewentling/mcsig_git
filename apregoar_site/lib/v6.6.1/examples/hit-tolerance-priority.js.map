{"version":3,"sources":["webpack:///./hit-tolerance-priority.js"],"names":["map","target","view","center","resolution","resolutions","vectorLayer","source","features","geometry","color","style","feature","image","radius","fill","get","stroke","width","addLayer","const","highlightFeature","NaN","setStyle","getSource","addFeature","on","e","forEachFeatureAtPixel","pixel","setGeometry","getGeometry","clone","hitTolerance"],"mappings":"gMASMA,EAAM,IAAI,IAAI,CAClBC,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,WAAY,EACZC,YAAa,CAAC,OAIZC,EAAc,IAAI,IAAY,CAClCC,OAAQ,IAAI,IAAa,CACvBC,SAAU,CACR,IAAI,IAAQ,CACVC,SAAU,IAAI,IAAM,CAAC,EAAG,IACxBC,MAAO,UAET,IAAI,IAAQ,CACVD,SAAU,IAAI,IAAM,EAAE,GAAI,IAC1BC,MAAO,YAET,IAAI,IAAQ,CACVD,SAAU,IAAI,IAAM,EAAE,IAAK,KAC3BC,MAAO,WAET,IAAI,IAAQ,CACVD,SAAU,IAAI,IAAM,EAAE,GAAI,KAC1BC,MAAO,YAIbC,MAAO,SAACC,GACN,OAAO,IAAI,KAAM,CACfC,MAAO,IAAI,IAAY,CACrBC,OAAQ,EACRC,KAAM,IAAI,IAAK,CACbL,MAAOE,EAAQI,IAAI,WAErBC,OAAQ,IAAI,IAAO,CACjBP,MAAO,OACPQ,MAAO,WAMjBlB,EAAImB,SAASb,GAEbc,IAAMC,EAAmB,IAAI,IAAQ,IAAI,IAAM,CAACC,IAAKA,OACrDD,EAAiBE,SACf,IAAI,KAAM,CACRV,MAAO,IAAI,IAAY,CACrBC,OAAQ,EACRG,OAAQ,IAAI,IAAO,CACjBP,MAAO,QACPQ,MAAO,SAKfZ,EAAYkB,YAAYC,WAAWJ,GACnCrB,EAAI0B,GAAG,eAAe,SAACC,GACT3B,EAAI4B,sBACdD,EAAEE,OACF,SAACjB,GAEC,OADAS,EAAiBS,YAAYlB,EAAQmB,cAAcC,UAC5C,IAET,CACEC,aAAc,MAIhBZ,EAAiBS,YAAY,IAAI,IAAM,CAACR,IAAKA,Y","file":"hit-tolerance-priority.js","sourcesContent":["import CircleStyle from '../src/ol/style/Circle.js';\nimport Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport {Fill, Stroke, Style} from '../src/ol/style.js';\nimport {Point} from '../src/ol/geom.js';\n\nconst map = new Map({\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    resolution: 1,\n    resolutions: [1],\n  }),\n});\n\nconst vectorLayer = new VectorLayer({\n  source: new VectorSource({\n    features: [\n      new Feature({\n        geometry: new Point([0, 0]),\n        color: 'white',\n      }),\n      new Feature({\n        geometry: new Point([-10, 0]),\n        color: 'fuchsia',\n      }),\n      new Feature({\n        geometry: new Point([-10, -10]),\n        color: 'orange',\n      }),\n      new Feature({\n        geometry: new Point([-10, 10]),\n        color: 'cyan',\n      }),\n    ],\n  }),\n  style: (feature) => {\n    return new Style({\n      image: new CircleStyle({\n        radius: 5,\n        fill: new Fill({\n          color: feature.get('color'),\n        }),\n        stroke: new Stroke({\n          color: 'gray',\n          width: 1,\n        }),\n      }),\n    });\n  },\n});\nmap.addLayer(vectorLayer);\n\nconst highlightFeature = new Feature(new Point([NaN, NaN]));\nhighlightFeature.setStyle(\n  new Style({\n    image: new CircleStyle({\n      radius: 5,\n      stroke: new Stroke({\n        color: 'black',\n        width: 2,\n      }),\n    }),\n  })\n);\nvectorLayer.getSource().addFeature(highlightFeature);\nmap.on('pointermove', (e) => {\n  const hit = map.forEachFeatureAtPixel(\n    e.pixel,\n    (feature) => {\n      highlightFeature.setGeometry(feature.getGeometry().clone());\n      return true;\n    },\n    {\n      hitTolerance: 10,\n    }\n  );\n  if (!hit) {\n    highlightFeature.setGeometry(new Point([NaN, NaN]));\n  }\n});\n"],"sourceRoot":""}