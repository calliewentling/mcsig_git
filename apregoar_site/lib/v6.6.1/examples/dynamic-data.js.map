{"version":3,"sources":["webpack:///./dynamic-data.js"],"names":["tileLayer","source","map","layers","target","view","center","zoom","imageStyle","image","radius","fill","color","stroke","width","headInnerImageStyle","headOuterImageStyle","R","r","p","on","event","const","i","vectorContext","frameState","theta","Math","PI","time","coordinates","t","x","cos","y","sin","push","setStyle","drawGeometry","headPoint","length","render"],"mappings":"2MAQMA,EAAY,IAAI,IAAU,CAC9BC,OAAQ,IAAI,MAGRC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACH,GACTI,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJC,EAAa,IAAI,KAAM,CAC3BC,MAAO,IAAI,IAAY,CACrBC,OAAQ,EACRC,KAAM,IAAI,IAAK,CAACC,MAAO,WACvBC,OAAQ,IAAI,IAAO,CAACD,MAAO,MAAOE,MAAO,QAIvCC,EAAsB,IAAI,KAAM,CACpCN,MAAO,IAAI,IAAY,CACrBC,OAAQ,EACRC,KAAM,IAAI,IAAK,CAACC,MAAO,aAIrBI,EAAsB,IAAI,KAAM,CACpCP,MAAO,IAAI,IAAY,CACrBC,OAAQ,EACRC,KAAM,IAAI,IAAK,CAACC,MAAO,cAMrBK,EAAI,IACJC,EAAI,IACJC,EAAI,IACVnB,EAAUoB,GAAG,cAAc,SAAUC,GACnCC,IAIIC,EAJEC,GAAgB,QAAiBH,GACjCI,EAAaJ,EAAMI,WACnBC,EAAS,EAAIC,KAAKC,GAAKH,EAAWI,KAPvB,IAQXC,EAAc,GAEpB,IAAKP,EAAI,EAAGA,EAXJ,MAWaA,EAAG,CACtBD,IAAMS,EAAIL,EAAS,EAAIC,KAAKC,GAAKL,EAZ3B,IAaAS,GAAKf,EAAIC,GAAKS,KAAKM,IAAIF,GAAKZ,EAAIQ,KAAKM,KAAMhB,EAAIC,GAAKa,EAAKb,GACzDgB,GAAKjB,EAAIC,GAAKS,KAAKQ,IAAIJ,GAAKZ,EAAIQ,KAAKQ,KAAMlB,EAAIC,GAAKa,EAAKb,GAC/DY,EAAYM,KAAK,CAACJ,EAAGE,IAEvBV,EAAca,SAAS7B,GACvBgB,EAAcc,aAAa,IAAI,IAAWR,IAE1CR,IAAMiB,EAAY,IAAI,IAAMT,EAAYA,EAAYU,OAAS,IAE7DhB,EAAca,SAASrB,GACvBQ,EAAcc,aAAaC,GAE3Bf,EAAca,SAAStB,GACvBS,EAAcc,aAAaC,GAE3BrC,EAAIuC,YAENvC,EAAIuC,W","file":"dynamic-data.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\nimport {MultiPoint, Point} from '../src/ol/geom.js';\nimport {getVectorContext} from '../src/ol/render.js';\n\nconst tileLayer = new TileLayer({\n  source: new OSM(),\n});\n\nconst map = new Map({\n  layers: [tileLayer],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\nconst imageStyle = new Style({\n  image: new CircleStyle({\n    radius: 5,\n    fill: new Fill({color: 'yellow'}),\n    stroke: new Stroke({color: 'red', width: 1}),\n  }),\n});\n\nconst headInnerImageStyle = new Style({\n  image: new CircleStyle({\n    radius: 2,\n    fill: new Fill({color: 'blue'}),\n  }),\n});\n\nconst headOuterImageStyle = new Style({\n  image: new CircleStyle({\n    radius: 5,\n    fill: new Fill({color: 'black'}),\n  }),\n});\n\nconst n = 200;\nconst omegaTheta = 30000; // Rotation period in ms\nconst R = 7e6;\nconst r = 2e6;\nconst p = 2e6;\ntileLayer.on('postrender', function (event) {\n  const vectorContext = getVectorContext(event);\n  const frameState = event.frameState;\n  const theta = (2 * Math.PI * frameState.time) / omegaTheta;\n  const coordinates = [];\n  let i;\n  for (i = 0; i < n; ++i) {\n    const t = theta + (2 * Math.PI * i) / n;\n    const x = (R + r) * Math.cos(t) + p * Math.cos(((R + r) * t) / r);\n    const y = (R + r) * Math.sin(t) + p * Math.sin(((R + r) * t) / r);\n    coordinates.push([x, y]);\n  }\n  vectorContext.setStyle(imageStyle);\n  vectorContext.drawGeometry(new MultiPoint(coordinates));\n\n  const headPoint = new Point(coordinates[coordinates.length - 1]);\n\n  vectorContext.setStyle(headOuterImageStyle);\n  vectorContext.drawGeometry(headPoint);\n\n  vectorContext.setStyle(headInnerImageStyle);\n  vectorContext.drawGeometry(headPoint);\n\n  map.render();\n});\nmap.render();\n"],"sourceRoot":""}