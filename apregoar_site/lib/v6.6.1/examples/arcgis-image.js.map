{"version":3,"sources":["webpack:///../src/ol/source/ImageArcGISRest.js","webpack:///./arcgis-image.js"],"names":["opt_options","const","options","super","attributions","imageSmoothing","projection","resolutions","this","crossOrigin_","undefined","crossOrigin","hidpi_","hidpi","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","image_","imageSize_","renderedRevision_","ratio_","ratio","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","getExtent","centerX","slice","centerY","halfWidth","halfHeight","imageResolution","width","Math","ceil","height","getRequestUrl_","addEventListener","EventType","handleImageChange","bind","getImageLoadFunction","size","srid","getCode","split","pop","join","round","modifiedUrl","replace","getUrl","setImageLoadFunction","changed","setUrl","updateParams","Image","Tile","source","OSM","Map","layers","target","view","View","center","zoom"],"mappings":"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","file":"arcgis-image.js","sourcesContent":["/**\n * @module ol/source/ImageArcGISRest\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {assign} from '../obj.js';\nimport {containsExtent, getHeight, getWidth} from '../extent.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageArcGISRest extends ImageSource {\n  /**\n   * @param {Options} [opt_options] Image ArcGIS Rest Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      attributions: options.attributions,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n    const image = this.image_;\n    if (\n      image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), extent)\n    ) {\n      return image;\n    }\n\n    const params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true,\n    };\n    assign(params, this.params_);\n\n    extent = extent.slice();\n    const centerX = (extent[0] + extent[2]) / 2;\n    const centerY = (extent[1] + extent[3]) / 2;\n    if (this.ratio_ != 1) {\n      const halfWidth = (this.ratio_ * getWidth(extent)) / 2;\n      const halfHeight = (this.ratio_ * getHeight(extent)) / 2;\n      extent[0] = centerX - halfWidth;\n      extent[1] = centerY - halfHeight;\n      extent[2] = centerX + halfWidth;\n      extent[3] = centerY + halfHeight;\n    }\n\n    const imageResolution = resolution / pixelRatio;\n\n    // Compute an integer width and height.\n    const width = Math.ceil(getWidth(extent) / imageResolution);\n    const height = Math.ceil(getHeight(extent) / imageResolution);\n\n    // Modify the extent to match the integer width and height.\n    extent[0] = centerX - (imageResolution * width) / 2;\n    extent[2] = centerX + (imageResolution * width) / 2;\n    extent[1] = centerY - (imageResolution * height) / 2;\n    extent[3] = centerY + (imageResolution * height) / 2;\n\n    this.imageSize_[0] = width;\n    this.imageSize_[1] = height;\n\n    const url = this.getRequestUrl_(\n      extent,\n      this.imageSize_,\n      pixelRatio,\n      projection,\n      params\n    );\n\n    this.image_ = new ImageWrapper(\n      extent,\n      resolution,\n      pixelRatio,\n      url,\n      this.crossOrigin_,\n      this.imageLoadFunction_\n    );\n\n    this.renderedRevision_ = this.getRevision();\n\n    this.image_.addEventListener(\n      EventType.CHANGE,\n      this.handleImageChange.bind(this)\n    );\n\n    return this.image_;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    // (if there is no numeric portion the entire projection code must\n    // form a valid ArcGIS SpatialReference definition).\n    const srid = projection\n      .getCode()\n      .split(/:(?=\\d+$)/)\n      .pop();\n\n    params['SIZE'] = size[0] + ',' + size[1];\n    params['BBOX'] = extent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(90 * pixelRatio);\n\n    const url = this.url_;\n\n    const modifiedUrl = url\n      .replace(/MapServer\\/?$/, 'MapServer/export')\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    if (modifiedUrl == url) {\n      assert(false, 50); // `options.featureTypes` should be an Array\n    }\n    return appendParams(modifiedUrl, params);\n  }\n\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.image_ = null;\n    this.changed();\n  }\n}\n\nexport default ImageArcGISRest;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {ImageArcGISRest, OSM} from '../src/ol/source.js';\nimport {Image as ImageLayer, Tile as TileLayer} from '../src/ol/layer.js';\n\nconst url =\n  'https://sampleserver1.arcgisonline.com/ArcGIS/rest/services/' +\n  'Specialty/ESRI_StateCityHighway_USA/MapServer';\n\nconst layers = [\n  new TileLayer({\n    source: new OSM(),\n  }),\n  new ImageLayer({\n    source: new ImageArcGISRest({\n      ratio: 1,\n      params: {},\n      url: url,\n    }),\n  }),\n];\nconst map = new Map({\n  layers: layers,\n  target: 'map',\n  view: new View({\n    center: [-10997148, 4569099],\n    zoom: 4,\n  }),\n});\n"],"sourceRoot":""}