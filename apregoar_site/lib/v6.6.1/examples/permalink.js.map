{"version":3,"sources":["webpack:///./permalink.js"],"names":["zoom","center","rotation","window","location","hash","const","parts","replace","split","length","parseFloat","map","layers","source","target","view","shouldUpdate","getView","on","getCenter","getZoom","toFixed","getRotation","state","history","pushState","addEventListener","event","setCenter","setZoom","setRotation"],"mappings":"qIAMIA,EAAO,EACPC,EAAS,CAAC,EAAG,GACbC,EAAW,EAEf,GAA6B,KAAzBC,OAAOC,SAASC,KAAa,CAE/BC,IACMC,EADOJ,OAAOC,SAASC,KAAKG,QAAQ,QAAS,IAChCC,MAAM,KACJ,IAAjBF,EAAMG,SACRV,EAAOW,WAAWJ,EAAM,IACxBN,EAAS,CAACU,WAAWJ,EAAM,IAAKI,WAAWJ,EAAM,KACjDL,EAAWS,WAAWJ,EAAM,KAIhCD,IAAMM,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,OAGhBC,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbf,OAAQA,EACRD,KAAMA,EACNE,SAAUA,MAIVe,GAAe,EACbD,EAAOJ,EAAIM,UA0BjBN,EAAIO,GAAG,WAzBiB,WACtB,GAAKF,EAAL,CAMAX,IAAML,EAASe,EAAKI,YACdf,EACJ,QACAW,EAAKK,UAAUC,QAAQ,GACvB,IACArB,EAAO,GAAGqB,QAAQ,GAClB,IACArB,EAAO,GAAGqB,QAAQ,GAClB,IACAN,EAAKO,cACDC,EAAQ,CACZxB,KAAMgB,EAAKK,UACXpB,OAAQe,EAAKI,YACblB,SAAUc,EAAKO,eAEjBpB,OAAOsB,QAAQC,UAAUF,EAAO,MAAOnB,QAnBrCY,GAAe,KA0BnBd,OAAOwB,iBAAiB,YAAY,SAAUC,GACxB,OAAhBA,EAAMJ,QAGVZ,EAAIM,UAAUW,UAAUD,EAAMJ,MAAMvB,QACpCW,EAAIM,UAAUY,QAAQF,EAAMJ,MAAMxB,MAClCY,EAAIM,UAAUa,YAAYH,EAAMJ,MAAMtB,UACtCe,GAAe,Q","file":"permalink.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\n\n// default zoom, center and rotation\nlet zoom = 2;\nlet center = [0, 0];\nlet rotation = 0;\n\nif (window.location.hash !== '') {\n  // try to restore center, zoom-level and rotation from the URL\n  const hash = window.location.hash.replace('#map=', '');\n  const parts = hash.split('/');\n  if (parts.length === 4) {\n    zoom = parseFloat(parts[0]);\n    center = [parseFloat(parts[1]), parseFloat(parts[2])];\n    rotation = parseFloat(parts[3]);\n  }\n}\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: center,\n    zoom: zoom,\n    rotation: rotation,\n  }),\n});\n\nlet shouldUpdate = true;\nconst view = map.getView();\nconst updatePermalink = function () {\n  if (!shouldUpdate) {\n    // do not update the URL when the view was changed in the 'popstate' handler\n    shouldUpdate = true;\n    return;\n  }\n\n  const center = view.getCenter();\n  const hash =\n    '#map=' +\n    view.getZoom().toFixed(2) +\n    '/' +\n    center[0].toFixed(2) +\n    '/' +\n    center[1].toFixed(2) +\n    '/' +\n    view.getRotation();\n  const state = {\n    zoom: view.getZoom(),\n    center: view.getCenter(),\n    rotation: view.getRotation(),\n  };\n  window.history.pushState(state, 'map', hash);\n};\n\nmap.on('moveend', updatePermalink);\n\n// restore the view state when navigating through the history, see\n// https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\nwindow.addEventListener('popstate', function (event) {\n  if (event.state === null) {\n    return;\n  }\n  map.getView().setCenter(event.state.center);\n  map.getView().setZoom(event.state.zoom);\n  map.getView().setRotation(event.state.rotation);\n  shouldUpdate = false;\n});\n"],"sourceRoot":""}