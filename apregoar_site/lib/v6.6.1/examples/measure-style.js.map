{"version":3,"sources":["webpack:///./measure-style.js"],"names":["tipPoint","typeSelect","document","getElementById","showSegments","clearPrevious","style","fill","color","stroke","lineDash","width","image","radius","labelStyle","text","font","backgroundFill","padding","textBaseline","offsetY","points","angle","Math","PI","displacement","tipStyle","textAlign","offsetX","modifyStyle","segmentStyle","segmentStyles","formatLength","line","const","length","round","raster","source","modify","styleFunction","feature","segments","drawType","tip","point","label","polygon","area","styles","geometry","getGeometry","type","getType","getInteriorPoint","getCoordinates","getLastCoordinate","let","count","forEachSegment","a","b","segment","push","clone","segmentPoint","getCoordinateAt","setGeometry","getText","setText","getOverlay","getSource","getFeatures","draw","vector","checked","map","layers","target","view","center","zoom","addInteraction","value","activeTip","idleTip","on","clear","setActive","once","onchange","removeInteraction","changed"],"mappings":"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","file":"measure-style.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {\n  Circle as CircleStyle,\n  Fill,\n  RegularShape,\n  Stroke,\n  Style,\n  Text,\n} from '../src/ol/style.js';\nimport {Draw, Modify} from '../src/ol/interaction.js';\nimport {LineString, Point} from '../src/ol/geom.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {getArea, getLength} from '../src/ol/sphere.js';\n\nconst typeSelect = document.getElementById('type');\nconst showSegments = document.getElementById('segments');\nconst clearPrevious = document.getElementById('clear');\n\nconst style = new Style({\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.2)',\n  }),\n  stroke: new Stroke({\n    color: 'rgba(0, 0, 0, 0.5)',\n    lineDash: [10, 10],\n    width: 2,\n  }),\n  image: new CircleStyle({\n    radius: 5,\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 0, 0.7)',\n    }),\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 0.2)',\n    }),\n  }),\n});\n\nconst labelStyle = new Style({\n  text: new Text({\n    font: '14px Calibri,sans-serif',\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 1)',\n    }),\n    backgroundFill: new Fill({\n      color: 'rgba(0, 0, 0, 0.7)',\n    }),\n    padding: [3, 3, 3, 3],\n    textBaseline: 'bottom',\n    offsetY: -15,\n  }),\n  image: new RegularShape({\n    radius: 8,\n    points: 3,\n    angle: Math.PI,\n    displacement: [0, 10],\n    fill: new Fill({\n      color: 'rgba(0, 0, 0, 0.7)',\n    }),\n  }),\n});\n\nconst tipStyle = new Style({\n  text: new Text({\n    font: '12px Calibri,sans-serif',\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 1)',\n    }),\n    backgroundFill: new Fill({\n      color: 'rgba(0, 0, 0, 0.4)',\n    }),\n    padding: [2, 2, 2, 2],\n    textAlign: 'left',\n    offsetX: 15,\n  }),\n});\n\nconst modifyStyle = new Style({\n  image: new CircleStyle({\n    radius: 5,\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 0, 0.7)',\n    }),\n    fill: new Fill({\n      color: 'rgba(0, 0, 0, 0.4)',\n    }),\n  }),\n  text: new Text({\n    text: 'Drag to modify',\n    font: '12px Calibri,sans-serif',\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 1)',\n    }),\n    backgroundFill: new Fill({\n      color: 'rgba(0, 0, 0, 0.7)',\n    }),\n    padding: [2, 2, 2, 2],\n    textAlign: 'left',\n    offsetX: 15,\n  }),\n});\n\nconst segmentStyle = new Style({\n  text: new Text({\n    font: '12px Calibri,sans-serif',\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 1)',\n    }),\n    backgroundFill: new Fill({\n      color: 'rgba(0, 0, 0, 0.4)',\n    }),\n    padding: [2, 2, 2, 2],\n    textBaseline: 'bottom',\n    offsetY: -12,\n  }),\n  image: new RegularShape({\n    radius: 6,\n    points: 3,\n    angle: Math.PI,\n    displacement: [0, 8],\n    fill: new Fill({\n      color: 'rgba(0, 0, 0, 0.4)',\n    }),\n  }),\n});\n\nconst segmentStyles = [segmentStyle];\n\nconst formatLength = function (line) {\n  const length = getLength(line);\n  let output;\n  if (length > 100) {\n    output = Math.round((length / 1000) * 100) / 100 + ' km';\n  } else {\n    output = Math.round(length * 100) / 100 + ' m';\n  }\n  return output;\n};\n\nconst formatArea = function (polygon) {\n  const area = getArea(polygon);\n  let output;\n  if (area > 10000) {\n    output = Math.round((area / 1000000) * 100) / 100 + ' km\\xB2';\n  } else {\n    output = Math.round(area * 100) / 100 + ' m\\xB2';\n  }\n  return output;\n};\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst source = new VectorSource();\n\nconst modify = new Modify({source: source, style: modifyStyle});\n\nlet tipPoint;\n\nfunction styleFunction(feature, segments, drawType, tip) {\n  const styles = [style];\n  const geometry = feature.getGeometry();\n  const type = geometry.getType();\n  let point, label, line;\n  if (!drawType || drawType === type) {\n    if (type === 'Polygon') {\n      point = geometry.getInteriorPoint();\n      label = formatArea(geometry);\n      line = new LineString(geometry.getCoordinates()[0]);\n    } else if (type === 'LineString') {\n      point = new Point(geometry.getLastCoordinate());\n      label = formatLength(geometry);\n      line = geometry;\n    }\n  }\n  if (segments && line) {\n    let count = 0;\n    line.forEachSegment(function (a, b) {\n      const segment = new LineString([a, b]);\n      const label = formatLength(segment);\n      if (segmentStyles.length - 1 < count) {\n        segmentStyles.push(segmentStyle.clone());\n      }\n      const segmentPoint = new Point(segment.getCoordinateAt(0.5));\n      segmentStyles[count].setGeometry(segmentPoint);\n      segmentStyles[count].getText().setText(label);\n      styles.push(segmentStyles[count]);\n      count++;\n    });\n  }\n  if (label) {\n    labelStyle.setGeometry(point);\n    labelStyle.getText().setText(label);\n    styles.push(labelStyle);\n  }\n  if (\n    tip &&\n    type === 'Point' &&\n    !modify.getOverlay().getSource().getFeatures().length\n  ) {\n    tipPoint = geometry;\n    tipStyle.getText().setText(tip);\n    styles.push(tipStyle);\n  }\n  return styles;\n}\n\nconst vector = new VectorLayer({\n  source: source,\n  style: function (feature) {\n    return styleFunction(feature, showSegments.checked);\n  },\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 15,\n  }),\n});\n\nmap.addInteraction(modify);\n\nlet draw; // global so we can remove it later\n\nfunction addInteraction() {\n  const drawType = typeSelect.value;\n  const activeTip =\n    'Click to continue drawing the ' +\n    (drawType === 'Polygon' ? 'polygon' : 'line');\n  const idleTip = 'Click to start measuring';\n  let tip = idleTip;\n  draw = new Draw({\n    source: source,\n    type: drawType,\n    style: function (feature) {\n      return styleFunction(feature, showSegments.checked, drawType, tip);\n    },\n  });\n  draw.on('drawstart', function () {\n    if (clearPrevious.checked) {\n      source.clear();\n    }\n    modify.setActive(false);\n    tip = activeTip;\n  });\n  draw.on('drawend', function () {\n    modifyStyle.setGeometry(tipPoint);\n    modify.setActive(true);\n    map.once('pointermove', function () {\n      modifyStyle.setGeometry();\n    });\n    tip = idleTip;\n  });\n  modify.setActive(true);\n  map.addInteraction(draw);\n}\n\ntypeSelect.onchange = function () {\n  map.removeInteraction(draw);\n  addInteraction();\n};\n\naddInteraction();\n\nshowSegments.onchange = function () {\n  vector.changed();\n  draw.getOverlay().changed();\n};\n"],"sourceRoot":""}