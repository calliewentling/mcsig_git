{"version":3,"sources":["webpack:///./cluster.js"],"names":["distanceInput","document","getElementById","minDistanceInput","features","Array","e","i","const","coordinates","Math","random","source","clusterSource","distance","parseInt","value","minDistance","styleCache","clusters","style","feature","size","get","length","image","radius","stroke","color","fill","text","toString","raster","map","layers","target","view","center","zoom","addEventListener","setDistance","setMinDistance","on","getFeatures","pixel","then","clickedFeatures","extent","r","getGeometry","getCoordinates","getView","fit","duration","padding"],"mappings":"0FAqBA,I,wJANMA,EAAgBC,SAASC,eAAe,YACxCC,EAAmBF,SAASC,eAAe,gBAG3CE,EAAW,IAAIC,MADP,KAERC,EAAI,KACDC,EAAI,EAAGA,EAHF,MAGeA,EAAG,CAC9BC,IAAMC,EAAc,CAAC,EAAIH,EAAII,KAAKC,SAAWL,EAAG,EAAIA,EAAII,KAAKC,SAAWL,GACxEF,EAASG,GAAK,IAAI,IAAQ,IAAI,IAAME,IAGtCD,IAAMI,EAAS,IAAI,IAAa,CAC9BR,SAAUA,IAGNS,EAAgB,IAAI,IAAQ,CAChCC,SAAUC,SAASf,EAAcgB,MAAO,IACxCC,YAAaF,SAASZ,EAAiBa,MAAO,IAC9CJ,OAAQA,IAGJM,EAAa,GACbC,EAAW,IAAI,IAAY,CAC/BP,OAAQC,EACRO,MAAO,SAAUC,GACfb,IAAMc,EAAOD,EAAQE,IAAI,YAAYC,OACjCJ,EAAQF,EAAWI,GAqBvB,OApBKF,IACHA,EAAQ,IAAI,KAAM,CAChBK,MAAO,IAAI,IAAY,CACrBC,OAAQ,GACRC,OAAQ,IAAI,IAAO,CACjBC,MAAO,SAETC,KAAM,IAAI,IAAK,CACbD,MAAO,cAGXE,KAAM,IAAI,IAAK,CACbA,KAAMR,EAAKS,WACXF,KAAM,IAAI,IAAK,CACbD,MAAO,aAIbV,EAAWI,GAAQF,GAEdA,KAILY,EAAS,IAAI,IAAU,CAC3BpB,OAAQ,IAAI,MAGRqB,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACF,EAAQb,GACjBgB,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIVtC,EAAcuC,iBAAiB,SAAS,WACtC1B,EAAc2B,YAAYzB,SAASf,EAAcgB,MAAO,QAG1Db,EAAiBoC,iBAAiB,SAAS,WACzC1B,EAAc4B,eAAe1B,SAASZ,EAAiBa,MAAO,QAGhEiB,EAAIS,GAAG,SAAS,SAACpC,GACfa,EAASwB,YAAYrC,EAAEsC,OAAOC,MAAK,SAACC,GAClC,GAAIA,EAAgBtB,OAAQ,CAE1BhB,IAAMJ,EAAW0C,EAAgB,GAAGvB,IAAI,YACxC,GAAInB,EAASoB,OAAS,EAAG,CACvBhB,IAAMuC,GAAS,QACb3C,EAAS6B,KAAI,SAACe,GAAC,OAAKA,EAAEC,cAAcC,qBAEtCjB,EAAIkB,UAAUC,IAAIL,EAAQ,CAACM,SAAU,IAAMC,QAAS,CAAC,GAAI,GAAI,GAAI,gB","file":"cluster.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport Point from '../src/ol/geom/Point.js';\nimport View from '../src/ol/View.js';\nimport {\n  Circle as CircleStyle,\n  Fill,\n  Stroke,\n  Style,\n  Text,\n} from '../src/ol/style.js';\nimport {Cluster, OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {boundingExtent} from '../src/ol/extent.js';\n\nconst distanceInput = document.getElementById('distance');\nconst minDistanceInput = document.getElementById('min-distance');\n\nconst count = 20000;\nconst features = new Array(count);\nconst e = 4500000;\nfor (let i = 0; i < count; ++i) {\n  const coordinates = [2 * e * Math.random() - e, 2 * e * Math.random() - e];\n  features[i] = new Feature(new Point(coordinates));\n}\n\nconst source = new VectorSource({\n  features: features,\n});\n\nconst clusterSource = new Cluster({\n  distance: parseInt(distanceInput.value, 10),\n  minDistance: parseInt(minDistanceInput.value, 10),\n  source: source,\n});\n\nconst styleCache = {};\nconst clusters = new VectorLayer({\n  source: clusterSource,\n  style: function (feature) {\n    const size = feature.get('features').length;\n    let style = styleCache[size];\n    if (!style) {\n      style = new Style({\n        image: new CircleStyle({\n          radius: 10,\n          stroke: new Stroke({\n            color: '#fff',\n          }),\n          fill: new Fill({\n            color: '#3399CC',\n          }),\n        }),\n        text: new Text({\n          text: size.toString(),\n          fill: new Fill({\n            color: '#fff',\n          }),\n        }),\n      });\n      styleCache[size] = style;\n    }\n    return style;\n  },\n});\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst map = new Map({\n  layers: [raster, clusters],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\ndistanceInput.addEventListener('input', function () {\n  clusterSource.setDistance(parseInt(distanceInput.value, 10));\n});\n\nminDistanceInput.addEventListener('input', function () {\n  clusterSource.setMinDistance(parseInt(minDistanceInput.value, 10));\n});\n\nmap.on('click', (e) => {\n  clusters.getFeatures(e.pixel).then((clickedFeatures) => {\n    if (clickedFeatures.length) {\n      // Get clustered Coordinates\n      const features = clickedFeatures[0].get('features');\n      if (features.length > 1) {\n        const extent = boundingExtent(\n          features.map((r) => r.getGeometry().getCoordinates())\n        );\n        map.getView().fit(extent, {duration: 1000, padding: [50, 50, 50, 50]});\n      }\n    }\n  });\n});\n"],"sourceRoot":""}