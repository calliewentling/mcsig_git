{"version":3,"sources":["webpack:///./topolis.js"],"names":["raster","source","nodes","wrapX","nodesLayer","style","f","image","radius","fill","color","stroke","width","text","get","id","toString","edges","edgesLayer","faces","facesLayer","font","map","layers","target","view","center","zoom","topo","topolis","createTopology","removeElementFeature","element","const","feature","getFeatureById","removeFeature","createNode","coord","let","existingEdge","getEdgeByPoint","modEdgeSplit","addIsoNode","on","node","geometry","coordinate","setId","addFeature","e","edge","coordinates","setGeometry","face","getFaceGeometry","draw","type","start","end","edgeGeom","getGeometry","getCoordinates","startCoord","endCoord","length","getNodeByPoint","edgesAtStart","edgesAtEnd","crossing","getEdgesByLine","remEdgeNewFace","removeIsoNode","addEdgeNewFaces","toastr","warning","addInteraction","snap","addControl"],"mappings":"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","file":"topolis.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport MousePosition from '../src/ol/control/MousePosition.js';\nimport View from '../src/ol/View.js';\nimport {\n  Circle as CircleStyle,\n  Fill,\n  Stroke,\n  Style,\n  Text,\n} from '../src/ol/style.js';\nimport {Draw, Snap} from '../src/ol/interaction.js';\nimport {LineString, Point, Polygon} from '../src/ol/geom.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst nodes = new VectorSource({wrapX: false});\nconst nodesLayer = new VectorLayer({\n  source: nodes,\n  style: function (f) {\n    const style = new Style({\n      image: new CircleStyle({\n        radius: 8,\n        fill: new Fill({color: 'rgba(255, 0, 0, 0.2)'}),\n        stroke: new Stroke({color: 'red', width: 1}),\n      }),\n      text: new Text({\n        text: f.get('node').id.toString(),\n        fill: new Fill({color: 'red'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 3,\n        }),\n      }),\n    });\n    return [style];\n  },\n});\n\nconst edges = new VectorSource({wrapX: false});\nconst edgesLayer = new VectorLayer({\n  source: edges,\n  style: function (f) {\n    const style = new Style({\n      stroke: new Stroke({\n        color: 'blue',\n        width: 1,\n      }),\n      text: new Text({\n        text: f.get('edge').id.toString(),\n        fill: new Fill({color: 'blue'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2,\n        }),\n      }),\n    });\n    return [style];\n  },\n});\n\nconst faces = new VectorSource({wrapX: false});\nconst facesLayer = new VectorLayer({\n  source: faces,\n  style: function (f) {\n    const style = new Style({\n      stroke: new Stroke({\n        color: 'black',\n        width: 1,\n      }),\n      fill: new Fill({\n        color: 'rgba(0, 255, 0, 0.2)',\n      }),\n      text: new Text({\n        font: 'bold 12px sans-serif',\n        text: f.get('face').id.toString(),\n        fill: new Fill({color: 'green'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2,\n        }),\n      }),\n    });\n    return [style];\n  },\n});\n\nconst map = new Map({\n  layers: [raster, facesLayer, edgesLayer, nodesLayer],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 16,\n  }),\n});\n\nconst topo = topolis.createTopology();\n\ntopo.on('addnode', nodeToFeature);\ntopo.on('removenode', function (e) {\n  removeElementFeature(nodes, e);\n});\ntopo.on('addedge', edgeToFeature);\ntopo.on('modedge', function (e) {\n  const feature = edges.getFeatureById(e.id);\n  feature.setGeometry(new LineString(e.coordinates));\n});\ntopo.on('removeedge', function (e) {\n  removeElementFeature(edges, e);\n});\ntopo.on('addface', faceToFeature);\ntopo.on('removeface', function (e) {\n  removeElementFeature(faces, e);\n});\n\nfunction removeElementFeature(source, element) {\n  const feature = source.getFeatureById(element.id);\n  source.removeFeature(feature);\n}\n\nfunction nodeToFeature(node) {\n  const feature = new Feature({\n    geometry: new Point(node.coordinate),\n    node: node,\n  });\n  feature.setId(node.id);\n  nodes.addFeature(feature);\n}\n\nfunction edgeToFeature(edge) {\n  const feature = new Feature({\n    geometry: new LineString(edge.coordinates),\n    edge: edge,\n  });\n  feature.setId(edge.id);\n  edges.addFeature(feature);\n}\n\nfunction faceToFeature(face) {\n  const coordinates = topo.getFaceGeometry(face);\n  const feature = new Feature({\n    geometry: new Polygon(coordinates),\n    face: face,\n  });\n  feature.setId(face.id);\n  faces.addFeature(feature);\n}\n\nfunction createNode(topo, coord) {\n  let node;\n  const existingEdge = topo.getEdgeByPoint(coord, 5)[0];\n  if (existingEdge) {\n    node = topo.modEdgeSplit(existingEdge, coord);\n  } else {\n    node = topo.addIsoNode(coord);\n  }\n  return node;\n}\n\nfunction onDrawend(e) {\n  const edgeGeom = e.feature.getGeometry().getCoordinates();\n  const startCoord = edgeGeom[0];\n  const endCoord = edgeGeom[edgeGeom.length - 1];\n  let start, end;\n  try {\n    start = topo.getNodeByPoint(startCoord);\n    end = topo.getNodeByPoint(endCoord);\n    const edgesAtStart = topo.getEdgeByPoint(startCoord, 5);\n    const edgesAtEnd = topo.getEdgeByPoint(endCoord, 5);\n    const crossing = topo.getEdgesByLine(edgeGeom);\n    if (\n      crossing.length === 1 &&\n      !start &&\n      !end &&\n      edgesAtStart.length === 0 &&\n      edgesAtEnd.length === 0\n    ) {\n      topo.remEdgeNewFace(crossing[0]);\n      start = crossing[0].start;\n      if (start.face) {\n        topo.removeIsoNode(start);\n      }\n      end = crossing[0].end;\n      if (end.face) {\n        topo.removeIsoNode(end);\n      }\n      return;\n    }\n    if (!start) {\n      start = createNode(topo, startCoord);\n      edgeGeom[0] = start.coordinate;\n    }\n    if (!end) {\n      end = createNode(topo, endCoord);\n      edgeGeom[edgeGeom.length - 1] = end.coordinate;\n    }\n    topo.addEdgeNewFaces(start, end, edgeGeom);\n  } catch (e) {\n    toastr.warning(e.toString());\n  }\n}\n\nconst draw = new Draw({\n  type: 'LineString',\n});\ndraw.on('drawend', onDrawend);\nmap.addInteraction(draw);\nconst snap = new Snap({\n  source: edges,\n});\nmap.addInteraction(snap);\nmap.addControl(new MousePosition());\n"],"sourceRoot":""}