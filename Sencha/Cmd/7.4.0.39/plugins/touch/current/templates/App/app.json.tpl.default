{
    /**
     * The application's namespace.
     */
    "name": "{name}",

    /**
     * The relative path to the appliaction's markup file (html, jsp, asp, etc.)
     */
    "indexHtmlPath": "index.html",

    /**
     * Comma-separated string with the paths of directories or files to search. Any classes
     * declared in these locations will be available in your class "requires" or in calls
     * to "Ext.require". The "app.dir" variable below is expanded to the path where the
     * application resides (the same folder in which this file is located).
     */
    "classpath": "$\u007Bapp.dir}/app",

    "overrides": "$\u007Bapp.dir}/overrides",

    /**
     * The Sencha Framework for this application: "ext" or "touch".
     */
    "framework": "{frameworkKey}",

    /**
     * The name of the theme for this application.
     */
    <tpl if="themeName == 'default'">
    "theme": "touch-theme-sencha",
    <tpl else>
    "theme": "{themeName}",
    </tpl>
    /**
     * The list of required packages (with optional versions; default is "latest").
     *
     * For example,
     *
     *      "requires": [
     *          "sencha-charts"
     *      ]
     */
    "requires": [
    ],

    /**
     * Sass configuration properties.
     */
    "sass": {
        /**
         * The root namespace to use when mapping *.scss files to classes in the
         * sass/src and sass/var directories. For example, "{name}.view.Foo" would
         * map to "sass/src/view/Foo.scss". If we changed this to "{name}.view" then
         * it would map to "sass/src/Foo.scss". To style classes outside the app's
         * root namespace, change this to "". Doing so would change the mapping of
         * "{name}.view.Foo" to "sass/src/{name}/view/Foo.scss".
         */
        "namespace": "{name}"
    },

    /**
     * List of all JavaScript assets in the right execution order.
     *
     * Each item is an object with the following format:
     *
     *      {
     *          // Path to file. If the file is local this must be a relative path from
     *          // this app.json file.
     *          //
     *          "path": "path/to/script.js",   // REQUIRED
     *
     *          // Set to true on one file to indicate that it should become the container
     *          // for the concatenated classes.
     *          //
     *          "bundle": false,    // OPTIONAL
     *
     *          // Set to true to include this file in the concatenated classes.
     *          //
     *          "includeInBundle": false,  // OPTIONAL
     *
     *          // Specify as true if this file is remote and should not be copied into the
     *          // build folder. Defaults to false for a local file which will be copied.
     *          //
     *          "remote": false,    // OPTIONAL
     *
     *          // If not specified, this file will only be loaded once, and cached inside
     *          // localStorage until this value is changed. You can specify:
     *          //
     *          //   - "delta" to enable over-the-air delta update for this file
     *          //   - "full" means full update will be made when this file changes
     *          //
     *          "update": "",        // OPTIONAL
     *
     *          // A value of true indicates that is a development mode only dependency.
     *          // These files will not be copied into the build directory or referenced
     *          // in the generate app.json manifest for the micro loader.
     *          //
     *          "bootstrap": false   // OPTIONAL
     *      }
     *
     */
    "js": [
        {
            "path": "$\u007Bframework.dir}/build/sencha-touch-all-debug.js"
        },
        {
            "path": "app.js",
            "bundle": true
        }
    ],

    /**
     * List of all CSS assets in the right inclusion order.
     *
     * Each item is an object with the following format:
     *
     *      {
     *          // Path to file. If the file is local this must be a relative path from
     *          // this app.json file.
     *          //
     *          "path": "path/to/stylesheet.css",   // REQUIRED
     *
     *          // Specify as true if this file is remote and should not be copied into the
     *          // build folder. Defaults to false for a local file which will be copied.
     *          //
     *          "remote": false,    // OPTIONAL
     *
     *          // If not specified, this file will only be loaded once, and cached inside
     *          // localStorage until this value is changed. You can specify:
     *          //
     *          //   - "delta" to enable over-the-air delta update for this file
     *          //   - "full" means full update will be made when this file changes
     *          //
     *          "update": ""      // OPTIONAL
     *      }
     */
    "css": [
        {
            "path": "bootstrap.css",
            "bootstrap": true
        }
    ],

    /**
     * This option is used to configure the dynamic loader. At present these options
     * are supported.
     *
     *      "loader": {
     *          // This property controls how the loader manages caching for requests:
     *          //
     *          //   - true: allows requests to receive cached responses
     *          //   - false: disable cached responses by adding a random "cache buster"
     *          //   - other: a string (such as the build.timestamp shown here) to allow
     *          //     requests to be cached for this build.
     *          //
     *          "cache": "$\u007Bbuild.timestamp}",
     *
     *          // When "cache" is not true, this value is the request parameter used
     *          // to control caching.
     *          //
     *          "cacheParam": "_dc"
     *      },
     *
     */


    /**
     * override objects for setting build environment specific 
     * settings.
     */
    "production": {
    },
    
    "testing": {
    },
    
    "development": {
    },

    /**
     *  Controls the output structure of bootstrap artifacts.  May be specified by a string:
     *
     *      "bootstrap": "$\u007Bapp.dir}"
     *
     *  to adjust the base path for all bootstrap objects, or expanded into object form:
     *
     *      "bootstrap": {
     *          "base": "$\u007Bapp.dir}",
     *          "manifest": "bootstrap.json",
     *          "microloader": "bootstrap.js",
     *          "css": "bootstrap.css"
     *      }
     *
     *  You can optionally exclude entries from the manifest. If you use ext-*.js,
     *  be sure to exclude "loadOrder" like so:
     *
     *      "bootstrap": {
     *          "manifest": {
     *              "path": "bootstrap.json",
     *              "exclude": "loadOrder"
     *          }
     *      }
     *
     */
    "bootstrap": {
        "base": "$\u007bapp.dir}",
        "manifest": "bootstrap.json",
        "microloader": "bootstrap.js",
        "css": "bootstrap.css"
    },

    /**
     *  Controls the output directory for build resources.  May be set with
     *  either a string:
     *
     *      "$\u007bworkspace.build.dir}/$\u007bbuild.environment}/$\u007bapp.name}"
     *
     *  or an object containing values for various types of
     *  build artifacts:
     *
     *      {
     *          "base": "$\u007bworkspace.build.dir}/$\u007bbuild.environment}/$\u007bapp.name}",
     *          "page": {
     *              "path": "../index.html",
     *              "enable": false
     *          },
     *          "css": "$\u007bapp.output.resources}/$\u007bapp.name}-all.css",
     *          "js": "app.js",
     *          "microloader": {
     *              "path": "microloader.js",
     *              "embed": true,
     *              "enable": true
     *          },
     *          "manifest": {
     *              "path": "app.json",
     *              "embed": false,
     *              "enable": "$\u007bapp.output.microloader.enable}"
     *          },
     *          "resources": "resources",
     *          "slicer": {
     *              "path": "$\u007bapp.output.resources}/images",
     *              "enable": false
     *          }
     *      }
     *
     */
    "output": {
        "base": "$\u007bworkspace.build.dir}/$\u007bbuild.environment}/$\u007bapp.name}"
    },

    /**
     * Used to automatically generate cache.manifest (HTML 5 application cache manifest) file when you build
     */
    "appCache": {
        /**
         * List of items in the CACHE MANIFEST section
         */
        "cache": [
            "index.html"
        ],
        /**
         * List of items in the NETWORK section
         */
        "network": [
            "*"
        ],
        /**
         * List of items in the FALLBACK section
         */
        "fallback": []
    },

    /**
     * Extra resources to be copied along when build
     */
    "resources": [
    ],

    /**
     * File / directory name matchers to ignore when copying to the builds, must be valid regular expressions
     */
    "ignore": [
        "(^|/)CVS(/?$|/.*?$)",
        "resources/sass"
    ],

    /**
     * Directory path to store all previous production builds. Note that the content generated inside this directory
     * must be kept intact for proper generation of deltas between updates
     */
    "archivePath": "archive",

    /**
     * Uniquely generated id for this application, used as prefix for localStorage keys.
     * Normally you should never change this value.
     */
    "id": "{uniqueId}"
}