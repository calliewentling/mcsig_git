"use strict";

var Fashion = require('../../export/Base.js');
var BaseSelectorList = require('./BaseSelectorList.js');

class MultiPartSelector extends BaseSelectorList {
    constructor(items, parent) {
        super(items, ' ');
        if (parent) {
            this.setParent(parent);
        }
        this._superSelectorMap = {};
    }

    doVisit(visitor) {
        visitor.multipartselector(this);
    }

    descend(visitor) {
        for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];
            item && visitor.visit(item);
        }
    }

    clone(match, replace) {
        if (match && match === this.toString()) {
            return replace.clone();
        }
        var cloned = new MultiPartSelector(this.cloneItems(match, replace));
        if (this.parent) {
            cloned.setParent(this.parent.clone(match, replace));
        }
        cloned.skipParentPrepend = this.skipParentPrepend;
        return cloned;
    }

    /**
     * returns:
     *  1 == this isSuperSelector of other
     * -1 == other isSuperSelector of this
     *  0 == different
     */
    calcIsSuperSelector(selector) {
        var items = this.items,
            sItems = selector.items,
            shortList = items,
            longList = sItems,
            res = 1,
            tmpRes;

        if (items.length > sItems.length) {
            shortList = sItems;
            longList = items;
            res = -1;
        }

        if (this.parent) {
            if (!selector.parent) {
                return 0;
            }
            tmpRes = this.parent.isSuperSelector(selector.parent);
            if (res !== tmpRes) {
                return 0;
            }
        } else if (selector.parent) {
            return 0;
        }


        for (var i = 0; i < shortList.length; i++) {
            //tmpRes = shortList[i].isSuperSelector(longList[i]);
            var tmpRes;
            if (tmpRes === 0) {
                return 0;
            } else if (tmpRes !== res) {
                return 0;
            }
        }
        return res;
    }

    isSuperSelector(selector) {
        var key = selector,
            map = this._superSelectorMap,
            result = map[key];

        if (result === undefined) {
            result = this.calcIsSuperSelector(selector);
            map[key] = result;
        }

        return result;
    }

    removeAtRoot() {
        var items = Fashion.filter(this.items, (item) => {
            return item.toString() !== '@at-root';
        });
        if (items.length) {
            this.items = items;
            return this;
        }
        return null;
    }

    
    flatten () {
        var items = this.items,
            len = items.length,
            newItems = [],
            item;
        for (var i = 0; i < len; i++) {
            item = items[i];
            while (item && item.visitTarget) {
                item = item.visitTarget;
            }
            if (item) {
                if (item.$isFashionMultiPartSelector) {
                    newItems.push.apply(newItems, item.flatten());
                }
                else {
                    if (item.$isFashionCompoundSelector) {
                        item.flatten();
                    }
                    newItems.push(item);
                }
            }
        }
        this.items = newItems;
        return newItems;
    }
    
}

Fashion.apply(MultiPartSelector.prototype, {
    $isFashionMultiPartSelector: true,
    type: 'multipartselector',
    parent: null,
    _superSelectorMap: null
});

module.exports = MultiPartSelector;