"use strict";

var Fashion = require('../../export/Base.js');
var BaseSelector = require('./BaseSelector.js');
var BaseSelectorList = require('./BaseSelectorList.js');
var SelectorPart = require('./SelectorPart.js');
var Literal = require('../../export/type/Literal.js');

class CompoundSelector extends BaseSelector {
    constructor(items, preserve) {
        super();
        this.items = items;
        this.preserve = preserve;
        this._superSelectorMap = {};
    }

    doVisit(visitor) {
        visitor.compoundselector(this);
    }

    descend(visitor) {
        for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];
            item && visitor.visit(item);
        }
    }

    cloneItems(match, replace) {
        var cloned = [];
        for (var i = 0; i < this.items.length; i++) {
            cloned.push(this.items[i].clone(match, replace));
        }
        return cloned;
    }

    clone(match, replace) {
        if (match && match === this.toString()) {
            return replace.clone();
        }
        var cloned = new CompoundSelector(this.cloneItems(match, replace));
        if (this.parent) {
            cloned.setParent(this.parent.clone(match, replace));
        }
        return cloned;
    }

    setItems (items) {
        this.items = items;
        this._hash = null;
    }

    toString() {
        return this.items.join('');
    }

    hasPlaceholder() {
        for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];
            if (item instanceof SelectorPart) {
                if (item.selectorType === 'placeholder') {
                    return true;
                }
            }
        }
        if (this.parent) {
            var parent = this.parent;
            return parent.hasPlaceholder && parent.hasPlaceholder();
        }
        return false;
    }

    flatten() {
        if (!this.flattened) {
            this.flattened = true;
            var flattened = [],
                map = {};

            for (var i = 0; i < this.items.length; i++) {
                var item = this.items[i];
                if (item instanceof CompoundSelector) {
                    var sel = item,
                        selItems = sel.flatten() && sel.items;
                    for (var s = 0; s < selItems.length; s++) {
                        var sItem = selItems[s];
                        sItem.position = flattened.length;
                        if (!map[sItem.toString()]) {
                            flattened.push(sItem);
                            map[sItem.toString()] = true;
                        }
                    }
                } else if (item instanceof BaseSelectorList) {
                    var list = item;
                    if (list.items.length == 1) {
                        var sItem = list.items[0];
                        sItem.position = flattened.length;
                        if (!map[sItem.toString()]) {
                            flattened.push(sItem);
                            map[sItem.toString()] = true;
                        }
                    } else {
                        var sItem = item;
                        item.position = flattened.length;
                        if (!map[sItem.toString()]) {
                            flattened.push(sItem);
                            map[sItem.toString()] = true;
                        }
                    }
                } else {
                    var sItem = item;
                    sItem.position = flattened.length;
                    if (!map[sItem.toString()] || item.$isFashionLiteral || item.$isFashionNumber) {
                        flattened.push(sItem);
                        map[sItem.toString()] = true;
                    }
                }
            }

            this.items = flattened;
        }
        this._hash = null;
        return this;
    }

    sort() {
        if (!this.sorted) {
            this.sorted = true;
            this.flatten();
            this.items.sort((a, b) => {
                var aIsPart = (a instanceof SelectorPart),
                    bIsPart = (b instanceof SelectorPart),
                    aIsSelector = (a instanceof BaseSelector),
                    bIsSelector = (b instanceof BaseSelector),
                    aVal = a.toString(),
                    bVal = b.toString(),
                    aPart, bPart;


                // ensure that if either component of the comparison is one of the
                // operators that we maintain the original ordering
                if (CompoundSelector.excludeSortOps[aVal] ||
                    CompoundSelector.excludeSortOps[bVal]) {
                    return a.position - b.position;
                }

                if (bIsSelector) {
                    if (!aIsSelector) {
                        if (a instanceof Fashion.Literal) {
                            if (a.toString().indexOf('-') === 0) {
                                return 1;
                            }
                        }
                        if (!CompoundSelector.excludeSortOps[bVal]) {
                            return -1;
                        }
                    }

                    if (bIsPart) {
                        if (!aIsPart) {
                            return -1;
                        }
                        aPart = a;
                        bPart = b;

                        var res = aPart.getTypePriority() - bPart.getTypePriority();
                        if (res === 0) {
                            return aPart.position - bPart.position;
                        }
                        return res;
                    } else {
                        if (aIsPart) {
                            return 1;
                        }
                    }
                } else if (aIsSelector) {
                    if (!CompoundSelector.excludeSortOps[aVal]) {
                        return 1;
                    }
                    // } else if(b instanceof Fashion.Literal) {
                    //if(a instanceof Fashion.Literal) {
                    //    var aVal = a.toString();
                    //    var bVal = b.toString();
                    //    return aVal.localeCompare(bVal);
                    //}
                }


                return a.position - b.position;
            });
        }
        this._hash = null;
        return this;
    }

    base() {
        var first = this.first();
        if (first instanceof Literal) {
            return first;
        }
        if (first instanceof SelectorPart) {
            if (first.selectorType === 'wildcard') {
                return first;
            }
        }
        return null;
    }

    _getHash() {
        var base = this.base(),
            rest = this.rest(),
            parts = [];

        for (var r = 0; r < rest.length; r++) {
            parts.push(rest[r].getHash());
        }

        parts = parts.sort();
        if (base) {
            parts.unshift(base.getHash());
        }
        return parts.join('');
    }

    rest() {
        var base = this.base(),
            rest = Fashion.filter(this.items, function(item) {
                return base ? item !== base : true;
            });
        return rest;
    }

    isSuperSelector(selector) {
        var key = selector,
            map = this._superSelectorMap,
            result = map[key];

        if (result === undefined) {
            result = this.isSubset(selector);
            map[key] = result;
        }
        return result;
    }

    /**
     * returns:
     *  1 == this is subset of other
     * -1 == other is subset of this
     *  0 == different
     */
    isSubset(selector) {
        var items = this.items,
            sItems = selector.items,
            longItemMap = {},
            shortList = items,
            longList = sItems,
            item,
            res = 1;

        if (items.length > sItems.length) {
            shortList = sItems;
            longList = items;
            res = -1;
        }

        for (var i = 0; i < longList.length; i++) {
            item = longList[i];
            longItemMap[item.toString()] = item;
        }

        for (var i = 0; i < shortList.length; i++) {
            item = shortList[i];
            if (!longItemMap[item.toString()]) {
                return 0;
            }
        }

        return res;
    }
}

CompoundSelector.excludeSortOps = {
    '&': true,
    '*': true,
    '~': true,
    '>': true,
    '|': true,
    '+': true
};

Fashion.mixin(CompoundSelector, Fashion.BaseSet);

Fashion.apply(CompoundSelector.prototype, {
    type: 'compoundselector',
    $isFashionCompoundSelector: true,
    $canUnbox: false,
    items: null,
    preserve: false,
    flattened: false,
    sorted: false,
    _superSelectorMap: null
});

module.exports = CompoundSelector;