"use strict";

var Fashion = require('../export/Base.js');
var Type = require('./../export/type/Type.js');
var MultiPartSelector = require('./selectors/MultiPartSelector.js');
var SelectorList = require('./selectors/SelectorList.js');

class Ruleset extends Type {
    constructor(cfg) {
        super();
        if (cfg) {
            Fashion.apply(this, cfg);
        }
        this.children = [];
        this.selectors = this.selectors || new SelectorList([]);
        this.declarations = this.declarations || [];
    }

    doVisit(visitor) {
        visitor.ruleset(this);
    }

    descend(visitor) {
        visitor.visit(this.selectors);
        visitor.visit(this.declarations);
        visitor.visit(this.children);
    }

    addDeclaration(declaration, index) {
        declaration.ruleset = this;
        if (typeof index === 'undefined') {
            this.declarations.push(declaration);
        } else {
            this.declarations.splice(index, 0, declaration);
        }
    }

    getDeclarationIndex(decl) {
        for (var i = 0; i < this.declarations.length; i++) {
            if (this.declarations[i] === decl) {
                return i;
            }
        }
        return -1;
    }

    removeDeclaration(decl) {
        this.declarations = Fashion.filter(this.declarations, (d) => d !== decl);
    }

    lastDeclaration() {
        return (this.declarations.length && this.declarations[this.declarations.length - 1]) || null
    }

    addChildRuleset(ruleset) {
        this.children.push(ruleset);
    }

    removeChildRuleset(child) {
        this.children = Fashion.filter(this.children, (item) => item !== child);
    }

    getFirstSelector() {
        // SelectorList -> MultiPartSelector -> CompoundSelector
        var selectors = this.selectors;
        if (selectors instanceof SelectorList) {
            selectors = selectors.items[0];
        }
        if (selectors instanceof MultiPartSelector) {
            selectors = selectors.items[0];
        }
        return selectors;
    }

    getFirstSelectorStr() {
        if (this._firstSelectorStr === undefined) {
            this._firstSelectorStr = this.getFirstSelector() + '';
        }
        return this._firstSelectorStr;
    }

    isAtRule() {
        return this.getFirstSelectorStr().indexOf('@') === 0;
    }

    isMedia() {
        return this.getFirstSelectorStr().indexOf('@media') === 0;
    }

    isKeyFrames() {
        return this.getFirstSelectorStr().indexOf('@keyframes') === 0 ||
            this.getFirstSelectorStr().indexOf('@-webkit-keyframes') === 0;
    }

    isPage() {
        return this.isAtRule() && this.getFirstSelectorStr().indexOf("@page") === 0;
    }

    isAtRoot() {
        return this.isAtRule() && this.getFirstSelectorStr().indexOf("@at-root") === 0;
    }

    isDirective() {
        return this.isAtRule() && !this.isMedia() &&
            this.declarations.length === 0 &&
            this.children.length === 0;
    }

    printAtRoot() {
        return this.isMedia() || this.isAtRoot();
    }
}

Fashion.apply(Ruleset.prototype, {
    type: 'ruleset',
    $isFashionRuleset: true,
    $canUnbox: false,

    declarations: null,
    selectors: null,
    sourceInfo: null,
    blockDocs: null,
    parent: null,
    isNamespaced: null,
    children: null,
    extend: null,

    isAtDirective: null,
    atDirectiveName: null,
    atDirectiveValue: null,
    isMediaRoot: null,
    hasBlock: null,
    _firstSelectorStr: undefined
});

module.exports = Ruleset;