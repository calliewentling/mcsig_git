"use strict";

var Color = require('../export/type/Color.js');

module.exports = {
    init(runtime) {
        runtime.register({
            adjust_color: function (color, red, green, blue, hue, saturation, lightness, alpha) {
                var adjusted = color.getRGBA().copy(),
                    adjust = Color.adjust,
                    comps = Color.comps;

                red && (adjusted[comps.red] += red.value);
                blue && (adjusted[comps.blue] += blue.value);
                green && (adjusted[comps.green] += green.value);

                adjusted[comps.red] = Math.max(0, Math.min(adjusted[comps.red], 255));
                adjusted[comps.blue] = Math.max(0, Math.min(adjusted[comps.blue], 255));
                adjusted[comps.green] = Math.max(0, Math.min(adjusted[comps.green], 255));
                
                alpha && (adjusted[comps.alpha] = Math.max(0, Math.min(1, adjusted[comps.alpha] + alpha.value)));
                hue && (adjusted = adjust(adjusted, 'hue', hue));
                lightness && (adjusted = adjust(adjusted, 'lightness', lightness));
                saturation && (adjusted = adjust(adjusted, 'saturation', saturation));

                return adjusted;
            },

            scale_color: function () {
            },


            change_color: function (color, red, green, blue, hue, saturation, lightness, alpha) {
                var adjusted = color.getRGBA().clone(),
                    adjust = Color.adjust,
                    comps = Color.comps;

                red && (adjusted[comps.red] = red.value);
                blue && (adjusted[comps.blue] = blue.value);
                green && (adjusted[comps.green] = green.value);

                adjusted[comps.red] = Math.max(0, Math.min(adjusted[comps.red], 255));
                adjusted[comps.blue] = Math.max(0, Math.min(adjusted[comps.blue], 255));
                adjusted[comps.green] = Math.max(0, Math.min(adjusted[comps.green], 255));

                alpha && (adjusted[comps.alpha] = Math.max(0, Math.min(1, alpha.value)));
                hue && (adjusted = adjusted.getHSLA()) && (adjusted.h = hue.value);
                lightness && (adjusted = adjusted.getHSLA()) && (adjusted.l = lightness.value);
                saturation && (adjusted = adjusted.getHSLA()) && (adjusted.s = saturation.value);

                return adjusted;
            },

            // def ie_hex_str(color)
            //   assert_type color, :Color
            //   alpha = (color.alpha * 255).round
            //   alphastr = alpha.to_s(16).rjust(2, '0')
            //   Sass::Script::String.new("##{alphastr}#{color.send(:hex_str)[1..-1]}".upcase)
            // end
            ie_hex_str: function (color) {

                if (color.type !== 'hsla' && color.type !== 'rgba') {
                    throw color + ' is not a color for \'ie-hex-str\'';
                }
                return color.toIeHexStr();
            }
        });
    }
};
