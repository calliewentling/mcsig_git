/*
 * Copyright (c) 2012-2016. Sencha Inc.
 */

"use strict";

var Fashion = require('../Base.js');
var Type = require('./Type.js');

class List extends Type {
    constructor(items, separator) {
        super();
        this.items = items || [];
        this.separator = typeof separator === 'undefined' ? ' ' : separator;
    }

    doVisit(visitor) {
        visitor.list(this);
    }

    descend(visitor) {
        for (var i = 0; i < this.items.length; i++) {
            visitor.visit(this.items[i]);
        }
    }

    copy() {
        var items = this.items,
            len = items.length,
            newItems = [];
        for (var i = 0; i < len; i++) {
            newItems.push(items[i].clone());
        }
        return new List(newItems, this.separator);
    }

    clone(match, replace) {
        if (replace && this.matches(match)) {
            return replace.clone();
        }
        var items = this.items,
            len = items.length,
            newItems = [];

        for (var i = 0; i < len; i++) {
            var item = items[i];
            if (item) {
                newItems.push(item.clone(match, replace));
            }
            else {
                newItems.push(item);
            }
        }

        var copy = new List(newItems, this.separator);
        copy.$referenceName = this.$referenceName;
        copy.$referenceBase = this.$referenceBase;
        copy.$previousReference = this.$previousReference;
        return copy;
    }

    add(item) {
        return this.items.push(item);
    }

    get(index) {
        return this.items[index - 1] || null;
    }

    operate(operation, right) {
        switch (operation) {
            case '!=':
                if (right.$isFashionLiteral) {
                    if (right.value === 'null' || right.value === 'none') {
                        return true;
                    }
                }
                break;

            case '==':
                if (right.$isFashionLiteral) {
                    if (right.value === 'null' || right.value === 'none') {
                        return false;
                    }
                }
                break;
        }

        return super.operate(operation, right);
    }

    supports(prefix) {
        for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];

            if (item.supports(prefix)) {
                return true;
            }
        }

        return false;
    }

    toBoolean() {
        return !!this.items.length;
    }

    getItems() {
        return this.items;
        // return Fashion.filter(this.items, (item) => {
        //     var unboxed = Type.unbox(item);
        //     return unboxed !== null && unboxed !== undefined;
        // });
    }

    toString() {
        return this.items.join(this.separator);
    }

    unquote() {
        var items = [],
            item;
        for (var i = 0; i < this.items.length; i++) {
            item = this.items[i];
            if (item) {
                items.push(item.unquote());
            }
            else {
                items.push(item);
            }
        }
        return new List(items, this.separator);
    }

    toPrefixedString(prefix) {
        var items = [];
        for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];
            if (item) {
                items.push(item.toPrefixedString(prefix));
            }
        }
        return items.join(this.separator);
    }

    //----------------------------------------------------------------------
    // Operations

    '==.list'(right) {
        var equals = this.separator == right.separator &&
            this.items.length == right.items.length;

        for (var i = 0; equals && i < this.items.length; ++i) {
            equals = this.items[i].operate("==", right.items[i]);
        }

        return equals;
    }
}

Fashion.apply(List.prototype, {
    type: 'list',
    $isFashionList: true,
    items: null,
    separator: null
});

module.exports = List;