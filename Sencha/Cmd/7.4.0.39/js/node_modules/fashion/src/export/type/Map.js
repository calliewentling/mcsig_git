/*
 * Copyright (c) 2012-2016. Sencha Inc.
 */

"use strict";

var Fashion = require('../Base.js');
var List = require('./List.js');
var Type = require('./Type.js');
var Literal = require('./Literal.js'),
    Null = Literal.Null;

var Numeric = require('./Numeric.js');

class Map extends List {
    constructor(pairs) {
        super(pairs);
        this.map = {};
        if (pairs) {
            for (var i = 0; i < pairs.length - 1; i += 2) {
                var key = this.toKey(pairs[i]),
                    value = pairs[i + 1];
                this.map[key] = i + 1;
            }
        }
    }

    doVisit(visitor) {
        visitor.map(this);
    }

    descend(visitor) {
        for (var i = 0; i < this.items.length; i++) {
            visitor.visit(this.items[i]);
        }
    }

    get(key) {
        if (key instanceof Numeric) {
            key = Type.unbox(key);
        }

        if (typeof key === 'number') {
            return new List([
                this.items[(2 * key) - 2],
                this.items[(2 * key) - 1]
            ], ' ');
        }

        key = this.toKey(key);
        return this.items[this.map[key]] || Null;
    }

    getItems() {
        var values = [];
        for (var i = 0; i < this.items.length - 1; i += 2) {
            var key = this.toKey(this.items[i]);
            values.push(this.map[key]);
        }
        return values;
    }

    put(key, value) {
        var keyStr = this.toKey(key);
        if (!this.map.hasOwnProperty(keyStr)) {
            this.items.push(key, value);
            this.map[keyStr] = this.items.length - 1;
        } else {
            this.items[this.map[keyStr]] = value;
        }
    }

    toString() {
        var str = '',
            count = 0;
        for (var i = 0; i < this.items.length - 1; i += 2) {
            var key = this.toKey(this.items[i]),
                value = this.map[key];
            if (value) {
                if (count > 0) {
                    str += ', ';
                }
                str += key + ": " + value.toString();
                count++;
            }
        }
        return str;
    }

    toKey(key) {
        return this.unquoteKey(key).toString();
    }

    unquoteKey(string) {
        if (string.$isFashionType) {
            return string.unquote();
        }
        return string;
    }
    
    remove(key) {
        key = this.toKey(key);
        if (this.map[key]) {
            var idx = this.map[key];
            delete this.items[idx-1]; 
            delete this.items[idx]; 
            delete this.map[key];
        }
    }
    
    getKeys() {
        var keys = [];
        for (var i = 0; i < this.items.length; i+=2) {
            var k = this.items[i];
            if (k) {
                keys.push(k);
            }
        }
        return keys;
    }
    
    getValues() {
        var values = [];
        for (var i = 1; i < this.items.length; i+=2) {
            var v = this.items[i];
            if (v) {
                values.push(v);
            }
        }
        return values;
    }
    
    hasKey(key) {
        key = this.toKey(key);
        if (this.map.hasOwnProperty(key)) {
            return true;
        }
        return false;
    }
}

Fashion.apply(Map.prototype, {
    type: "map",
    $isFashionMap: true,
    $canUnbox: false,
    map: null
});

module.exports = Map;