/*
 * Copyright (c) 2012-2016. Sencha Inc.
 */

"use strict";

var Fashion = require('../Base.js');
var Color = require('./Color.js');
var ColorRGBA = require('./ColorRGBA.js');

class ColorHSLA extends Color {
    constructor(h, s, l, a) {
        super();
        this.h = Color.constrainDegrees(h);
        this.s = s;
        this.l = l;
        if (a !== undefined) {
            this.a = a;
        }
    }

    doVisit(visitor) {
        visitor.hsla(this);
    }

    operate(operation, right) {
        return this.getRGBA().operate(operation, right);
    }

    copy() {
        return new ColorHSLA(this.h, this.s, this.l, this.a);
    }

    getRGBA() {
        return ColorRGBA.fromHSLA(this);
    }

    toString() {
        return this.getRGBA().toString();
    }

    add(h, s, l, a) {
        return new ColorHSLA(
            Color.constrainDegrees(this.h + h),
            Color.constrainPercentage(this.s + s),
            Color.constrainPercentage(this.l + l),
            Color.constrainAlpha(this.a * a)
        );
    }

    subtract(h, s, l) {
        return this.add(-h, -s, -l);
    }

    adjustLightness(percent) {
        this.l = Color.constrainPercentage(this.l + percent);
        return this;
    }

    adjustHue(deg) {
        this.h = Color.constrainDegrees(this.h + deg);
        return this;
    }

    static fromRGBA(rgba) {
        if (rgba.$isFashionHSLA) {
            return rgba.clone();
        }

        var r = rgba.r / 255,
            g = rgba.g / 255,
            b = rgba.b / 255,
            a = rgba.a,
            max = Math.max(r, g, b),
            min = Math.min(r, g, b),
            delta = max - min,
            h = 0,
            s = 0,
            l = 0.5 * (max + min);

        // min==max means achromatic (hue is undefined)
        if (min != max) {
            s = (l < 0.5) ? delta / (max + min) : delta / (2 - max - min);
            if (r == max) {
                h = 60 * (g - b) / delta;
            } else if (g == max) {
                h = 120 + 60 * (b - r) / delta;
            } else {
                h = 240 + 60 * (r - g) / delta;
            }
            if (h < 0) {
                h += 360;
            }
            if (h >= 360) {
                h -= 360;
            }
        }

        return new ColorHSLA(
            Color.constrainDegrees(h),
            Color.constrainPercentage(s * 100),
            Color.constrainPercentage(l * 100),
            a
        );
    }
}

ColorRGBA.prototype.getHSLA = function () {
    return ColorHSLA.fromRGBA(this);
};

Fashion.apply(ColorHSLA.prototype, {
    type: 'hsla',
    $isFashionHSLA: true,
    h: null,
    s: null,
    l: null,
    a: 1
});

module.exports = ColorHSLA;
