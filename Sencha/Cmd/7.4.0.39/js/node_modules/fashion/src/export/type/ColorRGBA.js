/*
 * Copyright (c) 2012-2016. Sencha Inc.
 */

"use strict";

var Fashion = require('../Base.js');
var Color = require('./Color.js');

function hex2(v) {
    var s = v.toString(16);
    if (s.length < 2) {
        s = '0' + s;
    }
    return s;
}

class ColorRGBA extends Color {
    constructor(r, g, b, a) {
        super();
        this.r = Math.min(0xff, Math.max(0, r));
        this.g = Math.min(0xff, Math.max(0, g));
        this.b = Math.min(0xff, Math.max(0, b));
        if (a !== undefined) {
            this.a = Math.min(1.0, Math.max(0.0, a));
        }
    }

    doVisit(visitor) {
        visitor.rgba(this);
    }

    copy() {
        return new ColorRGBA(this.r, this.g, this.b, this.a);
    }

    getHSLA() {
        return null;
    }

    stringify() {
        var me = this,
            round = Math.round,
            r = round(me.r),
            g = round(me.g),
            b = round(me.b),
            a = me.a,
            stringified = '';

        // If there is no transparency we will use hex value
        if (a === 1) {
            stringified = '#' + hex2(r) + hex2(g) + hex2(b);
        } else {
            // Else use rgba
            stringified = 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';
        }

        stringified = stringified.toLowerCase();
        return stringified;
    }

    getCompressedValue(lowerVal) {
        var name = ColorRGBA.stringifiedMap[lowerVal],
            shortName = ColorRGBA.shortFormMap[lowerVal];

        if (name) {
            lowerVal = (lowerVal.length > name.length)
                ? name
                : lowerVal;
        }

        if (ColorRGBA.useShortValues && shortName) {
            lowerVal = (lowerVal.length > shortName.length)
                ? shortName
                : lowerVal;
        }

        return lowerVal;
    }

    toString() {
        if (!this.stringified) {
            this.stringified = this.getCompressedValue(this.stringify());
        }
        return this.stringified;
    }

    toIeHexStr() {
        var me = this,
            round = Math.round,
            r = round(me.r),
            g = round(me.g),
            b = round(me.b),
            a = round(0xff * me.a);

        return '#' + hex2(a) + hex2(r) + hex2(g) + hex2(b);
    }

    add(r, g, b, a) {
        return new ColorRGBA(
            this.r + r,
            this.g + g,
            this.b + b,
            this.a * a
        );
    }

    subtract(r, g, b) {
        return new ColorRGBA(
            this.r - r,
            this.g - g,
            this.b - b,
            this.a
        );
    }

    multiply(number) {
        return new ColorRGBA(
            this.r * number,
            this.g * number,
            this.b * number,
            this.a
        );
    }

    divide(number) {
        return new ColorRGBA(
            this.r / number,
            this.g / number,
            this.b / number,
            this.a
        );
    }

    static fromHex(value) {
        if (value.charAt(0) == '#') {
            value = value.substr(1);
        }

        var r, g, b;

        if (value.length === 3) {
            r = parseInt(value.charAt(0), 16);
            g = parseInt(value.charAt(1), 16);
            b = parseInt(value.charAt(2), 16);

            r = (r << 4) + r;
            g = (g << 4) + g;
            b = (b << 4) + b;
        } else {
            r = parseInt(value.substring(0, 2), 16);
            g = parseInt(value.substring(2, 4), 16);
            b = parseInt(value.substring(4, 6), 16);
        }

        var result = new ColorRGBA(r, g, b);
        if (ColorRGBA.preserveInputStrings) {
            result.stringified = "#" + value;
        }
        return result;
    }

    static fromHSLA(color) {
        if (color.$isFashionRGBA) {
            return color.clone();
        }

        var hsla = color,
            h = hsla.h / 360,
            s = hsla.s / 100,
            l = hsla.l / 100,
            a = hsla.a;

        var m2 = (l <= 0.5) ? (l * (s + 1)) : (l + s - l * s),
            m1 = l * 2 - m2;

        function hue(h) {
            if (h < 0) ++h;
            if (h > 1) --h;
            if (h * 6 < 1) return m1 + (m2 - m1) * h * 6;
            if (h * 2 < 1) return m2;
            if (h * 3 < 2) return m1 + (m2 - m1) * (2 / 3 - h) * 6;
            return m1;
        }

        var r = Color.constrainChannel(hue(h + 1 / 3) * 0xff),
            g = Color.constrainChannel(hue(h) * 0xff),
            b = Color.constrainChannel(hue(h - 1 / 3) * 0xff);

        return new ColorRGBA(r, g, b, a);
    }
}

Fashion.apply(ColorRGBA, {
    stringifiedMap: {
        'rgba(0, 0, 0, 0)': 'transparent'
    },

    shortFormMap: {},

    useShortValues: true,
    preserveInputStrings: false
});

Fashion.apply(ColorRGBA.prototype, {
    type: 'rgba',
    $isFashionRGBA: true,
    r: null,
    g: null,
    b: null,
    a: 1,
    stringified: null,

    "+.number": function (right) {
        var value = right.value,
            unit = right.unit;

        switch (unit) {
            case '%':
                return this.getHSLA().adjustLightness(value).getRGBA();
            case 'deg':
                return this.getHSLA().adjustHue(value).getRGBA();
            default:
                return this.add(value, value, value, 1);
        }
    },

    "+.rgba": function (right) {
        return this.add(right.r, right.g, right.b, right.a);
    },

    "+.hsla": function (right) {
        return this.getHSLA().add(right.h, right.s, right.l);
    },

    "-.number": function (right) {
        var value = right.value,
            unit = right.unit;
        switch (unit) {
            case '%':
                return this.getHSLA().adjustLightness(-value).getRGBA();
            case 'deg':
                return this.getHSLA().adjustHue(-value).getRGBA();
            default:
                return this.subtract(value, value, value);
        }
    },

    "-.rgba": function (right) {
        return this.subtract(right.r, right.g, right.b);
    },

    "-.hsla": function (right) {
        return this.getHSLA().subtract(right.h, right.s, right.l);
    },

    "*.number": function (right) {
        return this.multiply(right.value);
    },

    "/.number": function (right) {
        return this.divide(right.value);
    },

    "*.rgba": function (right) {
        return new ColorRGBA(
            this.r * right.r,
            this.g * right.g,
            this.b * right.b,
            this.a * right.a
        );
    },

    "/.rgba": function (right) {
        return new ColorRGBA(
            Math.floor(this.r / right.r),
            Math.floor(this.g / right.g),
            Math.floor(this.b / right.b),
            Math.floor(this.a / right.a)
        );
    }
});

module.exports = ColorRGBA;

(function (ColorRGBA, stringifiedMap, colorMap, shortMap) {
    var colorChars = [
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            'a', 'b', 'c', 'd', 'e', 'f'
        ],
        names = Object.keys(colorMap),
        i;

    names.sort();
    for (i = 0; i < names.length; i++) {
        var name = names[i],
            val = colorMap[name],
            color = new ColorRGBA(val[0], val[1], val[2], val[3]),
            str = color.stringify();

        stringifiedMap[str] = name;
    }

    colorChars.forEach(function (short1) {
        var long1 = short1 + short1;
        colorChars.forEach(function (short2) {
            var long2 = short2 + short2;
            colorChars.forEach(function (short3) {
                var long3 = short3 + short3,
                    shortName = '#' + short1 + short2 + short3,
                    longName = '#' + long1 + long2 + long3;

                if (shortMap[longName]) {
                    var curr = shortMap[longName];
                    shortName = (curr.length > shortName.length) ? shortName : curr;
                    //if(curr.indexOf("#") === 0) {
                    //    short = (curr.length > short.length) ? short : curr;
                    //} else {
                    //    short = curr;
                    //}
                }
                shortMap[longName] = shortName;
            });
        });
    });

})(ColorRGBA, ColorRGBA.stringifiedMap, Color.map, ColorRGBA.shortFormMap);
