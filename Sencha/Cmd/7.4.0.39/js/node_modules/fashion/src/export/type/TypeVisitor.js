"use strict";

var Fashion = require('../Base.js');

class TypeVisitor {
    constructor(cfg) {
        if (cfg) {
            Fashion.apply(this, cfg);
        }
    }

    literal(obj) {
        obj.descend(this);
    }

    bool(obj) {
        obj.descend(this);
    }

    string(obj) {
        obj.descend(this);
    }

    number(obj) {
        obj.descend(this);
    }

    map(obj) {
        obj.descend(this);
    }

    functioncall(obj) {
        obj.descend(this);
    }

    parenthetical(obj) {
        obj.descend(this);
    }

    list(obj) {
        obj.descend(this);
    }

    hsla(obj) {
        obj.descend(this);
    }

    rgba(obj) {
        obj.descend(this);
    }

    colorstop(obj) {
        obj.descend(this);
    }

    lineargradient(obj) {
        obj.descend(this);
    }

    radialgradient(obj) {
        obj.descend(this);
    }

    visitItem(obj) {
        obj.doVisit(this);
    }

    visit(obj) {
        while (obj && (obj.visitTarget !== undefined)) {
            obj = obj.visitTarget
        }
        if (obj) {
            if (Array.isArray(obj)) {
                for (var i = 0; i < obj.length; i++) {
                    this.visit(obj[i]);
                }
            } else {
                this.visitItem(obj);
            }
        }
    }

    /**
     * this is an extension point for allowing overrides of the entry visit method
     * when called duing the post-processing mechanism in CSS.ts
     * @param obj
     */
    execute(obj, context) {
        this.visit(obj);
    }
}

TypeVisitor.prototype.context = null;

module.exports = TypeVisitor;
