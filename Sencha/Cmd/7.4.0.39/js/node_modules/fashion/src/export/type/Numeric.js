/*
 * Copyright (c) 2012-2016. Sencha Inc.
 */

"use strict";

var Fashion = require('../Base.js');
var Type = require('./Type.js');
var Bool = require('./Bool.js');
var Literal = require('./Literal.js');

class Numeric extends Type {
    constructor(value, unit, numeratorUnits, denominatorUnits) {
        super();
        this.value = value;
        this.unit = unit;
        if (unit && !numeratorUnits) {
            this.numeratorUnits = [unit];
        } else {
            this.numeratorUnits = numeratorUnits || [];
        }
        this.denominatorUnits = denominatorUnits || [];
    }

    doVisit(visitor) {
        visitor.number(this);
    }

    unitless() {
        if (this.numeratorUnits && this.numeratorUnits.length) {
            return false;
        }

        if (this.denominatorUnits && this.denominatorUnits.length) {
            return false;
        }

        return true;
    }

    getUnitStr() {
        this.normalizeUnits();
        var unitStr = this.numeratorUnits.join('*');
        if (this.denominatorUnits.length) {
            unitStr += '/' + this.denominatorUnits.join('*');
        }
        return unitStr;
    }

    _getHash() {
        return this.value;
    }

    stringify() {
        this.normalizeUnits();

        var value = this.value,
            valStr;

        // prevent 0.020000000000000004 type numbers in output
        valStr = (Math.round(value * 100000) / 100000) + '';
        //unitStr = valStr === '0' ? '' : this.getUnitStr();
        return valStr + this.getUnitStr();
    }

    toString() {
        return this.stringify();
    }

    toBoolean() {
        return this.unit ? true : !!this.value;
    }

    copy() {
        return new Numeric(this.value, this.unit);
    }

    '-.literal'(right) {
        if (this.value === 0 && this.unitless()) {
            return new Literal(['-', right.toString()].join(''));
        }
        return new Literal([this.toString(), '-', right.toString()].join(''));
    }

    '-.string'(right) {
        if (this.value === 0 && this.unitless()) {
            return new Literal(['-', right.toString()].join(''));
        }
        return new Literal([this.toString(), '-', right.toString()].join(''));
    }

    '-.number'(right) {
        var value = right.value;

        if (right.unit == '%' && right.unit !== this.unit) {
            value = this.value * (right.value / 100);
        }

        return new Numeric(this.value - value, this.unit || right.unit);
    }

    '+.literal'(right) {
        if (right.$isFashionString) {
            return new Literal([
                this.toString(),
                right.value
            ].join(''));
        }

        return new Literal([
            this.toString(),
            right.toString()
        ].join(''));
    }

    '+.number'(right) {
        var value = right.value;

        if (right.unit == '%' && right.unit !== this.unit) {
            value = this.value * (right.value / 100);
        }

        return new Numeric(this.value + value, this.unit || right.unit);
    }

    '/'(right) {
        return new Numeric(this.value / right.value,
            ((this.unit == right.unit) ? null : (this.unit || right.unit)));
    }

    '*'(right) {
        return new Numeric(this.value * right.value, this.unit || right.unit);
    }

    '%'(right) {
        return new Numeric(this.value % right.value, this.unit || right.unit);
    }

    '**'(right) {
        return new Numeric(Math.pow(this.value, right.value), this.unit || right.unit);
    }

    operate(operation, right) {
        var unit = this.unit || right.unit,
            normalized;

        if (right.$isFashionRGBA || right.$isFashionHSLA) {
            return new Literal(this + operation + right);
        }

        if (right.$isFashionNumber) {
            return this.numericOperate(operation, right);
        } else if (right.$isFashionLiteral) {
            normalized = this.tryCoerce(right);

            if (normalized) {
                return this.performOperation(operation, normalized);
            }
        }

        return super.operate(operation, right);
    }

    tryNormalize(other) {
        var value = other.value,
            unit = other.unit;

        if (other.$isFashionNumber) {
            switch (this.unit) {
                case 'mm':
                    switch (unit) {
                        case 'in':
                            return new Numeric(value * 25.4, 'mm');
                        case 'cm':
                            return new Numeric(value * 2.54, 'mm');
                    }
                    break;

                case 'cm':
                    switch (unit) {
                        case 'in':
                            return new Numeric(value * 2.54, 'cm');
                        case 'mm':
                            return new Numeric(value / 10, 'cm');
                    }
                    break;

                case 'in':
                    switch (unit) {
                        case 'mm':
                            return new Numeric(value / 25.4, 'in');
                        case 'cm':
                            return new Numeric(value / 2.54, 'in');
                    }
                    break;

                case 'ms':
                    switch (unit) {
                        case 's':
                            return new Numeric(value * 1000, 'ms');
                    }
                    break;

                case 's':
                    switch (unit) {
                        case 'ms':
                            return new Numeric(value / 1000, 's');
                    }
                    break;

                case 'Hz':
                    switch (unit) {
                        case 'kHz':
                            return new Numeric(value * 1000, 'Hz');
                    }
                    break;

                case 'kHz':
                    switch (unit) {
                        case 'Hz':
                            return new Numeric(value / 1000, 'kHz');
                    }
                    break;
                case '%':
                    switch (unit) {
                        default:
                            return new Numeric(value);
                    }
                default:
                    break;
            }
        }

        return undefined;
    }

    normalize(other) {
        var norm = this.tryNormalize(other);

        if (norm === undefined) {
            raise('Could not normalize ' + this + ' with ' + other);
        }

        return norm;
    }

    comparable(other) {
        var unit1 = this.unit,
            unit2 = other.unit;

        if (!other.$isFashionNumber) {
            return false;
        }

        return (
            (unit1 === unit2) ||
            (unit1 === 'mm' && (unit2 === 'in' || unit2 === 'cm')) ||
            (unit1 === 'cm' && (unit2 === 'in' || unit2 === 'mm')) ||
            (unit1 === 'in' && (unit2 === 'mm' || unit2 === 'cm')) ||
            (unit1 === 'ms' && unit2 === 's') ||
            (unit1 === 's' && unit2 === 'ms') ||
            (unit1 === 'Hz' && unit2 === 'kHz') ||
            (unit1 === 'kHz' && unit2 === 'Hz')
        );
    }

    //---------------------------------------------------------------

    normalizeUnits() {
        if (this.normalized) {
            return;
        }

        this.normalized = true;

        if (!this.unitless()) {
            var clean = this.removeCommonUnits(this.numeratorUnits, this.denominatorUnits),
                converted;

            //var num = [],
            //    den = [];
            //
            //for(var d = 0; d < clean.den.length; d++) {
            //    var dn = clean.den[d];
            //    if(this.convertable(dn)) {
            //        converted = false;
            //        for (var n = 0; n < clean.num.length; n++) {
            //            var nm = clean.num[n];
            //            if(this.convertable(nm)) {
            //                this.value = this.value / this.conversionFactor(dn, nm);
            //                converted = true;
            //            } else {
            //                num.push(nm);
            //            }
            //        }
            //        if(!converted) {
            //            den.push(dn);
            //        }
            //    }
            //}
            //
            //this.numeratorUnits = num;
            //this.denominatorUnits = den;

            clean.num = Fashion.filter(clean.num, function (val) {
                return !!val;
            });
            clean.den = Fashion.filter(clean.den, function (val) {
                return !!val;
            });
            this.numeratorUnits = clean.num;
            this.denominatorUnits = clean.den;
        }
    }

    numericOperate(operation, right) {
        this.normalizeUnits();
        right.normalizeUnits();

        var me = this,
            other = right,
            ops = Numeric.OPERATIONS,
            moreOps = Numeric.NON_COERCE_OPERATIONS,
            op = ops[operation],
            result;

        if (op) {
            try {
                if (me.unitless()) {
                    me = me.coerceUnits(other.numeratorUnits, other.denominatorUnits);
                } else {
                    other = other.coerceUnits(me.numeratorUnits, me.denominatorUnits);
                }
            } catch (e) {
                if (operation == '==') {
                    return Bool.False;
                }
                if (operation == '!=') {
                    return Bool.True;
                }
                throw e;
            }
        } else {
            op = moreOps[operation];
        }

        if (op) {
            result = op(me.value, other.value);
        }

        if (typeof result === 'number') {
            var units = this.computeUnits(me, other, operation);
            return new Numeric(result, (units.num.length ? units.num[0] : null), units.num, units.den);
        }

        return new Bool(result);
    }

    computeUnits(left, right, op) {
        switch (op) {
            case '*':
                return {
                    num: left.numeratorUnits.slice().concat(right.numeratorUnits),
                    den: left.denominatorUnits.slice().concat(right.denominatorUnits)
                };
            case '/':
                return {
                    num: left.numeratorUnits.slice().concat(right.denominatorUnits),
                    den: left.denominatorUnits.slice().concat(right.numeratorUnits)
                };
            default:
                return {
                    num: left.numeratorUnits,
                    den: left.denominatorUnits
                };
        }
    }

    coerceUnits(units, denominatorUnits) {
        var value = this.value;
        if (!this.unitless()) {
            value = value
                * this.coercionFactor(this.numeratorUnits, units)
                / this.coercionFactor(this.denominatorUnits, denominatorUnits);
        }
        return new Numeric(value, units && units[0], units, denominatorUnits);
    }

    coercionFactor(units, otherUnits) {
        var res = this.removeCommonUnits(units, otherUnits),
            fromUnits = res.num,
            toUnits = res.den;

        if (fromUnits.length !== toUnits.length || !this.convertable(fromUnits || toUnits)) {
            Fashion.raise('Incompatible units: ' + fromUnits.join('*') + ' and ' + toUnits.join('*'));
        }


        for (var i = 0; i < fromUnits.length; i++) {
            var fromUnit = fromUnits[i];
            for (var j = 0; j < toUnits.length; j++) {
                var toUnit = toUnits[j],
                    factor = this.conversionFactor(fromUnit, toUnit);

                if (factor !== null) {
                    return factor;
                }
            }
        }

        return 1;
    }

    conversionFactor(fromUnit, toUnit) {
        var cUnits = Numeric.CONVERTABLE_UNITS,
            cTable = Numeric.CONVERSION_TABLE,
            factor = null;

        if (cUnits[fromUnit]) {
            if (cUnits[toUnit]) {
                factor = cTable[cUnits[fromUnit]][cUnits[toUnit]];
            }
        }

        if (factor === null && cUnits[toUnit]) {
            if (cUnits[fromUnit]) {
                factor = 1.0 / cTable[cUnits[toUnit]][cUnits[fromUnit]];
            }
        }

        return factor;
    }

    convertable(units) {
        if (units && !Array.isArray(units)) {
            units = [units];
        }

        if (units && units.length) {
            var convertableUnits = Numeric.CONVERTABLE_UNITS;
            for (var i = 0; i < units.length; i++) {
                if (convertableUnits[units[i]] === undefined) {
                    return false;
                }
            }
        }
        return true;
    }

    removeCommonUnits(numUnits, denUnits) {
        var map = {},
            num = [],
            den = [],
            i, unit, unit;

        for (i = 0; i < numUnits.length; i++) {
            unit = numUnits[i];
            map[unit] = (map[unit] || 0) + 1;
        }

        for (i = 0; i < denUnits.length; i++) {
            unit = denUnits[i];
            map[unit] = (map[unit] || 0) - 1;
        }

        for (i = 0; i < numUnits.length; i++) {
            unit = numUnits[i];
            if (map[unit] > 0) {
                num.push(unit);
                map[unit]--;
            }
        }

        for (i = 0; i < denUnits.length; i++) {
            unit = denUnits[i];
            if (map[unit] < 0) {
                den.push(unit);
                map[unit]++;
            }
        }

        return {
            num: num,
            den: den
        };
    }

    static tryGetNumber(value) {
        if (/^\d*$/.test(value)) {
            value = parseFloat(value);
        }

        if (!isNaN(value)) {
            return new Numeric(value);
        }

        return undefined;
    }

    static tryCoerce(obj) {
        if (obj.$isFashionNumber) {
            return obj;
        }

        if (obj.$isFashionLiteral) {
            return this.tryGetNumber(obj.value);
        }

        return undefined;
    }
}

Fashion.apply(Numeric, {
    OPERATIONS: {
        '!=': (l, r) => l != r,
        '+': (l, r) => l + r,
        '-': (l, r) => l - r,
        '<=': (l, r) => l <= r,
        '<': (l, r) => l < r,
        '>': (l, r) => l > r,
        '>=': (l, r) => l >= r,
        '==': (l, r) => l == r,
        '%': (l, r) => Math.abs(l % r)
    },

    NON_COERCE_OPERATIONS: {
        '*': (l, r) => l * r,
        '**': (l, r) => Math.pow(l, r),
        '/': (l, r) => l / r
    },

    CONVERTABLE_UNITS: {
        'in': 0,
        'cm': 1,
        'pc': 2,
        'mm': 3,
        'pt': 4,
        'px': 5
    },

    CONVERSION_TABLE: [
        [1, 2.54, 6, 25.4, 72, 96],           // in
        [null, 1, 2.36220473, 10, 28.3464567, 37.795276],    // cm
        [null, null, 1, 4.23333333, 12, 16],           // pc
        [null, null, null, 1, 2.83464567, 3.7795276],    // mm
        [null, null, null, null, 1, 1.3333333],    // pt
        [null, null, null, null, null, 1]             // px
    ]
});

Fashion.apply(Numeric.prototype, {
    type: 'number',
    $isFashionNumber: true,
    value: undefined,
    unit: undefined,

    numeratorUnits: undefined,
    denominatorUnits: undefined,
    normalized: false
});

module.exports = Numeric;
