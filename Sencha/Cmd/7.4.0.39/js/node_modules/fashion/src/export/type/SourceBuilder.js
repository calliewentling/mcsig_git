"use strict";

var Fashion = require('../Base.js');
var TypeVisitor = require('./TypeVisitor.js');
var Output = require('../Output.js');

class SourceBuilder extends TypeVisitor {
    constructor(cfg) {
        super(cfg);
        this.nullFound = false;
    }

    list(obj) {
        var output = this.output,
            items = obj.items,
            len = output.output.length,
            sep = obj.separator,
            sepLen = sep && sep.length,
            hasSpace = sep && sep.indexOf(' ') > -1,
            prev = output.output,
            delta;

        for (var i = 0; i < items.length; i++) {
            if (items[i] && !items[i].$isFashionNull) {
                this.visit(items[i]);
                delta = output.output.length - len;
                if (!delta && sepLen && i > 0) {
                    output.output = prev;
                }
                prev = output.output;
                if (i < items.length - 1) {
                    if (sepLen) {
                        output.add(sep);
                        if (!hasSpace) {
                            output.space();
                        }
                    }
                }
                len = output.output.length;
            }
            else {
                this.nullFound = true;
            }
        }
    }

    map(obj) {
        var output = this.output,
            items = obj.items,
            key, value;

        if (this.currDeclaration) {
            Fashion.raise('(' + obj.toString() + ") isn't a valid CSS value.");
        }

        for (var i = 0; i < items.length - 1; i += 2) {
            key = items[i];
            value = items[i + 1];
            if (key && value) {
                if (i > 0) {
                    output.add(',');
                    output.space();
                }

                this.visit(key);
                output.add(': ');
                //output.space();
                this.visit(value);
            }
        }
    }

    literal(obj) {
        obj.value && this.output.add(obj.value);
    }

    string(obj) {
        var output = this.output;
        output.add(obj.quoteChar);
        output.add(obj.value);
        output.add(obj.quoteChar);
    }

    functioncall(obj) {
        var output = this.output;
        output.add(obj.name);
        output.add('(');
        this.visit(obj.args);
        output.add(')');
    }

    parenthetical(obj) {
        this.output.add('(');
        this.visit(obj.value);
        this.output.add(')');
    }

    number(obj) {
        var val = obj.stringify();
        if (val.indexOf('.') === '.' && !this.output.isCompressed) {
            val = "0" + val;
        }
        this.output.add(val);
    }

    bool(obj) {
        this.output.add(obj.value ? 'true' : 'false');
    }

    hsla(obj) {
        this.output.add(obj.toString());
    }

    rgba(obj) {
        this.output.add(obj.toString());
    }

    colorstop(obj) {
        var output = this.output,
            stop = obj.stop;

        this.visit(obj.color);

        if (stop) {
            stop = stop.clone();
            output.add(' ');
            if (!stop.unit) {
                stop.value *= 100;
                stop.unit = '%';
            }
            this.visit(stop);
        }
    }

    lineargradient(obj) {
        var output = this.output;
        output.add("linear-gradient(");
        if (obj.position) {
            this.visit(obj.position);
            output.add(',');
            output.space();
        }
        this.visit(obj.stops);
        output.add(')');
    }

    radialgradient(obj) {
        var output = this.output;
        output.add("radial-gradient(");
        if (obj.position) {
            this.visit(obj.position);
            output.add(',');
            output.space();
        }
        if (obj.shape) {
            this.visit(obj.shape);
            output.add(',');
            output.space();
        }
        this.visit(obj.stops);
        output.add(')');
    }

    toSource(obj, output) {
        this.output = output || new Output();
        this.visit(obj);
        return this.output.get();
    }

    static toSource(obj, output) {
        var sb = new SourceBuilder();
        return sb.toSource(obj, output);
    }
}

Fashion.apply(SourceBuilder.prototype, {
    output: null
});

module.exports = SourceBuilder;
