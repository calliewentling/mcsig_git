/*
 * Copyright (c) 2012-2016. Sencha Inc.
 */

"use strict";

var Fashion = require('../Base.js');
var Type = require('./Type.js');
var Numeric = require('./Numeric.js');

class Literal extends Type {
    constructor(value) {
        super();
        this.value = value
    }

    doVisit(visitor) {
        visitor.literal(this);
    }

    _getHash() {
        return this.value;
    }

    toString() {
        return this.value || '';
    }
    
    toBoolean() {
        return this.value.length;
    }

    copy() {
        return new Literal(this.value);
    }

    '+'(right) {
        return new Literal(this.value + right.getHash());
    }

    '+.number'(right) {
        if (this.value === null) {
            return right;
        }
        return new Literal(this.value + right.toString());
    }

    '/'(right) {
        return new Literal(this.value + '/' + right.getHash());
    }

    '-'(right) {
        return new Literal(this.value + '-' + right.getHash());
    }

    '%'(right) {
        return new Literal(this.value + '%' + right.getHash());
    }

    static tryCoerce(obj) {
        if (obj.$isFashionNumber) {
            return undefined;
        }
        if (obj.$isFashionString) {
            return new Literal(obj.value);
        }
        if (obj.$isFashionLiteral) {
            return obj;
        }
        return new Literal(obj.getHash());
    }


    normalizeStart(startVal) {
        var start = Type.unbox(startVal) || 0;
        if (start > 0) {
            start = start - 1;
        }

        if (start < 0) {
            start = this.value.length + start;
        }

        if (start < 0) {
            start = 0;
        }

        return start;
    }

    normalizeEnd(endVal) {
        var end = Type.unbox(endVal) || -1;
        if (end > 0) {
            end = end - 1;
        }
        if (end < 0) {
            end = this.value.length + end;
        }

        if (end < 0) {
            end = 0;
        }

        if (end > 0) {
            end = end + 1;
        }
        return end;
    }

    slice(start, end) {
        start = this.normalizeStart(start);
        end = this.normalizeEnd(end);
        return new Literal(this.value.slice(start, end));
    }

    toUpperCase() {
        return new Literal(this.value.toUpperCase());
    }

    toLowerCase() {
        return new Literal(this.value.toLowerCase());
    }

    indexOf(str) {
        var idx = this.value.indexOf(str.value);
        if (idx === -1) {
            return undefined;
        }
        return new Numeric(idx + 1);
    }

    insert(str, startVal) {
        var start = Type.unbox(startVal) || 0,
            inserted = this.value;

        if (start > 0) {
            start = Math.min(start - 1, inserted.length);
        }
        if (start < 0) {
            start = inserted.length + start + 1;
            start = Math.max(start, 0);
        }

        inserted = inserted.substring(0, start) + str.value + inserted.substring(start);
        return new Literal(Literal.deEscape(inserted));
    }

    static deEscape(str) {
        var buff = '',
            i, ch;
        for (i = 0; i < str.length; i++) {
            ch = str.charAt(i);
            if (ch === '\\') {
                i++;
                ch = str.charAt(i);
            }
            buff += ch;
        }
        return buff;
    }

    toDisplayString() {
        var val = this.value;
        if (val === null) {
            return "null";
        }
        return this.toString();
    }
}

Fashion.apply(Literal.prototype, {
    type: 'literal',
    $isFashionLiteral: true,
    value: null
});

class FashionNull extends Literal {
    constructor (value) {
        super(value || null);
    }

    copy () {
        return new FashionNull(this.value);
    }
}

Fashion.apply(FashionNull.prototype, {
    $isFashionNull: true,
    $constant: true
});

FashionNull.prototype.$isFashionNull = true;

Literal.Null = new FashionNull(null);
Literal.None = new Literal('none');

module.exports = Literal;


