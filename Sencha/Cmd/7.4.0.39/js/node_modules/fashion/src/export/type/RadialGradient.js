/*
 * Copyright (c) 2012-2016. Sencha Inc.
 */

"use strict";

var Fashion = require('../Base.js');
var Type = require('./Type.js');

class RadialGradient extends Type {
    constructor(position, shape, stops) {
        super();
        this.position = position;
        this.stops = stops;
        this.shape = shape;
    }

    doVisit(visitor) {
        visitor.radialgradient(this);
    }

    descend(visitor) {
        visitor.visit(this.position);
        visitor.visit(this.stops);
        visitor.visit(this.shape);
    }

    copy() {
        return new RadialGradient(this.position, this.shape, this.stops);
    }

    toString() {
        var string = 'radial-gradient(';

        if (this.position) {
            string += (this.position + ', ');
        }

        if (this.shape) {
            string += (this.shape + ', ');
        }

        return string + this.stops + ')';
    }

    toOriginalWebkitString() {
        var args = [],
            stops = this.stops.items,
            ln = stops.length,
            i;

        args.push('center 0%');
        args.push('center 100%');

        for (i = 0; i < ln; i++) {
            args.push(stops[i].toOriginalWebkitString());
        }

        return '-webkit-gradient(radial, ' + args.join(', ') + ')';
    }

    supports(prefix) {
        return ['owg', 'webkit'].indexOf(prefix.toLowerCase()) !== -1;
    }

    toPrefixedString(prefix) {
        if (prefix === 'owg') {
            return this.toOriginalWebkitString();
        }
        return prefix + this.toString();
    }

    gradientPoints(position) {
        //position = (position.type === 'list') ? position.clone() : new Fashion.List([position]);
        //console.log('gradientpoints', position);
    }
}

Fashion.apply(RadialGradient.prototype, {
    type: 'radialgradient',
    $isFashionRadialGradient: true,
    $canUnbox: false,
    position: null,
    stops: null,
    shape: null
});

module.exports = RadialGradient;