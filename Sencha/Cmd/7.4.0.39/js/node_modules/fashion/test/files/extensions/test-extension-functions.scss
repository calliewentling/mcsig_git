/*
 * Copyright (c) 2012-2015. Sencha Inc.
 */

@import 'js:custom-extensions';
@import 'foo/bar/baz-functions';

$base-color: my-custom-function(#123456);
$base-color-mix: my-other-custom-function($color2:$base-color, $color1:#123456);
$base-color-mix2: my-other-custom-function($base-color, #123456);


$custom-prop: dynamic("foo");

@function myfunc ($arg) {
    $custom-prop: "bar";
    @return $custom-prop;
}

$custom-prop: dynamic("bing");

body {
    background: $base-color-mix $base-color-mix2 $global-var myfunc("baz") $custom-prop;
}

/* mixins should be able to mask dynamic variables in their local scope */
$foo: dynamic(red);
@mixin bar() {
    $foo: blue;
    a { color: $foo; }
}
$foo: dynamic(green);

@include bar;

/* mixins should be also able to mask dynamic variables with parameters */
$boo: dynamic(red);

@mixin baz($boo: purple) {
    a { color: $boo; }
}

$boo: dynamic(green);

@include baz;

/* mixins should be also able re-assign variables masked by parameters */
$goo: dynamic(red);

@mixin bing($goo: orange) {
    $goo: magenta;
    a { color: $goo; }
}

$goo: dynamic(green);

@include bing;
// verify that the final !dynamic assignment won
a { color: $goo; }

/* normal rulesets, however, do not constitute their own scopes, so assignments are processed normall */
$moo: blue;

b {
    $moo: transparent;
    color: $moo;
}

c { color: $moo; }