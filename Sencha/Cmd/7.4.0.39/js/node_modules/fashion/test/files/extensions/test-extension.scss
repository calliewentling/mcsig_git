/*
 * Copyright (c) 2012-2015. Sencha Inc.
 */

@import 'custom-extensions.js';
@import 'foo/bar/baz';

$base-color: my-custom-function(#123456);
$base-color-mix: my-other-custom-function($color2:$base-color, $color1:#123456);
$base-color-mix2: my-other-custom-function($base-color, #123456);


$custom-prop: "foo" !dynamic;

@function myfunc ($arg) {
    $custom-prop: "bar";
    @return $custom-prop;
}

$custom-prop: "bing" !dynamic;

body {
    background: $base-color-mix $base-color-mix2 $global-var myfunc("baz") $custom-prop;
}



/* mixins should be able to mask dynamic variables in their local scope */
$foo: red !dynamic;
@mixin bar() {
    $foo: blue;
    a { color: $foo; }
}
$foo: green !dynamic;

@include bar;

/* mixins should be also able to mask dynamic variables with parameters */
$boo: red !dynamic;

@mixin baz($boo: purple) {
    a { color: $boo; }
}

$boo: green !dynamic;

@include baz;

/* mixins should be also able re-assign variables masked by parameters */
$goo: red !dynamic;

@mixin bing($goo: orange) {
    $goo: magenta;
    a { color: $goo; }
}

$goo: green !dynamic;

@include bing;
// verify that the final !dynamic assignment won
a { color: $goo; }

/* normal rulesets, however, do not constitute their own scopes, so assignments are processed normall */
$moo: blue;

b {
    $moo: transparent;
    color: $moo;
}

c { color: $moo; }

@font-face {
    src: url('foo.txt');
}

.theCustomSelector {
    the-custom-style-name: 'foo' "bar" !important;
}

.theCustomSelector.foo {
    the-custom-style-name: 'foo' "bar" !important;
}

.theCustomSelector .bar {
    the-custom-style-name: 'foo' "bar" !important;
}

.theCustomSelector, .otherSelector {
    the-custom-style-name: 'foo' "bar" !important;
}

.foo .theCustomSelector {
    the-custom-style-name: 'foo' "bar" !important;
    .selectorToRemove {
        // this whole ruleset should be removed
        color: crimson;
    }
}

.bar.theCustomSelector {
    the-custom-style-name: 'foo' "bar" !important;
}

.thecustomSelectoThatShouldNotBeChanged {
    the-custom-style-name: 'foo' "bar" !important;
}

.selectorToRemove {
    // this whole ruleset should be removed
    color: crimson;
}

.selectorToRemove {
    color: crimson;
    .theCustomSelector {
        the-custom-style-name: 'foo' "bar" !important;
    }
}

.selectorToRemove.foo {
    // this whole ruleset should be removed
    color: crimson;
}

.selectorToRemove .bar {
    // this whole ruleset should be removed
    color: crimson;
}

.selectorToRemove, .selectorToKeep {
    // this ruleset should only have '.selectorToKeep' as selector
    color: yellowgreen;
}

.selectorToRemove, .selectorToKeep, .anotherSelector {
    // this ruleset should have '.selectorToKeep' and '.anotherSelector' as selector
    color: yellowgreen;
}

.selectorToRemove > .foo {
    color: crimson;
}

.foo > .selectorToRemove {
    color: crimson;
}

.foo .selectorToRemove .bar {
    color: crimson;
}

.foo {
    &.selectorToRemove {
        color: crimson;
    }
    color: rebeccapurple;
}

.x-button {
    //# fashion -inline
    background-image: url('dummy-image.png');
}

//# fashion -inline
.x-button {
    background-image: url('dummy-image.png');
}

.x-button {
    background-image: url('dummy-image.png');
}

.x-button {
    background-image:
        //# fashion -inline
        url('dummy-image.png');
}

//#   fashion    -inline
.x-button {
    background-image: url('dummy-image.png');
    //# fashion+inline
    background-image: url('dummy-image.png');
}

//# fashion -inline
.x-button {
    //# fashion +inline:png
    background-image: url('dummy-image.png');
}

//# fashion -inline
.x-button {
    //# fashion +inline:png
    background-image: url('dummy-image-2.png');
}

.foo.bar.selector {
    color: crimson;
}

.foo.selector.bar {
    color: yellowgreen;
}

div#someId.foo {
    color:crimson;
}

body div#someId.otherThing {
    color:crimson;
}

.selectorToRemove, div#someId {
    color: crimson;
}