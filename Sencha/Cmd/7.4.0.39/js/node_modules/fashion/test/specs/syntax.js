var Fashion = require('../../index.js');
var assert = require('assert');
var helpers = require('../helpers.js');

describe('syntax', function () {
    

    describe('variables', function () {
        helpers.test('should support a simple variable', [
            '$var: foo;',
            'blat {a: $var;}'
        ], [
            'blat {',
            '    a: foo;',
            '}'
        ]);

        helpers.test('should do simple variable addition', [
            'foo {',
            '  $var: 2;',
            '  $another-var: 4;',
            '  a: $var;',
            '  b: $var + $another-var;}'
        ], [
            'foo {',
            '    a: 2;',
            '    b: 6;',
            '}'
        ]);

        helpers.test('should not override an existing value if we set it with !default', [
            '$var: 1;',
            '$var: 2 !default;',
            'foo {a: $var;}'
        ], [
            'foo {',
            '    a: 1;',
            '}'
        ]);

        helpers.test('should assign the variable if !default is appended to the definition and the value does not exit yet', [
            '$var: 2 !default;',
            'foo {a: $var;}'
        ], [
            'foo {',
            '    a: 2;',
            '}'
        ]);

        helpers.test('should allow for multiline variable assignment', [
            'foo {',
            '$var1: 1 +',
            '  2;',
            '$var2: true and',
            '  false;',
            '$var3: a b',
            '  c;',
            'a: $var1;',
            'b: $var2;',
            'c: $var3; }'
        ], [
            'foo {',
            '    a: 3;',
            '    b: false;',
            '    c: a b c;',
            '}'
        ]);
    });

    describe('scripting', function () {
        helpers.test('should support simple sass script functionality', [
            'foo {',
            '  a: 1 + 2;',
            '  b: 1 - 2;',
            '  c: foo + bar;',
            '  d: floor(12.3px); }'
        ], [
            'foo {',
            '    a: 3;',
            '    b: -1;',
            '    c: foobar;',
            '    d: 12px;',
            '}'
        ]);
    });

    describe('conditionals', function () {
        helpers.test('should support if statements', [
            '@if "foo" == "foo" {foo {a: b;}}',
            '@if "foo" != "foo" {bar {a: b;}}'
        ], [
            'foo {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support else if statements', [
            '@if "foo" != "foo" {foo {a: b;}}',
            '@else if "foo" == "foo" {bar {a: b;}}',
            '@else if true {baz {a: b;}}'
        ], [
            'bar {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support else statements', [
            '@if "foo" != "foo" {foo {a: b;}}',
            '@else {bar {a: b;}}'
        ], [
            'bar {',
            '    a: b;',
            '}'
        ]);
    });

    describe('comments', function () {
        // Comments are not being preserved
        helpers.test('should allow a comment after an if statement', [
            'foo {',
            '  @if true {a: b;}',
            '  /* This is a comment */',
            '  c: d; }'
        ], [
            'foo {',
            '    a: b;',
            '    /* This is a comment */',
            '    c: d;',
            '}'
        ]);

        // Comments are not being preserved
        helpers.test('should allow a comment after an else statement', [
            'foo {',
            '  @if true {a: b;}',
            '  @else {x: y;}',
            '  /* This is a comment */',
            '  c: d; }'
        ], [
            'foo {',
            '    a: b;',
            '    /* This is a comment */',
            '    c: d;',
            '}'
        ]);

        helpers.xtest('should allow an inline comment and ignore it in the output', [
            'foo {a: 1 + /* flang */ bar;}'
        ], [
            'foo {',
            '    a: 1bar;',
            '}'
        ]);

        helpers.test('should ignore one-line comments in selectors', [
            '.foo {// bar: baz;}',
            '  baz: bang; //}',
            '}'
        ], [
            '.foo {',
            '    baz: bang;',
            '}'
        ]);

        helpers.test('should not fail when using // in strings', [
            '.foo bar[val="//"] {',
            '  baz: bang; //}',
            '}'
        ], [
            '.foo bar[val="//"] {',
            '    baz: bang;',
            '}'
        ]);

        helpers.test('should ignore one-line comments in a rule definition', [
            'foo {a: 1 + // flang }',
            '  blang; }'
        ], [
            'foo {',
            '    a: 1blang;',
            '}'
        ]);
    });

    describe('rulesets', function () {
        helpers.test('should support nested rulesets', [
            'foo {bar {a: b;}}'
        ], [
            'foo bar {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support multiple nested rulesets', [
            'foo {',
            '  bar {a: b;}',
            '  baz {b: c;}}'
        ], [
            'foo bar {',
            '    a: b;',
            '}',
            'foo baz {',
            '    b: c;',
            '}'
        ]);

        helpers.test('should support deeply nested rulesets', [
            'foo {',
            '  bar {baz {a: b;}}',
            '  bang {bip {a: b;}}}'
        ], [
            'foo bar baz {',
            '    a: b;',
            '}',
            'foo bang bip {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support direct selector rulesets', [
            'foo {',
            '  a: b;',
            '  > bar {',
            '    c: d;',
            '  }',
            '}'
        ], [
            'foo {',
            '    a: b;',
            '}',
            'foo > bar {',
            '    c: d;',
            '}'
        ]);

        helpers.test('should support nested direct selector rulesets', [
            'foo {',
            '  a: b;',
            '  bar {',
            '    c: d;',
            '    > bar2 {',
            '      e: f;',
            '    }',
            '  }',
            '}'
        ], [
            'foo {',
            '    a: b;',
            '}',
            'foo bar {',
            '    c: d;',
            '}',
            'foo bar > bar2 {',
            '    e: f;',
            '}'
        ]);

        helpers.test('should support a declaration before a nested ruleset', [
            'foo {',
            '  a: b;',
            '  bar {c: d;}}'
        ], [
            'foo {',
            '    a: b;',
            '}',
            'foo bar {',
            '    c: d;',
            '}'
        ]);

        helpers.test('should support a declaration after a nested ruleset', [
            'foo {',
            '  bar {c: d;}',
            '  a: b;}'
        ], [
            'foo {',
            '    a: b;',
            '}',
            'foo bar {',
            '    c: d;',
            '}'
        ]);

        helpers.test('should support a combination of declarations and nested rulesets', [
            'foo {',
            '  ump: nump;',
            '  grump: clump;',
            '  bar {',
            '    blat: bang;',
            '    habit: rabbit;',
            '    baz {a: b;}',
            '    bip {c: d;}}',
            '  bibble {',
            '    bap {e: f;}}}'
        ], [
            'foo {',
            '    ump: nump;',
            '    grump: clump;',
            '}',
            'foo bar {',
            '    blat: bang;',
            '    habit: rabbit;',
            '}',
            'foo bar baz {',
            '    a: b;',
            '}',
            'foo bar bip {',
            '    c: d;',
            '}',
            'foo bibble bap {',
            '    e: f;',
            '}'
        ]);
    });

    describe('selectors', function () {
        helpers.test('should support multiple selectors in combination with nested rulesets', [
            'foo,',
            'bar {',
            '  baz,',
            '  bang {a: b;}}'
        ], [
            'foo baz,',
            'foo bang,',
            'bar baz,',
            'bar bang {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support the & selector prefix and "bar &.bar" syntax', [
            'foo {',
            '  &:hover {a: b;}',
            '  bar &.baz {c: d;}}'
        ], [
            'foo:hover {',
            '    a: b;',
            '}',
            'bar foo.baz {',
            '    c: d;',
            '}'
        ]);

        helpers.test('should support crazy combination of & prefixes', [
            'foo {',
            '  &.test {a: b;}',
            '  bar {',
            '    ie7 &.aah,',
            '    &.test,',
            '    .huh {b: c;}',
            '    huh {.ie6 &.test {d: e;}}',
            '  }',
            '}'
        ], [
            'foo.test {',
            '    a: b;',
            '}',
            'ie7 foo bar.aah,',
            'foo bar.test,',
            'foo bar .huh {',
            '    b: c;',
            '}',
            '.ie6 foo bar huh.test {',
            '    d: e;',
            '}'
            // The old system would output the following. We have a better new way now
            // 'foo bar .huh {',
            // '    b: c;',
            // '}',
            // 'foo bar.test {',
            // '    b: c;',
            // '}',
            // 'foo.test {',
            // '    a: b;',
            // '}',
            // 'ie7 foo bar.aah {',
            // '    b: c;',
            // '}',
            // '.ie6 foo bar huh.test {',
            // '    d: e;',
            // '}'
        ]);

        helpers.test('should support nested &', [
            'foo {',
            '    &.test {a: b;}',
            '    &.bar,',
            '    soap {',
            '        ie7 &.aah,',
            '        &.test,',
            '        .huh {b: c;}',
            '        huh {.ie6 &.test {d: e;}}',
            '    }',
            '}'
        ], [
            'foo.test {',
            '    a: b;',
            '}',
            'ie7 foo.bar.aah,',
            'foo.bar.test,',
            'foo.bar .huh,',
            'ie7 foo soap.aah,',
            'foo soap.test,',
            'foo soap .huh {',
            '    b: c;',
            '}',
            '.ie6 foo.bar huh.test,',
            '.ie6 foo soap huh.test {',
            '    d: e;',
            '}'
        ]);

        helpers.test('should support new-lines in selectors', [
            'foo',
            'bar {a: b;}'
        ], [
            'foo bar {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support new-lines in combination with spaces in selectors', [
            'foo',
            'bar {',
            '  baz',
            '  bang {a: b;}',
            '  bip bop {c: d;}}'
        ], [
            'foo bar baz bang {',
            '    a: b;',
            '}',
            'foo bar bip bop {',
            '    c: d;',
            '}'
        ]);

        helpers.test('should support a selector as a function with a string argument (double quotes)', [
            '@function get-name($name) {',
            '    @return $name;',
            '}',
            '#{get-name("foo")} {',
            '    bar: baz;',
            '}'
        ], [
            'foo {',
            '    bar: baz;',
            '}'
        ]);

        helpers.test('should support a selector as a function with a string argument (single quotes)', [
            '@function get-name($name) {',
            '    @return $name;',
            '}',
            '#{get-name(\'foo\')} {',
            '    bar: baz;',
            '}'
        ], [
            'foo {',
            '    bar: baz;',
            '}'
        ]);
    });

    describe('mixins', function () {
        helpers.test('should support simple mixins', [
            '@mixin foo {',
            '  .foo {a: b;}}',
            'bar {',
            '  @include foo;',
            '  c: d;}'
        ], [
            'bar {',
            '    c: d;',
            '}',
            'bar .foo {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support mixins without nested selectors', [
            '@mixin foo {a: b;}',
            'bar {',
            '  @include foo;',
            '  c: d;}'
        ], [
            'bar {',
            '    a: b;',
            '    c: d;',
            '}'
        ]);

        helpers.test('should support mixins with empty arguments', [
            '@mixin foo() {a: b;}',
            '.foo {@include foo();}'
        ], [
            '.foo {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support mixins defined with empty arguments, but called without', [
            '@mixin foo() {a: b;}',
            '.foo {@include foo;}'
        ], [
            '.foo {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support defining a mixin without arguments, but calling it with them', [
            '@mixin foo {a: b;}',
            '.foo {@include foo();}'
        ], [
            '.foo {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support unnamed arguments', [
            '@mixin foo($a) {a: $a;}',
            '.foo {@include foo(bar);}'
        ], [
            '.foo {',
            '    a: bar;',
            '}'
        ]);

        helpers.test('should support multiple sequential arguments', [
            '@mixin foo($a, $b) {',
            '  a: $a;',
            '  b: $b; }',
            '.foo {@include foo(bar, 12px);}'
        ], [
            '.foo {',
            '    a: bar;',
            '    b: 12px;',
            '}'
        ]);

        helpers.test('should support named arguments', [
            '@mixin foo($a, $b) {',
            '  a: $a;',
            '  b: $b; }',
            '.foo {@include foo($a: bar, $b: 12px);}'
        ], [
            '.foo {',
            '    a: bar;',
            '    b: 12px;',
            '}'
        ]);

        helpers.test('should support default values when using named arguments', [
            '@mixin foo($a: bar, $b) {',
            '  a: $a;',
            '  b: $b; }',
            '.foo {@include foo($b: 12px);}'
        ], [
            '.foo {',
            '    a: bar;',
            '    b: 12px;',
            '}'
        ]);

        helpers.test('should allow a mixture of required and named arguments', [
            '@mixin a-mixin($required, $arg1: default-val1, $arg2: default-val2) {',
            '  required: $required;',
            '  arg1: $arg1;',
            '  arg2: $arg2;',
            '}',
            '.mixed { @include a-mixin(foo, $arg2: non-default-val2); }'
        ], [
            '.mixed {',
            '    required: foo;',
            '    arg1: default-val1;',
            '    arg2: non-default-val2;',
            '}'
        ]);

        helpers.test('should calling a mixin with required and named arguments, passing the required argument as a named argument', [
            '@mixin a-mixin($required, $arg1: default-val1, $arg2: default-val2) {',
            '  required: $required;',
            '  arg1: $arg1;',
            '  arg2: $arg2; }',
            '.mixed { @include a-mixin($required: foo); }'
        ], [
            '.mixed {',
            '    required: foo;',
            '    arg1: default-val1;',
            '    arg2: default-val2;',
            '}'
        ]);

        helpers.test('should support calling a mixin with required and named arguments using out of order named arguments only', [
            '@mixin a-mixin($required, $arg1: default-val1, $arg2: default-val2) {',
            '  required: $required;',
            '  arg1: $arg1;',
            '  arg2: $arg2; }',
            '.mixed { @include a-mixin($arg2: non-default-val2, $arg1: non-default-val1, $required: foo); }'
        ], [
            '.mixed {',
            '    required: foo;',
            '    arg1: non-default-val1;',
            '    arg2: non-default-val2;',
            '}'
        ]);

        helpers.test('should support passing content body to mixin', [
            '@mixin apply-to-ie6-only {',
            '  * html {',
            '    @content;',
            '  }',
            '}',
            '@include apply-to-ie6-only {',
            '  #logo {',
            '    background-image: url(logo.gif);',
            '  }',
            '}'
        ], [
            '* html #logo {',
            '    background-image: url(logo.gif);',
            '}'
        ]);

        helpers.test('should manage scopes when calling content body', [
            '$color: #fff;',
            '@mixin colors($color: blue) {',
            '  background-color: $color;',
            '  @content;',
            '  border-color: $color;',
            '}',
            '.colors {',
            '  @include colors { color: $color; }',
            '}'
        ], [
            '.colors {',
            '    background-color: blue;',
            '    color: #fff;',
            '    border-color: blue;',
            '}'
        ]);

        var allowSetScopeWas;

        helpers.test('should not support overriding global variables when configured', [
            '$foo: "bar";',
            '@mixin mix() {',
            '    $foo: "baz";',
            '    body { background: $foo; }',
            '}',
            'body { background: $foo; }',
            '@include mix();',
            'body { background: $foo; }'
        ], [
            'body {',
            '    background: "bar";',
            '}',
            'body {',
            '    background: "baz";',
            '}',
            'body {',
            '    background: "bar";',
            '}'
        ], false, function(){
            allowSetScopeWas = Fashion.Runtime.allowSetScopedVariables;
            Fashion.Runtime.allowSetScopedVariables = false;
        }, function(){
            Fashion.Runtime.allowSetScopedVariables = allowSetScopeWas;
        });

        helpers.test('should support overriding global variables when configured', [
            '$foo: "bar";',
            '@mixin mix() {',
            '    $foo: "baz";',
            '    body { background: $foo; }',
            '}',
            'body { background: $foo; }',
            '@include mix();',
            'body { background: $foo; }'
        ], [
            'body {',
            '    background: "bar";',
            '}',
            'body {',
            '    background: "baz";',
            '}',
            'body {',
            '    background: "baz";',
            '}'
        ], false, function(){
            allowSetScopeWas = Fashion.Runtime.allowSetScopedVariables;
            Fashion.Runtime.allowSetScopedVariables = true;
        }, function(){
            Fashion.Runtime.allowSetScopedVariables = allowSetScopeWas;
        });

        helpers.test('should support overriding global variables with !global', [
            '$foo: "bar";',
            '@mixin mix() {',
            '    $foo: "baz" !global;',
            '    body { background: $foo; }',
            '}',
            'body { background: $foo; }',
            '@include mix();',
            'body { background: $foo; }'
        ], [
            'body {',
            '    background: "bar";',
            '}',
            'body {',
            '    background: "baz";',
            '}',
            'body {',
            '    background: "baz";',
            '}'
        ], false, function(){
            allowSetScopeWas = Fashion.Runtime.allowSetScopedVariables;
            Fashion.Runtime.allowSetScopedVariables = false;
        }, function(){
            Fashion.Runtime.allowSetScopedVariables = allowSetScopeWas;
        });

        helpers.test('should handle colliding variable names in content body', [
            '@mixin smartphone {',
            '    $sidebar-width: 400px;',
            '    customWidth: $sidebar-width;',
            '    @content;',
            '}',
            '',
            '#sidebar {',
            '  $sidebar-width: 300px;',
            '  width: $sidebar-width;',
            '  @include smartphone {',
            '    width: ($sidebar-width / 3);',
            '  }',
            '}'
        ], [
            '#sidebar {',
            '    width: 300px;',
            '    customWidth: 400px;',
            '    width: 100px;',
            '}'
        ])

        helpers.test("should support parameter name lookups", [
            '@mixin the-mixin ($a1: "foo", $a2: $a1 + " bar", $a3: $a2 + " baz") {',
            '    body { background: $a3 }',
            '}',
            '',
            '#rule {',
            '  @include the-mixin ($a1: "not-foo");',
            '}'
        ], [
            '#rule body {',
            '    background: "not-foo bar baz";',
            '}'
        ]);

        helpers.test("should support parameter name lookups with proper scope management", [
            '$suffix: " end.";',
            '@mixin the-mixin (',
            '  $a1: "foo", ',
            '  $a2: $a1 + " bar", ',
            '  $a3: $a2 + " baz" + $suffix) ',
            '{',
            '  body { background: $a3 }',
            '}',
            '@mixin the-mixin-2 {',
            '  $suffix: " not-end.";',
            '  #rule {',
            '    @include the-mixin ($a1: "not-foo");',
            '  }',
            '}',
            '@include the-mixin-2;'
        ], [
            '#rule body {',
            '    background: "not-foo bar baz end.";',
            '}'
        ],false, function(){
            allowSetScopeWas = Fashion.Runtime.allowSetScopedVariables;
            Fashion.Runtime.allowSetScopedVariables = false;
        }, function(){
            Fashion.Runtime.allowSetScopedVariables = allowSetScopeWas;
        });

        helpers.test("should manages default parameters for mixin calls", [
            '$suffix: " the end";',
            '@mixin mixa( $a: "a", $b: $a + "b", $c: $a + $b + $suffix) {',
            '  body {',
            '    background: $c;',
            '  }',
            '}',
            '@mixin mixb() {',
            ' $x: "xyz ";',
            ' $b: "foo";',
            ' @include mixa($a: $x);',
            '}',
            '@include mixb();',
        ], [
            'body {',
            '    background: "xyz xyz b the end";',
            '}'
        ]);
    });

    describe('debugging', function () {
        helpers.test('should support the @debug statement', [
            'foo {a: b;}',
            '@debug "hello world!";',
            '$x: 5;',
            '@debug $x * 6;',
            'bar {c: d;}'
        ], [
            'foo {',
            '    a: b;',
            '}',
            'bar {',
            '    c: d;',
            '}'
        ]);
        helpers.test('should support the @warn statement', [
            'foo {a: b;}',
            '@warn "hello world!";',
            '$y: 4;',
            '@warn 3 * $y;',
            'bar {c: d;}'
        ], [
            'foo {',
            '    a: b;',
            '}',
            'bar {',
            '    c: d;',
            '}'
        ]);
    });

    describe('inline expressions', function () {
        helpers.test('should replace inline variables', [
            '$a: bar;',
            'foo #{$a} baz {a: b;}'
        ], [
            'foo bar baz {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should not get confused about inline expressions in an id', [
            '$zzz: abc;',
            '##{$zzz} { a: b;}'
        ], [
            '#abc {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support variable replace inside of a literal value', [
            '$value : bip;',
            'foo {',
            '  bar: -moz-#{$value};',
            '}'
        ], [
            'foo {',
            '    bar: -moz-bip;',
            '}'
        ]);

        helpers.test('should support inline variables as part of the property of a variable assignment', [
            '$a : a;',
            '$b : b;',
            'div { -foo-#{$a}-#{$b}-foo: foo;}'
        ], [
            'div {',
            '    -foo-a-b-foo: foo;',
            '}'
        ]);

        helpers.test('should support inline expressions', [
            'foo #{1 + 2} baz {a: b}'
        ], [
            'foo 3 baz {',
            '    a: b;',
            '}'
        ]);
    });

    describe('misc', function () {
        helpers.test('should not require to have a semi-colon at the end of the last rule in the ruleset', [
            'blat {a: test}'
        ], [
            'blat {',
            '    a: test;',
            '}'
        ]);
    });

    describe('functions', function () {
        var allowSetScopeWas;

        helpers.test('should support named arguments as part of native functions', [
            '.keyed { color: rgba($color: #a7c, $alpha: 0.4); }'
        ], [
            '.keyed {',
            '    color: rgba(170, 119, 204, 0.4);',
            '}'
        ]);

        helpers.test("should support variable references with proper scope management", [
            '$suffix: " end.";',
            '@function funcA ($a1: "foo", $a2: $a1 + " bar", $a3: $a2 + " baz" + $suffix) ',
            '{',
            '  @return $a3;',
            '};',
            '@function funcB() {',
            '  $suffix: " not-end.";',
            '  $a1: "bar";',
            '  @return funcA($a2: $a1 + " not-bar");',
            '};',
            'body { background: funcB(); }'
        ], [
            'body {',
            '    background: "bar not-bar baz end.";',
            '}'
        ],false, function(){
            allowSetScopeWas = Fashion.Runtime.allowSetScopedVariables;
            Fashion.Runtime.allowSetScopedVariables = false;
        }, function(){
            Fashion.Runtime.allowSetScopedVariables = allowSetScopeWas;
        });

        helpers.test("should skip cycles in name references", [
            '@mixin replace-text($img, $x: 50%, $y: 50%) {',
            '            background: $img $x $y;',
            '}',
            '@mixin replace-text-with-dimensions($img, $x: 50%, $y: 50%, $inline: false) {',
            '        @include replace-text(if($inline, inline-image($img), $img), $x, $y);',
            '}',
            'body {',
            '        @include replace-text-with-dimensions("foo.png");',
            '}'
        ], [
            'body {',
            '    background: "foo.png" 50% 50%;',
            '}'
        ]);
    });

    describe('CSS @-rules', function () {
        // this suite exists just to make sure CSS @-rules are not parsed as directives.
        helpers.test('should support @font-face', [
            '@font-face {',
            '    a: b;',
            '}'
        ], [
            '@font-face {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support @keyframes', [
            '@keyframes {',
            '    a: b;',
            '}'
        ], [
            '@keyframes {',
            '    a: b;',
            '}'
        ]);

        // TODO: @media should actually be parsed as a directive, but that is currently
        // not supported, so make sure it can still be used as a CSS @-rule.
        helpers.test('should support @media', [
            '@media {',
            '    a: b;',
            '}'
        ], [
            '@media {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support @media with arguments', [
            "@media screen and (max-width: 980px) and (orientation: landscape), screen and (max-width: 760px) and (orientation: portrait) {",
            "    .quarterly-main .thumb-wrap {",
            "        float: none;",
            "        width: 100%;",
            "        padding: 5px 0;",
            "    }",
            "}"
        ], [
            "@media screen and (max-width: 980px) and (orientation: landscape),",
            "screen and (max-width: 760px) and (orientation: portrait) {",
            "    .quarterly-main .thumb-wrap {",
            "        float: none;",
            "        width: 100%;",
            "        padding: 5px 0;",
            "    }",
            "}"
        ]);
        
        
        helpers.test('should compare numbers with units that are not comparable', [
            '$foo: dynamic(123px);',
            '$bar: dynamic(123em);',
            'a {',
            '    a: if($foo == $bar, 2, 3);',
            '    b: if($foo != $bar, 2, 3);',
            '}'
        ], [
            'a {',
            '    a: 3;',
            '    b: 2;',
            '}'
        ]);
        
        helpers.test('should compare numbers with units that are not comparable using math', [
            '@function remove-unit($value) {',
            '    @return $value / ($value * 0 + 1);',
            '}',
            '$foo: dynamic(123px);',
            '$bar: dynamic(123em);',
            'a {',
            '    a: remove-unit($foo);',
            '}'
        ], [
            'a {',
            '    a: 123;',
            '}'
        ]);
        
        helpers.test('should support media queries in mixins', [
            '@mixin background_general($imageName) {',
            '@media only screen and (-webkit-device-pixel-ratio: 2) {',
            'background-image: url(../images/xhdpi/#{$imageName}) !important;',
            '}',
            '@media screen and (-webkit-device-pixel-ratio: 1.5) {',
            'background-image: url(../images/hdpi/#{$imageName}) !important;',
            '}',
            '@media only screen and (-webkit-device-pixel-ratio: 3) {',
            'background-image: url(../images/xhdpi/#{$imageName}) !important;',
            '}',
            '@media only screen and (-webkit-device-pixel-ratio: 3.5) {',
            'background-image: url(../images/xhdpi/#{$imageName}) !important;',
            '}',
            '@media only screen and (-webkit-device-pixel-ratio: 4) {',
            'background-image: url(../images/xhdpi/#{$imageName}) !important;',
            '}',
            'background-image: url(../images/hdpi/#{$imageName}) !important;',
            '}',
            '',
            '.sizeChanges {',
            '@media only screen and (min-device-width: 600px) , (min-device-width : 768px) and (max-device-width : 1024px) and (orientation: landscape) {',
            '@include background_general("test.png");/**nesting this inside a media query causes the error **/',
            '}',
            '}',
        ], [
            '@media only screen and (min-device-width: 600px),',
            '(min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) {',
            '    .sizeChanges {',
            '        background-image: url(../images/hdpi/test.png) !important;',
            '    }',
            '}',
            '@media only screen and (min-device-width: 600px) and screen and (-webkit-device-pixel-ratio: 2),',
            '(min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and screen and (-webkit-device-pixel-ratio: 2) {',
            '    .sizeChanges {',
            '        background-image: url(../images/xhdpi/test.png) !important;',
            '    }',
            '}',
            '@media only screen and (min-device-width: 600px) and and (-webkit-device-pixel-ratio: 1.5),',
            '(min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and and (-webkit-device-pixel-ratio: 1.5) {',
            '    .sizeChanges {',
            '        background-image: url(../images/hdpi/test.png) !important;',
            '    }',
            '}',
            '@media only screen and (min-device-width: 600px) and screen and (-webkit-device-pixel-ratio: 3),',
            '(min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and screen and (-webkit-device-pixel-ratio: 3) {',
            '    .sizeChanges {',
            '        background-image: url(../images/xhdpi/test.png) !important;',
            '    }',
            '}',
            '@media only screen and (min-device-width: 600px) and screen and (-webkit-device-pixel-ratio: 3.5),',
            '(min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and screen and (-webkit-device-pixel-ratio: 3.5) {',
            '    .sizeChanges {',
            '        background-image: url(../images/xhdpi/test.png) !important;',
            '    }',
            '}',
            '@media only screen and (min-device-width: 600px) and screen and (-webkit-device-pixel-ratio: 4),',
            '(min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and screen and (-webkit-device-pixel-ratio: 4) {',
            '    .sizeChanges {',
            '        background-image: url(../images/xhdpi/test.png) !important;',
            '    }',
            '}',            
        ])
        
    });

    describe('CSS @-rules (failing)', function () {
        helpers.xtest('should support @charset', [
            '@charset "UTF-8";'
        ], [
            '@charset "UTF-8";'
        ]);

        helpers.test('should support @document', [
            '@document url(http://www.w3.org/)'
        ], [
            '@document url(http://www.w3.org/);'
        ]);

        helpers.test('should support @page', [
            '@page :pseudo-class {a: b}'
        ], [
            "@page :pseudo-class {",
            "    a: b;",
            "}"
        ]);

        helpers.test('should support @supports', [
            '@supports (display: flexbox) {',
            '    body {display: flexbox;}',
            '}'
        ], [
            '@supports (display: flexbox) {',
            '    body {',
            '        display: flexbox;',
            '    }',
            '}'
        ]);
    });

    describe('compat', function () {
        helpers.test('should skip / operations for font properties', [
            '.foo { font : bold 3em/1.5em; not-font: bold (3em/1.5em);}'
        ], [
            '.foo {',
            '    font: bold 3em/1.5em;',
            '    not-font: bold 2;',
            '}'
        ]);

        helpers.test("should skip / operations for any / operator in font properties", [
            '$fa-font-size-base: 14px;',
            'body {',
            '  font: normal normal normal #{$fa-font-size-base}/1 FontAwesome; // shortening font declaration',
            '}'
        ], [
            'body {',
            '    font: normal normal normal 14px/1 FontAwesome;',
            '}'
        ]);

        helpers.test('should support classes in an inline expression', [
            'foo#{".bar"} baz {a: b}'
        ], [
            'foo.bar baz {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support an inline expression at the beginning of a selector', [
            '#{"foo"}.bar baz {a: b}'
        ], [
            'foo.bar baz {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support an inline expression with quotes in it', [
            '#{"foo" + " bar"} {a: b;}'
        ], [
            'foo bar {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support an inline expression without a space after it', [
            '#{"foo" + " bar"}baz {a: b;}'
        ], [
            'foo barbaz {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support an inline variable as part of a pseudo selector', [
            '$zzz: zzz;',
            ':#{$zzz}::#{$zzz} { a: b; }'
        ], [
            ':zzz::zzz {',
            '    a: b;',
            '}'
        ]);


        helpers.test('should an inline expression inside of a element attribute selector', [
            '$zzz: zzz;',
            '[#{$zzz}=foo] { a: b; }'
        ], [
            '[zzz=foo] {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support an inline expression as part of a property name', [
            'foo {bar#{1 + 2}: blip}'
        ], [
            'foo {',
            '    bar3: blip;',
            '}'
        ]);

        helpers.test('should support an inline expression with strings as part of a property name', [
            'foo {bar#{"baz" + "bang"}: blip;}'
        ], [
            'foo {',
            '    barbazbang: blip;',
            '}'
        ]);

        helpers.test('should support string concatenation in an inline expression that is part of a property name', [
            'foo {#{"baz" + "bang"}: blip}'
        ], [
            'foo {',
            '    bazbang: blip;',
            '}'
        ]);

        helpers.test('should support an inline expression as part of a class name', [
            'a.#{"foo"} b',
            '{color: red;}'
        ], [
            'a.foo b {',
            '    color: red;',
            '}'
        ]);

        helpers.test('should support a pound sign inside of the value of a variable used inside an inline expression', [
            '$bar : "#foo";',
            'ul li#{$bar} a span.label { foo: bar; }'
        ], [
            'ul li#foo a span.label {',
            '    foo: bar;',
            '}'
        ]);

        helpers.test('should support multiple selectors in combination with new-lines in selectors and nested rulesets', [
            'foo, bar',
            'baz {',
            '  bang, bip',
            '  bop {a: b;}}'
        ], [
            'foo bang,',
            'foo bip bop,',
            'bar baz bang,',
            'bar baz bip bop {',
            '    a: b;',
            '}'
        ]);

        // This breaks because a literal with a : is always considered to be a variable assignment even though it could be a selector
        helpers.test('should support crazy ambiguous selectors with many pseudo classes and elements in combination with nested rulesets', [
            'foo {',
            '  bar:baz:bang:bop:biddle:woo:look:at:all:these:pseudoclasses {a: b;};',
            '  bar:baz bang bop biddle woo look at all these elems {a: b;};',
            '  bar:baz bang bop biddle woo look at all these elems; }'
        ], [
            'foo {',
            '    bar: baz bang bop biddle woo look at all these elems;',
            '}',
            'foo bar:baz:bang:bop:biddle:woo:look:at:all:these:pseudoclasses {',
            '    a: b;',
            '}',
            'foo bar:baz bang bop biddle woo look at all these elems {',
            '    a: b;',
            '}'
        ]);

        // This breaks because we don't support selectors staring with :
        helpers.test('should support nested rules with fancy selectors', [
            'foo {',
            '  .bar {a: b;}',
            '  :baz {c: d;}',
            '  bang:bop {e: f;}}'
        ], [
            'foo .bar {',
            '    a: b;',
            '}',
            'foo :baz {',
            '    c: d;',
            '}',
            'foo bang:bop {',
            '    e: f;',
            '}'
        ]);

        helpers.test('should support looping over lists', [
            'a {',
            '  @each $number in 1px 2px 3px 4px {',
            '    b: $number;',
            '  }',
            '}',
            'c {',
            '  @each $str in foo, bar, baz, bang {',
            '    d: $str;',
            '  }',
            '}'
        ], [
            'a {',
            '    b: 1px;',
            '    b: 2px;',
            '    b: 3px;',
            '    b: 4px;',
            '}',
            'c {',
            '    d: foo;',
            '    d: bar;',
            '    d: baz;',
            '    d: bang;',
            '}'
        ]);

        helpers.test('should support the "from 1 to 5" syntax', [
            '.foo {',
            '  @for $var from 1 to 5 {a: $var;}',
            '}'
        ], [
            '.foo {',
            '    a: 1;',
            '    a: 2;',
            '    a: 3;',
            '    a: 4;',
            '}'
        ]);

        helpers.test('should support the "from 1 through 5" syntax', [
            '.foo {',
            '  @for $var from 1 through 5 {a: $var;}',
            '}'
        ], [
            '.foo {',
            '    a: 1;',
            '    a: 2;',
            '    a: 3;',
            '    a: 4;',
            '    a: 5;',
            '}'
        ]);

        helpers.test('should support unicode characters in variable names', [
            '$vär: foo;',
            'blat {a: $vär;}'
        ], [
            'blat {',
            '    a: foo;',
            '}'
        ]);

        // def test_css_import_directive
        //   assert_equal "@import url(foo.css);\n", render('@import "foo.css";')
        //   assert_equal "@import url(foo.css);\n", render("@import 'foo.css';")
        //   assert_equal "@import url(\"foo.css\");\n", render('@import url("foo.css");')
        //   assert_equal "@import url('foo.css');\n", render("@import url('foo.css');")
        //   assert_equal "@import url(foo.css);\n", render('@import url(foo.css);')
        // end
        // 
        // def test_media_import
        //   assert_equal("@import \"./fonts.sass\" all;\n", render("@import \"./fonts.sass\" all;"))
        // end
        // 
        // def test_http_import
        //   assert_equal("@import \"http://fonts.googleapis.com/css?family=Droid+Sans\";\n",
        //     render("@import \"http://fonts.googleapis.com/css?family=Droid+Sans\";"))
        // end
        // 
        // def test_url_import
        //   assert_equal("@import url(fonts.sass);\n", render("@import url(fonts.sass);"))
        // end


        // We have to support the following syntax

        // @-webkit-keyframes x-loading-spinner-rotate{
        //   0%{     -webkit-transform: rotate(0deg);   }
        //   8.32%{  -webkit-transform: rotate(0deg);   }
        // 
        //   8.33%{  -webkit-transform: rotate(30deg);  }
        //   16.65%{ -webkit-transform: rotate(30deg);  }
        // 
        //   16.66%{ -webkit-transform: rotate(60deg);  }
        //   24.99%{ -webkit-transform: rotate(60deg);  }
        // 
        //   25%{    -webkit-transform: rotate(90deg);  }
        //   33.32%{ -webkit-transform: rotate(90deg);  }
        // 
        //   33.33%{ -webkit-transform: rotate(120deg); }
        //   41.65%{ -webkit-transform: rotate(120deg); }
        // 
        //   41.66%{ -webkit-transform: rotate(150deg); }
        //   49.99%{ -webkit-transform: rotate(150deg); }
        // 
        //   50%{    -webkit-transform: rotate(180deg); }
        //   58.32%{ -webkit-transform: rotate(180deg); }
        // 
        //   58.33%{ -webkit-transform: rotate(210deg); }
        //   66.65%{ -webkit-transform: rotate(210deg); }
        // 
        //   66.66%{ -webkit-transform: rotate(240deg); }
        //   74.99%{ -webkit-transform: rotate(240deg); }
        // 
        //   75%{    -webkit-transform: rotate(270deg); }
        //   83.32%{ -webkit-transform: rotate(270deg); }
        // 
        //   83.33%{ -webkit-transform: rotate(300deg); }
        //   91.65%{ -webkit-transform: rotate(300deg); }
        // 
        //   91.66%{ -webkit-transform: rotate(330deg); }
        //   100%{   -webkit-transform: rotate(330deg); }
        // }
    });

    describe('compat', function(){
        helpers.test('should support an inline expression with quotes inside a string', [
            'foo[val="bar #{"foo" + " bar"} baz"] {a: b}'
        ], [
            'foo[val="bar foo bar baz"] {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support nested inline expressions with quotes inside a string', [
            'foo[val="bar #{#{"foo"} + #{" bar"}} baz"] {a: b}'
        ], [
            'foo[val="bar foo bar baz"] {',
            '    a: b;',
            '}'
        ]);

        helpers.test('should support an inline expression as an argument to a psuedo selector', [
            'foo:nth-child(#{5 + "n+" + 6}) {a: b}'
        ], [
            'foo:nth-child(5n+6) {',
            '    a: b;',
            '}'
        ]);

        helpers.test('Indexed Pseudo-classes should remain intact when the same token is used multiple times', [
            'foo:nth-child(5n+5) {a: b}'
        ], [
            'foo:nth-child(5n+5) {',
            '    a: b;',
            '}'
        ]);

        helpers.test('Indexed Pseudo-classes should remain intact', [
            'foo:nth-child(5n+8) {a: b}'
        ], [
            'foo:nth-child(5n+8) {',
            '    a: b;',
            '}'
        ]);

        // We don't support namespacing yet
        describe('namespacing', function () {
            helpers.test('should support single namespaced selector', [
                'foo {',
                '  bar: baz;',
                '  bang: {',
                '    bip: 1px;',
                '    bop: bar;}}'
            ], [
                'foo {',
                '    bar: baz;',
                '    bang-bip: 1px;',
                '    bang-bop: bar;',
                '}'
            ]);

            helpers.test('should support multiple namespaced selectors', [
                'foo {',
                '  bar: baz;',
                '  bang: {',
                '    bip: 1px;',
                '    bop: bar;}',
                '  buzz: {',
                '    fram: "foo";',
                '    frum: moo;}}'
            ], [
                'foo {',
                '    bar: baz;',
                '    bang-bip: 1px;',
                '    bang-bop: bar;',
                '    buzz-fram: "foo";',
                '    buzz-frum: moo;',
                '}'
            ]);

            helpers.test('should support deeply nested namespacing', [
                'foo {',
                '  bar: baz;',
                '  bang: {',
                '    bip: 1px;',
                '    bop: bar;',
                '    blat:{baf:bort}}}'
            ], [
                'foo {',
                '    bar: baz;',
                '    bang-bip: 1px;',
                '    bang-bop: bar;',
                '    bang-blat-baf: bort;',
                '}'
            ]);

            helpers.test('should support a mixture of assignment and namespacing', [
                'foo {',
                '  bar: baz {',
                '    bip: bop;',
                '    bing: bop;}}'
            ], [
                'foo {',
                '    bar: baz;',
                '    bar-bip: bop;',
                '    bar-bing: bop;',
                '}'
            ]);

            helpers.test('should support a mixture of an expression assignment and nested namespacing', [
                'foo {',
                '  bar: baz + bang {',
                '    bip: bop;',
                '    bing: bop; }}'
            ], [
                'foo {',
                '    bar: bazbang;',
                '    bar-bip: bop;',
                '    bar-bing: bop;',
                '}'
            ]);

            helpers.test('should not get confused about a psuedo selector being a namespaced variable assignment', [
                'foo {',
                '  bar:baz {',
                '    bip: bop;}}'
            ], [
                'foo bar:baz {',
                '    bip: bop;',
                '}'
            ]);

            // The following should throw a syntax error since there is no space between bar:1px
            helpers.test('should DESC', [
                'foo {',
                '    bar:1px {',
                '    bip: bop}}'
            ], [
                'foo bar:1px {',
                '    bip: bop;',
                '}'
            ]);
        });

        helpers.test('should support "@while $i != 5" syntax', [
            '$i: 1;',
            '.foo {',
            '  @while $i != 5 {',
            '    a: $i;',
            '    $i: $i + 1;',
            '  }',
            '}'
        ], [
            '.foo {',
            '    a: 1;',
            '    a: 2;',
            '    a: 3;',
            '    a: 4;',
            '}'
        ], false, function(){
            Fashion.Runtime.allowSetScopedVariables = true;
        }, function(){
            Fashion.Runtime.allowSetScopedVariables = true;
        });

        // The parser fails on this
        helpers.test('should support multiple selectors with accidental empty selectors', [
            '#foo #bar,,',
            ',#baz #boom, {a: b;}',
            '#bip #bop, ,, {c: d;}'
        ], [
            '#foo #bar,',
            '#baz #boom {',
            '    a: b;',
            '}',
            '#bip #bop {',
            '    c: d;',
            '}'
        ]);

    });

    helpers.test("should allow nulls as default when configured", [
        '$name: null !default;',
        '$name: "foo" !default;',
        'foo { background: $name + "-foo"; }',
    ], [
        ''
    ], false, function(){
        Fashion.Runtime.allowNullDefaults = true;
    });

    helpers.test("should not allow nulls as default when configured", [
        '$name: null !default;',
        '$name: "foo" !default;',
        '',
        'foo {',
        '    background: $name;',
        '}',
    ], [
        'foo {',
        '    background: "foo";',
        '}'
    ], false, function(){
        Fashion.Runtime.allowNullDefaults = false;
    });


    helpers.test("should create scopes for global rulesets", [
        '$foo: red;',
        '',
        'a {',
        '    $foo: blue;',
        '    color: $foo;',
        '',
        '    &:hover {',
        '        $foo: orange;',
        '        color: $foo',
        '    }',
        '    background-color: $foo;',
        '}',
        '',
        'b {',
        '    color: $foo;',
        '}'
    ], [
        'a {',
        '    color: blue;',
        '    background-color: orange;',
        '}',
        'a:hover {',
        '    color: orange;',
        '}',
        'b {',
        '    color: red;',
        '}'
    ], false, function(){
        Fashion.Runtime.allowSetScopedVariables = false;
        Fashion.Runtime.uniqueScopesForGlobalRulesets = true;
        Fashion.Runtime.uniqueScopesForAllRulesets = false;
    }, function(){
        Fashion.Runtime.allowSetScopedVariables = true;
        Fashion.Runtime.uniqueScopesForGlobalRulesets = true;
        Fashion.Runtime.uniqueScopesForAllRulesets = true;
    });

    helpers.test("should create scopes for all rulesets", [
        '$foo: red;',
        '',
        'a {',
        '    $foo: blue;',
        '    color: $foo;',
        '',
        '    &:hover {',
        '        $foo: orange;',
        '        color: $foo',
        '    }',
        '    background-color: $foo;',
        '}',
        '',
        'b {',
        '    color: $foo;',
        '}'
    ], [
        'a {',
        '    color: blue;',
        '    background-color: blue;',
        '}',
        'a:hover {',
        '    color: orange;',
        '}',
        'b {',
        '    color: red;',
        '}'
    ], false, function(){
        Fashion.Runtime.allowSetScopedVariables = false;
        Fashion.Runtime.uniqueScopesForGlobalRulesets = false;
        Fashion.Runtime.uniqueScopesForAllRulesets = true;
    }, function(){
        Fashion.Runtime.allowSetScopedVariables = true;
        Fashion.Runtime.uniqueScopesForGlobalRulesets = true;
        Fashion.Runtime.uniqueScopesForAllRulesets = true;
    });

    helpers.test("should support !global for ruleset scopes", [
        '$foo: red;',
        '',
        'a {',
        '    color: $foo;',
        '    $foo: blue !global;',
        '}',
        '',
        'b {',
        '    color: $foo;',
        '}'
    ], [
        'a {',
        '    color: red;',
        '}',
        'b {',
        '    color: blue;',
        '}'
    ], false, function(){
        Fashion.Runtime.allowSetScopedVariables = false;
        Fashion.Runtime.uniqueScopesForGlobalRulesets = false;
        Fashion.Runtime.uniqueScopesForAllRulesets = true;
    }, function(){
        Fashion.Runtime.allowSetScopedVariables = true;
        Fashion.Runtime.uniqueScopesForGlobalRulesets = true;
        Fashion.Runtime.uniqueScopesForAllRulesets = true;
    });


    helpers.test('should convert booleans to Fashion.True / Fashion.False', [
        '@mixin foo($a: true) {',
        '    @if $a {',
        '        color: red;',
        '    } @else {',
        '        color: blue;',
        '    }',
        '}',
        '',
        'div {',
        '    @include foo(false);',
        '}',
        'div {',
        '    @include foo(true);',
        '}',
        'div {',
        '    @include foo();',
        '}'
    ], [
        'div {',
        '    color: blue;',
        '}',
        'div {',
        '    color: red;',
        '}',
        'div {',
        '    color: red;',
        '}'
    ]);


    helpers.test("should handle decimal numbers", [
        'foo {',
        '    -webkit-text-stroke-width: .35px;',
        '}',
    ], [
        'foo {',
        '    -webkit-text-stroke-width: 0.35px;',
        '}'
    ]);

    helpers.test("should handle negative unary operator", [
        '$size: 15px !default;',
        'foo {',
        '    background: no-repeat 0 (-$size);',
        '}',
    ], [
        'foo {',
        '    background: no-repeat 0 -15px;',
        '}'
    ]);

    helpers.test("should add colors", [
        '$foo: #123;',
        '$bar: #445566;',
        'body {',
        '  background: $foo + $bar;',
        '}'
    ], [
        'body {',
        '    background: #579;',
        '}'
    ]);

    helpers.test("should add colors with clipping", [
        '$foo: #ff6600;',
        '$bar: #333;',
        'body {',
        '  background: $foo + $bar;',
        '}'
    ], [
        'body {',
        '    background: #f93;',
        '}'
    ]);

    helpers.test("should subtract colors", [
        '$foo: #579;',
        '$bar: #445566;',
        'body {',
        '  background: $foo - $bar;',
        '}'
    ], [
        'body {',
        '    background: #123;',
        '}'
    ]);

    helpers.test("should subtract colors with clipping", [
        '$foo: #ff6600;',
        '$bar: #445566;',
        'body {',
        '  background: $foo - $bar;',
        '}'
    ], [
        'body {',
        '    background: #b10;',
        '}'
    ]);

    helpers.test("should multiply colors with clipping", [
        '$foo: #ff6600;',
        '$bar: #445566;',
        'body {',
        '  background: $foo * $bar;',
        '}'
    ], [
        'body {',
        '    background: #ff0;',
        '}'
    ]);

    helpers.test("should divide colors with clipping", [
        '$foo: #ff6600;',
        '$bar: #445566;',
        'body {',
        '  background: ($foo / $bar);',
        '}'
    ], [
        'body {',
        '    background: #030100;',
        '}'
    ]);

    helpers.test("should handle boxing / unboxing color instances", [
        '$foo: 100%;',
        '$bar: 16px;',
        '$color: #fff !dynamic;',
        '$num: 0 !dynamic;',
        'body {',
        '  background: calc(#{$foo} - #{$bar});',
        '  @if $color {',
        '    color: $color;',
        '  }',
        '  @if $num == null {',
        '    num: $num;',
        '  }',
        '}'
    ], [
        'body {',
        '    background: calc(100% - 16px);',
        '    color: #fff;',
        '}'
    ]);

    helpers.test("should handle math operations with percentages", [
        'body { font-size: (100% * 12px / 16px); }'
    ], [
        'body {',
        '    font-size: 75%;',
        '}'
    ]);

    helpers.test("should handle % operations", [
        'body { font-size: 100 % 12px; }'
    ], [
        'body {',
        '    font-size: 4px;',
        '}'
    ]);

    helpers.test("should compare lists to null", [
        '$foo:  "foo" 16px FontAwesome !dynamic;',
        '$bar: ();',
        '',
        '$truthy: $foo != null;',
        '$falsey: $foo == null;',
        '',
        'body {',
        '  a: $truthy;',
        '  b: $falsey;',
        '}',
        '',
        '$truthy: $bar != null;',
        '$falsey: $bar == null;',
        '',
        'body {',
        '  a: $truthy;',
        '  b: $falsey;',
        '}'
    ], [
        'body {',
        '    a: true;',
        '    b: false;',
        '}',
        'body {',
        '    a: true;',
        '    b: false;',
        '}'
    ]);

    helpers.test("should be compatible with ruby compass on various number operations", [
        '$font-size: 12px;',
        '$test: 24px - 16px;',
        '.xhtml body {',
        '  font-size: (100% * $font-size / 16px);',
        '  prop1: #{unit(10px * 5em)};',
        '  prop2: (25px / 100px);',
        '  prop3: (3em/1.5em);',
        '  prop4: (unit(10px * 5em / 30cm / 1rem));',
        '  prop5: $test;',
        '  prop6: calc( true === true ? 100% - 3px : $font-sizie + #{$font-size} );',
        '}'
    ], [
        '.xhtml body {',
        '    font-size: 75%;',
        '    prop1: px*em;',
        '    prop2: 0.25;',
        '    prop3: 2;',
        '    prop4: "px*em/cm*rem";',
        '    prop5: 8px;',
        '    prop6: calc( true === true ? 100% - 3px : $font-sizie + 12px );',
        '}'
    ]);

    helpers.test("should filter null declarations", [
        'body {',
        '  prop1: null;',
        '  prop1: null;',
        '  prop1: null;',
        '}'
    ], [
        ''
    ]);

    helpers.test("should handle keyframes animations", [
        '@-webkit-keyframes fa-spin {',
        '  0% {',
        '    -webkit-transform: rotate(0deg);',
        '            transform: rotate(0deg);',
        '  }',
        '  100% {',
        '    -webkit-transform: rotate(359deg);',
        '            transform: rotate(359deg);',
        '  }',
        '}',
        '',
        '@keyframes fa-spin {',
        '  0% {',
        '    -webkit-transform: rotate(0deg);',
        '            transform: rotate(0deg);',
        '  }',
        '  100% {',
        '    -webkit-transform: rotate(359deg);',
        '            transform: rotate(359deg);',
        '  }',
        '}'
    ], [
        '@-webkit-keyframes fa-spin {',
        '    0% {',
        '        -webkit-transform: rotate(0deg);',
        '        transform: rotate(0deg);',
        '    }',
        '    100% {',
        '        -webkit-transform: rotate(359deg);',
        '        transform: rotate(359deg);',
        '    }',
        '}',
        '@keyframes fa-spin {',
        '    0% {',
        '        -webkit-transform: rotate(0deg);',
        '        transform: rotate(0deg);',
        '    }',
        '    100% {',
        '        -webkit-transform: rotate(359deg);',
        '        transform: rotate(359deg);',
        '    }',
        '}'
    ]);

    helpers.test("should handle !dynamic variables", [
        '$ccc: "CCC " + $aaa !dynamic;',
        '$aaa: "AAA" !dynamic;',
        '$bbb: "BBB " + $aaa !default;',
        '$aaa: "AAC" !dynamic;',
        '$bbb: "BBC " + $aaa !default;',
        'body {',
        '  background: $aaa;',
        '  foreground: $bbb;',
        '  middleground: $ccc;',
        '}'
    ], [
        'body {',
        '    background: "AAC";',
        '    foreground: "BBB AAC";',
        '    middleground: "CCC AAC";',
        '}'
    ]);

    helpers.test("should handle !dynamic variables using function syntax", [
        '$ccc: dynamic("CCC " + $aaa);',
        '$aaa: dynamic("AAA");',
        '$bbb: "BBB " + $aaa !default;',
        '$aaa: "AAC";',
        '$bbb: "BBC " + $aaa !default;',
        'body {',
        '  background: $aaa;',
        '  foreground: $bbb;',
        '  middleground: $ccc;',
        '}'
    ], [
        'body {',
        '    background: "AAC";',
        '    foreground: "BBB AAC";',
        '    middleground: "CCC AAC";',
        '}'
    ]);

    helpers.test("should hoist !dynamic variables", [
        '$aaa: "AAA" !dynamic;',
        '$bbb: "BBB " + $aaa !dynamic;',
        '$aaa: "AAC" !dynamic;',
        '$bbb: "BBC " + $ccc !dynamic;',
        '$ccc: "CCC";',
        'body {',
        '  background: $aaa;',
        '  foreground: $bbb;',
        '  middleground: $ccc;',
        '}'
    ], [
        'body {',
        '    background: "AAC";',
        '    foreground: "BBC CCC";',
        '    middleground: "CCC";',
        '}'
    ]);

    helpers.test("should handle !dynamic re-assignments", [
        '$foo: "a" !dynamic;',
        '$foo: "b";',
        '$foo: "c" !default;',
        'body {',
        '  background: $foo;',
        '}'
    ], [
        'body {',
        '    background: "c";',
        '}'
    ]);

    helpers.test("should handle !dynamic re-assignments and hoisting", [
        '$foo: "a" !dynamic;',
        '$bar: 42;',
        '$foo: $bar;',
        '$bar: 7 !default;',
        'body {',
        '  background: $foo;',
        '}'
    ], [
        'body {',
        '    background: 7;',
        '}'
    ]);

    helpers.test("should allow hiding dynamic variables locally",[
        '$foo: 42 !dynamic;',
        '@function bar () {',
        '  $foo: 100;',
        '  @return $foo;',
        '}',
        'body {',
        '  background: bar();',
        '}'
    ],[
        'body {',
        '    background: 100;',
        '}'
    ]);

    helpers.test ("should parse filter values as return statements", [
        '@function ie-bg-opacity-filter(',
        '    $background-color: null,',
        '    $opacity: 1',
        ') {',
        '    $ie-background-str: ie-hex-str(rgba($background-color, $opacity));',
        '    @return progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-background-str}, endColorstr=#{$ie-background-str});',
        '}',
        '',
        '.foo {',
        '    filter: ie-bg-opacity-filter(red, .6), progid:DXImageTransform.Microsoft.BasicImage(rotation=1);',
        '}',
    ], [
        '.foo {',
        '    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#99ff0000, endColorstr=#99ff0000), progid:DXImageTransform.Microsoft.BasicImage(rotation=1);',
        '}',
    ]);

    helpers.test ("should return false for == operator on incompatible units", [
        '$foo: 1px;',
        '$bar: 1em;',
        '',
        '@if $foo == $bar {',
        '    .equal {',
        '        color: green;',
        '    }',
        '} @else {',
        '    .not-equal {',
        '        color: red;',
        '    }',
        '}'
    ], [
        '.not-equal {',
        '    color: red;',
        '}'
    ]);

    helpers.test ("should return true for != operator on incompatible units", [
        '$foo: 1px;',
        '$bar: 1em;',
        '',
        '@if $foo != $bar {',
        '    .equal {',
        '        color: green;',
        '    }',
        '} @else {',
        '    .not-equal {',
        '        color: red;',
        '    }',
        '}'
    ], [
        '.equal {',
        '    color: green;',
        '}'
    ]);


    helpers.test ("should skip evaluation of false clause for if function", [
        '$foo: if(true, "bar", $baz);',
        'a { b: $foo; }'
    ], [
        'a {',
        '    b: "bar";',
        '}'
    ]);

    helpers.test ("should skip evaluation of true clause for if function", [
        '$foo: if(false, $baz, "bar");',
        'a { b: $foo; }'
    ], [
        'a {',
        '    b: "bar";',
        '}'
    ]);

    helpers.test ("should chain or operators", [
        "$foo: null;",
        "$bar: 5px;",
        "a {",
        "    b: calc(16px + #{$foo or $bar or 0px});",
        "}"
    ], [
        "a {",
        "    b: calc(16px + 5px);",
        "}"
    ]);

    helpers.test ("should chain or operators until default", [
        "$foo: null;",
        "$bar: null;",
        "a {",
        "    b: calc(16px + #{$foo or $bar or 0px});",
        "}"
    ], [
        "a {",
        "    b: calc(16px + 0px);",
        "}"
    ]);

    helpers.test ("should chain and operators", [
        "$foo: 5px;",
        "$bar: 10px;",
        "a {",
        "    b: calc(16px + #{$foo and $bar and 11px});",
        "}"
    ], [
        "a {",
        "    b: calc(16px + 11px);",
        "}"
    ]);

    helpers.test ("should chain and operators until default", [
        "$foo: 5px;",
        "$bar: null;",
        "a {",
        "    b: calc(16px + #{$foo and $bar and 11px});",
        "}"
    ], [
        "a {",
        "    b: calc(16px + );",
        "}"
    ]);

    helpers.test ("should test conditionals with or operators", [
        "$a: null;",
        "$b: false;",
        "$c: 0;",
        "$d: \"\";",
        "$e: 1px;",
        ".foo {",
        "    margin-top: $a or $e;",
        "    margin-right: $b or $e;",
        "    margin-bottom: $c or $e;",
        "    margin-left: $d or $e;",
        "}"
    ], [
        ".foo {",
        "    margin-top: 1px;",
        "    margin-right: 1px;",
        "    margin-bottom: 0;",
        "    margin-left: \"\";",
        "}"
    ]);

    helpers.test ("should not error for undefined variables in false condition of ternary operator", [
        "$a: dynamic(1);",
        "$b: dynamic( if($a == 1, #fff, $c) );",
        "a {",
        "    b: $b;",
        "}"
    ], [
        "a {",
        "    b: #fff;",
        "}"
    ]);

    helpers.test ("should remove empty rulesets", [
        "$a: dynamic(null);",
        "a {",
        "    b: $a;",
        "}"
    ], [
        ""
    ]);

    helpers.test ("should use deprecated variable if a value is supplied", [
        "//# fashion replaces $b",
        "$a: dynamic(red);",
        "$b: dynamic(green);",
        "a {",
        "    b: $a;",
        "}"
    ], [
        "a {",
        "    b: green;",
        "}"
    ]);

    helpers.test ("should use deprecated variable if a variable reference is supplied", [
        "//# fashion replaces $b",
        "$a: dynamic(blue);",
        "$b: dynamic($c);",
        "$c: dynamic(green);",
        "a {",
        "    b: $a;",
        "}"
    ], [
        "a {",
        "    b: green;",
        "}"
    ]);

    helpers.test ("should use deprecated variable if a variable reference is supplied with - chars in name", [
        "//# fashion replaces $b-var",
        "$a: dynamic(blue);",
        "$b-var: dynamic($c);",
        "$c: dynamic(green);",
        "a {",
        "    b: $a;",
        "}"
    ], [
        "a {",
        "    b: green;",
        "}"
    ]);

    helpers.test ("should use deprecated variable if a global variable reference is supplied", [
        "//# fashion replaces $b",
        "$a: dynamic(purple);",
        "$b: dynamic($c);",
        "$c: green;",
        "a {",
        "    b: $a;",
        "    a: $a;",
        "}"
    ], [
        "a {",
        "    b: green;",
        "    a: green;",
        "}"
    ]);

    helpers.test ("should use deprecated variable if a dynamic variable reference is supplied", [
        "//# fashion replaces $b-old",
        "$a: dynamic(purple);",
        "$b-old: dynamic(blue);",
        "@warn '$b-old is ' + $b-old;",
        "a {",
        "    b: $b-old;",
        "    a: $a;",
        "}"
    ], [
        "a {",
        "    b: blue;",
        "    a: blue;",
        "}"
    ]);

    helpers.test ("should use new variable if a deprecated value is not supplied", [
        "//# fashion replaces $b",
        "$a: dynamic(red);",
        "a {",
        "    b: $a;",
        "}"
    ], [
        "a {",
        "    b: red;",
        "}"
    ]);

    helpers.test ("should use new variable if a deprecated value is not supplied and declaration is not at the beginning of the file", [
        "$c: dynamic(bar);",
        "//# fashion replaces $b-old",
        "$a: dynamic(foo);",
        "a {",
        "    b: $b-old $c;",
        "}"
    ], [
        "a {",
        "    b: foo bar;",
        "}"
    ]);

    helpers.test ("should use new variable if a deprecated value is not defined", [
        "//# fashion replaces $b",
        "$a: dynamic(red);",
        "$c: dynamic($b);",
        "a {",
        "    b: $c;",
        "}"
    ], [
        "a {",
        "    b: red;",
        "}"
    ]);

    helpers.test ("should support vh, v2, vmin, vmax", [
        "$a: dynamic(1vh);",
        "$b: dynamic(2vw);",
        "$c: dynamic(3vmin);",
        "$d: dynamic(4vmax);",
        "a {",
        "    a: $a;",
        "    b: $b;",
        "    c: $c;",
        "    d: $d;",
        "}"
    ], [
        "a {",
        "    a: 1vh;",
        "    b: 2vw;",
        "    c: 3vmin;",
        "    d: 4vmax;",
        "}"
    ]);

    helpers.test ("should sort references to deprecated variables", [
        '// this reference will cause $a to be sorted before this line;',
        '$c: dynamic($a);',
        '//# fashion replaces $b-old',
        '$b-new: dynamic(red);',
        '$a: dynamic($b-old);',
        "a {",
        "    b: $c;",
        "}"
    ], [
        "a {",
        "    b: red;",
        "}"
    ]);


    helpers.test ("should defer content using special mixin call", [
        '$foo: "hello";',
        '$condition: true;',
        '@include fashion-defer-content("foo") {',
        '.y {',
        '        foo: $foo;',
        '    }',
        '}',
        '.x {',
        '    foo: $foo;',
        '}',
        '@include fashion-defer-content {',
        '.z {',
        '        foo: $foo;',
        '    }',
        '}',
        '@mixin includeSrc($className) {',
        '    if ($className) {',
        '    @include fashion-defer-content("bar") {',
        '        @content;',
        '        }',
        '    }',
        '}',
        '@mixin anotherMixin($bar) {',
        '@include includeSrc("hello") {',
        '    .b {',
        '            foo: $foo;',
        '            bar: $bar;',
        '            src: $__filename;',
        '            src: $__dirname;',
        '        }',
        '    }',
        '}',
        '@include anotherMixin($foo);',
        '$foo: "world";',
        '@include fashion-inject-content("bar");'
    ], [
        '/* dir/sub/theFile:8 */',
        '.x {',
        '    foo: "hello";',
        '}',
        '/* dir/sub/theFile:25 */',
        '.b {',
        '    foo: "world";',
        '    bar: "hello";',
        '    src: "dir/sub/theFile";',
        '    src: "dir/sub";',
        '}',
        '/* dir/sub/theFile:4 */',
        '.y {',
        '    foo: "world";',
        '}',
        '/* dir/sub/theFile:12 */',
        '.z {',
        '    foo: "world";',
        '}'
    ], null, null, null, "dir/sub/theFile");

    helpers.test ("should allow spread operator to call mixins / functions using maps", [
        '@mixin a( $one: blue, $two: green) {',
        '    a {',
        '        one: $one;',
        '        two: $two;',
        '    }',
        '}',
        '$map: (two: purple, one: red);',
        '@include a();',
        '@include a($map...);'
    ], [
        "a {",
        "    one: blue;",
        "    two: green;",
        "}",
        "a {",
        "    one: red;",
        "    two: purple;",
        "}"
    ]);
    
    helpers.test ("should allow spread operator to call mixins / functions using maps with extra args", [
        '@mixin a( $one: blue, $five: magenta, $two: green) {',
        '    a {',
        '        one: $one;',
        '        two: $two;',
        '        five: $five;',
        '    }',
        '}',
        '$map: (two: purple, one: red, three: orange, four: black);',
        '@include a();',
        '@include a($map...);'
    ], [
        "a {",
        "    one: blue;",
        "    two: green;",
        "    five: magenta;",
        "}",
        "a {",
        "    one: red;",
        "    two: purple;",
        "    five: magenta;",
        "}"
    ]);
    
    helpers.test ("should allow spread operator to call mixins / functions using maps with var args", [
        '@mixin a( $one: blue, $five: magenta, $two: green, $rest...) {',
        '    a {',
        '        one: $one;',
        '        two: $two;',
        '        five: $five;',
        '        rest: $rest;',
        '    }',
        '}',
        '$map: (two: purple, one: red, three: orange, four: cyan);',
        '@include a();',
        '@include a($map...);'
    ], [
        "a {",
        "    one: blue;",
        "    two: green;",
        "    five: magenta;",
        "}",
        "a {",
        "    one: red;",
        "    two: purple;",
        "    five: magenta;",
        "    rest: orange, cyan;",
        "}"
    ]);
    
    helpers.test ("should detect default list parameter values", [
        '@mixin a($b: 1px 2px) {',
        '    margin: $b;',
        '}',
        'a {',
        '    @include a;',
        '}'
    ], [
        'a {',
        '    margin: 1px 2px;',
        '}'
    ], false, function(builder) {
        builder.missingParameters = builder.context.missingParameters = "error";
    }, function(builder) {
        delete builder.missingParamters;
        delete builder.context.missingParamteres;
    });
    
    helpers.testFailure ("should detect variable cycles in deprecated variables", [
        '// this reference will cause $a to be sorted before this line;',
        '$c: dynamic($a);',
        '//# fashion replaces $b-old',
        '$b-new: dynamic($c);',
        '$a: dynamic($b-old);'
    ], "Variable Cycle detected");

    helpers.testFailure("should fail !dynamic assignment using !global",[
        '$foo: 42 !dynamic;',
        '@function bar () {',
        '  $foo: 45;',
        '  $foo: 100 !global;',
        '  @return $foo;',
        '}',
        'body {',
        '  background: bar();',
        '}'
    ],
    "Sass compilation encountered 1 error(s)");

    helpers.testFailure("should fail !dynamic assignment using !global for elevated variable",[
            '$foo: 42;',
            '$bar: $foo !dynamic;',
            '@function bar () {',
            '  $foo: 100 !global;',
            '  $foo: 45;',
            '  @return $foo;',
            '}',
            'body {',
            '  background: bar();',
            '}'
        ],
        "Sass compilation encountered 1 error(s)");

    helpers.testFailure("should fail !dynamic assignment using !global for transitive elevated variable",[
            '$foo: 42;',
            '$bar: $foo;',
            '$baz: $bar !dynamic;',
            '@function bar () {',
            '  $foo: 100 !global;',
            '  $foo: 45;',
            '  @return $foo;',
            '}',
            'body {',
            '  background: bar();',
            '}'
        ],
        "Sass compilation encountered 1 error(s)");

    helpers.testFailure("should fail !dynamic assignment inside control logic",
        [
            '@if (true) {',
            '  $foo: 42 !dynamic',
            '}',
            'body {',
            '}'
        ],
        "Sass compilation encountered 1 error(s)");

    helpers.testFailure("should fail !dynamic re-assignment inside control logic",
        [
            '$foo: 41 !dynamic;',
            '@if (true) {',
            '  $foo: 42;',
            '}',
            'body {',
            '}'
        ],
        "Sass compilation encountered 1 error(s)");

    helpers.testFailure("should fail !dynamic assignment to non-dynamic variable",
        [
            '$ccc: "CCC " + $aaa !dynamic;',
            '$aaa: "AAA" !default;',
            '$bbb: "BBB " + $aaa !default;',
            '$aaa: "AAC" !dynamic;',
            '$bbb: "BBC " + $aaa !default;',
            'body {',
            '  background: $aaa;',
            '  foreground: $bbb;',
            '  middleground: $ccc;',
            '}'
        ],
        "Encountered 1 error(s) during preprocessing.");

    helpers.testFailure("should fail !dynamic assignment at non-global scope",
        [
            '@if (false) {',
            '  $aaa: "AAA" !dynamic;',
            '}'
        ],
        "Sass compilation encountered 1 error(s)");

    helpers.testFailure("should fail !dynamic re-assign at non-global scope",
        [
            '$aaa: "AAA" !dynamic;',
            '@if (false) {',
            '  $aaa: "AAA" !dynamic;',
            '}'
        ],
        "Sass compilation encountered 1 error(s)");

    helpers.testFailure("should fail when variable cycles are detected",
        [
            '$aaa: "AAA " + $bbb !dynamic;',
            '$bbb: "BBB " + $aaa !dynamic;'
        ],
        "Variable Cycle detected in variable : ");

    helpers.testFailure("should fail undeclared global references",
        [
            '$bbb: "BBB " + $aaa !dynamic;'
        ],
        "Reference to undeclared variable : $aaa");

    helpers.testFailure("should fail parent reference in base selector  ",
        [
            '@mixin bar() {',
            '    .foo & {',
            '        margin: 1;',
            '    }',
            '}',
            '',
            '@include bar();',
            '',
            '.b {',
            '  @include bar();',
            '}',
        ],
        "Base-level rules cannot contain the parent-selector-referencing character '&'.",
        false,
        function(){
            Fashion.CssPostprocessor.prototype.strictParentRef = true;
        },
        function(){
            Fashion.CssPostprocessor.prototype.strictParentRef = false;
        });

    helpers.testFailure("should support the @error directive",
        [
            '@error("Expected Error");'
        ],
        "Expected Error");

});
